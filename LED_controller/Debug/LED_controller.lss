
LED_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000057a  00800060  00001b98  00001c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008005da  008005da  000021a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003acb  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00005d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001179  00000000  00000000  00006909  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00007a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000815  00000000  00000000  00007cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146a  00000000  00000000  000084d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000993f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_7>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_start>:
      d6:	e8 06       	cpc	r14, r24

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	15 e0       	ldi	r17, 0x05	; 5
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e8 e9       	ldi	r30, 0x98	; 152
      ec:	fb e1       	ldi	r31, 0x1B	; 27
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	aa 3d       	cpi	r26, 0xDA	; 218
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	25 e0       	ldi	r18, 0x05	; 5
      fc:	aa ed       	ldi	r26, 0xDA	; 218
      fe:	b5 e0       	ldi	r27, 0x05	; 5
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	aa 3f       	cpi	r26, 0xFA	; 250
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 cd 04 	call	0x99a	; 0x99a <main>
     124:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN6DS13078readTimeEPc>:
		I2CMTsend(0b00010000);					// 0x07	7-OUT	6-0			5-0			4-SQWE		3-0		2-0		1-RS1	0-RS0	(OUT - логика на выходе; SQWE - генератор на выходе; RS1..0 - прескелереры частоты генератора SQWE)
		I2CMTstop();							// Стоп от мастера									// 11111 = 0xf8 - No relevant state information	available; TWINT = “0”
	}

	void readTime(char time[])
	{
     12c:	fc 01       	movw	r30, r24
		
	//  Функции мастера рессивера  //
		
	inline void I2CMRinit(void)
	{
		TWBR = 66;										// Задает скорость соединения. Чем больше тем медленнее; 255 -> 28кбит/с; 66 -> 100кбит/с
     12e:	82 e4       	ldi	r24, 0x42	; 66
     130:	80 b9       	out	0x00, r24	; 0
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
     132:	81 b1       	in	r24, 0x01	; 1
     134:	81 b9       	out	0x01, r24	; 1
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     136:	84 ea       	ldi	r24, 0xA4	; 164
     138:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     13a:	06 b6       	in	r0, 0x36	; 54
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <_ZN6DS13078readTimeEPc+0xe>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     140:	80 ed       	ldi	r24, 0xD0	; 208
     142:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     144:	84 e8       	ldi	r24, 0x84	; 132
     146:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     148:	06 b6       	in	r0, 0x36	; 54
     14a:	07 fe       	sbrs	r0, 7
     14c:	fd cf       	rjmp	.-6      	; 0x148 <_ZN6DS13078readTimeEPc+0x1c>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     14e:	13 b8       	out	0x03, r1	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     150:	84 e8       	ldi	r24, 0x84	; 132
     152:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     154:	06 b6       	in	r0, 0x36	; 54
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <_ZN6DS13078readTimeEPc+0x28>
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     15a:	84 ea       	ldi	r24, 0xA4	; 164
     15c:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     15e:	06 b6       	in	r0, 0x36	; 54
     160:	07 fe       	sbrs	r0, 7
     162:	fd cf       	rjmp	.-6      	; 0x15e <_ZN6DS13078readTimeEPc+0x32>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     164:	81 ed       	ldi	r24, 0xD1	; 209
     166:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     168:	84 e8       	ldi	r24, 0x84	; 132
     16a:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     16c:	06 b6       	in	r0, 0x36	; 54
     16e:	07 fe       	sbrs	r0, 7
     170:	fd cf       	rjmp	.-6      	; 0x16c <_ZN6DS13078readTimeEPc+0x40>
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     172:	84 ec       	ldi	r24, 0xC4	; 196
     174:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     176:	06 b6       	in	r0, 0x36	; 54
     178:	07 fe       	sbrs	r0, 7
     17a:	fd cf       	rjmp	.-6      	; 0x176 <_ZN6DS13078readTimeEPc+0x4a>
		return TWDR;									// Читаем регистр данных
     17c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     17e:	28 2f       	mov	r18, r24
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	35 95       	asr	r19
     184:	27 95       	ror	r18
     186:	35 95       	asr	r19
     188:	27 95       	ror	r18
     18a:	35 95       	asr	r19
     18c:	27 95       	ror	r18
     18e:	35 95       	asr	r19
     190:	27 95       	ror	r18
     192:	22 0f       	add	r18, r18
     194:	92 2f       	mov	r25, r18
     196:	99 0f       	add	r25, r25
     198:	99 0f       	add	r25, r25
     19a:	29 0f       	add	r18, r25
     19c:	8f 70       	andi	r24, 0x0F	; 15
     19e:	82 0f       	add	r24, r18
		I2CMRsend(DS1307_WRITE_ADRESS);			// Передача адреса слэйва
		I2CMRsend(0x00);						// Передача адреса ячейки
		
		I2CMRstart();							// Повторный старт
		I2CMRsend(DS1307_READ_ADRESS);			// Отправка адреса слэйва							// 01000 = 0x40 - SLA+R has been transmitted;	ACK has been received
		time[0] = BinToDec(I2CMRread());		// Чтение данных   ACK								// 01010 = Data byte has been received;			ACK has been returned
     1a0:	80 83       	st	Z, r24
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     1a2:	84 ec       	ldi	r24, 0xC4	; 196
     1a4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     1a6:	06 b6       	in	r0, 0x36	; 54
     1a8:	07 fe       	sbrs	r0, 7
     1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <_ZN6DS13078readTimeEPc+0x7a>
		return TWDR;									// Читаем регистр данных
     1ac:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	35 95       	asr	r19
     1b4:	27 95       	ror	r18
     1b6:	35 95       	asr	r19
     1b8:	27 95       	ror	r18
     1ba:	35 95       	asr	r19
     1bc:	27 95       	ror	r18
     1be:	35 95       	asr	r19
     1c0:	27 95       	ror	r18
     1c2:	22 0f       	add	r18, r18
     1c4:	92 2f       	mov	r25, r18
     1c6:	99 0f       	add	r25, r25
     1c8:	99 0f       	add	r25, r25
     1ca:	29 0f       	add	r18, r25
     1cc:	8f 70       	andi	r24, 0x0F	; 15
     1ce:	82 0f       	add	r24, r18
		time[1] =  BinToDec(I2CMRread());
     1d0:	81 83       	std	Z+1, r24	; 0x01
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     1d2:	84 ec       	ldi	r24, 0xC4	; 196
     1d4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     1d6:	06 b6       	in	r0, 0x36	; 54
     1d8:	07 fe       	sbrs	r0, 7
     1da:	fd cf       	rjmp	.-6      	; 0x1d6 <_ZN6DS13078readTimeEPc+0xaa>
		return TWDR;									// Читаем регистр данных
     1dc:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     1de:	28 2f       	mov	r18, r24
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	35 95       	asr	r19
     1e4:	27 95       	ror	r18
     1e6:	35 95       	asr	r19
     1e8:	27 95       	ror	r18
     1ea:	35 95       	asr	r19
     1ec:	27 95       	ror	r18
     1ee:	35 95       	asr	r19
     1f0:	27 95       	ror	r18
     1f2:	22 0f       	add	r18, r18
     1f4:	92 2f       	mov	r25, r18
     1f6:	99 0f       	add	r25, r25
     1f8:	99 0f       	add	r25, r25
     1fa:	29 0f       	add	r18, r25
     1fc:	8f 70       	andi	r24, 0x0F	; 15
     1fe:	82 0f       	add	r24, r18
		time[2] = BinToDec(I2CMRread());
     200:	82 83       	std	Z+2, r24	; 0x02
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     202:	84 ec       	ldi	r24, 0xC4	; 196
     204:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     206:	06 b6       	in	r0, 0x36	; 54
     208:	07 fe       	sbrs	r0, 7
     20a:	fd cf       	rjmp	.-6      	; 0x206 <_ZN6DS13078readTimeEPc+0xda>
		return TWDR;									// Читаем регистр данных
     20c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     20e:	28 2f       	mov	r18, r24
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	35 95       	asr	r19
     214:	27 95       	ror	r18
     216:	35 95       	asr	r19
     218:	27 95       	ror	r18
     21a:	35 95       	asr	r19
     21c:	27 95       	ror	r18
     21e:	35 95       	asr	r19
     220:	27 95       	ror	r18
     222:	22 0f       	add	r18, r18
     224:	92 2f       	mov	r25, r18
     226:	99 0f       	add	r25, r25
     228:	99 0f       	add	r25, r25
     22a:	29 0f       	add	r18, r25
     22c:	8f 70       	andi	r24, 0x0F	; 15
     22e:	82 0f       	add	r24, r18
		time[3] = BinToDec(I2CMRread());
     230:	83 83       	std	Z+3, r24	; 0x03
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     232:	84 ec       	ldi	r24, 0xC4	; 196
     234:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     236:	06 b6       	in	r0, 0x36	; 54
     238:	07 fe       	sbrs	r0, 7
     23a:	fd cf       	rjmp	.-6      	; 0x236 <_ZN6DS13078readTimeEPc+0x10a>
		return TWDR;									// Читаем регистр данных
     23c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     23e:	28 2f       	mov	r18, r24
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	35 95       	asr	r19
     244:	27 95       	ror	r18
     246:	35 95       	asr	r19
     248:	27 95       	ror	r18
     24a:	35 95       	asr	r19
     24c:	27 95       	ror	r18
     24e:	35 95       	asr	r19
     250:	27 95       	ror	r18
     252:	22 0f       	add	r18, r18
     254:	92 2f       	mov	r25, r18
     256:	99 0f       	add	r25, r25
     258:	99 0f       	add	r25, r25
     25a:	29 0f       	add	r18, r25
     25c:	8f 70       	andi	r24, 0x0F	; 15
     25e:	82 0f       	add	r24, r18
		time[4] = BinToDec(I2CMRread());
     260:	84 83       	std	Z+4, r24	; 0x04
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     262:	84 ec       	ldi	r24, 0xC4	; 196
     264:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     266:	06 b6       	in	r0, 0x36	; 54
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <_ZN6DS13078readTimeEPc+0x13a>
		return TWDR;									// Читаем регистр данных
     26c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	35 95       	asr	r19
     274:	27 95       	ror	r18
     276:	35 95       	asr	r19
     278:	27 95       	ror	r18
     27a:	35 95       	asr	r19
     27c:	27 95       	ror	r18
     27e:	35 95       	asr	r19
     280:	27 95       	ror	r18
     282:	22 0f       	add	r18, r18
     284:	92 2f       	mov	r25, r18
     286:	99 0f       	add	r25, r25
     288:	99 0f       	add	r25, r25
     28a:	29 0f       	add	r18, r25
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	82 0f       	add	r24, r18
		time[5] = BinToDec(I2CMRread());
     290:	85 83       	std	Z+5, r24	; 0x05
		return TWDR;									// Читаем регистр данных
	}
	
	inline char I2CMRreadLast(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN);
     292:	84 e8       	ldi	r24, 0x84	; 132
     294:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					//ожидание установки бита TWIN
     296:	06 b6       	in	r0, 0x36	; 54
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <_ZN6DS13078readTimeEPc+0x16a>
		return TWDR;									//читаем регистр данных
     29c:	23 b1       	in	r18, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     29e:	82 2f       	mov	r24, r18
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	95 95       	asr	r25
     2a4:	87 95       	ror	r24
     2a6:	95 95       	asr	r25
     2a8:	87 95       	ror	r24
     2aa:	95 95       	asr	r25
     2ac:	87 95       	ror	r24
     2ae:	95 95       	asr	r25
     2b0:	87 95       	ror	r24
     2b2:	2f 70       	andi	r18, 0x0F	; 15
     2b4:	88 0f       	add	r24, r24
     2b6:	98 2f       	mov	r25, r24
     2b8:	99 0f       	add	r25, r25
     2ba:	99 0f       	add	r25, r25
     2bc:	89 0f       	add	r24, r25
     2be:	82 0f       	add	r24, r18
		time[6] = BinToDec(I2CMRreadLast());	// Чтение данных NOACK								// 01011 = 0x58 - Data byte has been received;	NOT ACK has been returned
     2c0:	86 83       	std	Z+6, r24	; 0x06
		return TWDR;									//читаем регистр данных
	}
		
	inline void I2CMRstop(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
     2c2:	84 e9       	ldi	r24, 0x94	; 148
     2c4:	86 bf       	out	0x36, r24	; 54
     2c6:	08 95       	ret

000002c8 <_Z41__static_initialization_and_destruction_0ii>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	09 f0       	breq	.+2      	; 0x2de <_Z41__static_initialization_and_destruction_0ii+0x16>
     2dc:	bd c0       	rjmp	.+378    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     2de:	6f 3f       	cpi	r22, 0xFF	; 255
     2e0:	7f 4f       	sbci	r23, 0xFF	; 255
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     2e4:	b9 c0       	rjmp	.+370    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
char green = 55;
char blue = 45;

// Переменные времени
char time[7] = {40, 59, 19, 2, 21, 5, 24};											// sec, min, hour, day, date, month, year
float timeDec = (float)time[0] + (float)time[1] / 60.0 + (float)time[2] / 3600.0;	// Реальное время в десятичном виде
     2e6:	c8 e8       	ldi	r28, 0x88	; 136
     2e8:	d0 e0       	ldi	r29, 0x00	; 0
     2ea:	18 81       	ld	r17, Y
     2ec:	69 81       	ldd	r22, Y+1	; 0x01
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	40 e7       	ldi	r20, 0x70	; 112
     2fe:	52 e4       	ldi	r21, 0x42	; 66
     300:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     304:	6b 01       	movw	r12, r22
     306:	7c 01       	movw	r14, r24
     308:	61 2f       	mov	r22, r17
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     314:	a7 01       	movw	r20, r14
     316:	96 01       	movw	r18, r12
     318:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     31c:	6b 01       	movw	r12, r22
     31e:	7c 01       	movw	r14, r24
     320:	6a 81       	ldd	r22, Y+2	; 0x02
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	41 e6       	ldi	r20, 0x61	; 97
     332:	55 e4       	ldi	r21, 0x45	; 69
     334:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	c7 01       	movw	r24, r14
     33e:	b6 01       	movw	r22, r12
     340:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     344:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <timeDec>
     348:	70 93 ec 05 	sts	0x05EC, r23	; 0x8005ec <timeDec+0x1>
     34c:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <timeDec+0x2>
     350:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <timeDec+0x3>
char timecomp = time[0];															// Секунда сравнения
     354:	10 93 ea 05 	sts	0x05EA, r17	; 0x8005ea <timecomp>
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     358:	c0 e8       	ldi	r28, 0x80	; 128
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	68 81       	ld	r22, Y
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     368:	6b 01       	movw	r12, r22
     36a:	7c 01       	movw	r14, r24
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     36c:	69 81       	ldd	r22, Y+1	; 0x01
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	40 e7       	ldi	r20, 0x70	; 112
     37e:	52 e4       	ldi	r21, 0x42	; 66
     380:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     384:	9b 01       	movw	r18, r22
     386:	ac 01       	movw	r20, r24
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     390:	0a ed       	ldi	r16, 0xDA	; 218
     392:	15 e0       	ldi	r17, 0x05	; 5
     394:	f8 01       	movw	r30, r16
     396:	60 83       	st	Z, r22
     398:	71 83       	std	Z+1, r23	; 0x01
     39a:	82 83       	std	Z+2, r24	; 0x02
     39c:	93 83       	std	Z+3, r25	; 0x03
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     39e:	6a 81       	ldd	r22, Y+2	; 0x02
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     3aa:	6b 01       	movw	r12, r22
     3ac:	7c 01       	movw	r14, r24
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     3ae:	6b 81       	ldd	r22, Y+3	; 0x03
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e7       	ldi	r20, 0x70	; 112
     3c0:	52 e4       	ldi	r21, 0x42	; 66
     3c2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     3c6:	9b 01       	movw	r18, r22
     3c8:	ac 01       	movw	r20, r24
     3ca:	c7 01       	movw	r24, r14
     3cc:	b6 01       	movw	r22, r12
     3ce:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     3d2:	f8 01       	movw	r30, r16
     3d4:	64 83       	std	Z+4, r22	; 0x04
     3d6:	75 83       	std	Z+5, r23	; 0x05
     3d8:	86 83       	std	Z+6, r24	; 0x06
     3da:	97 83       	std	Z+7, r25	; 0x07

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     3dc:	6c 81       	ldd	r22, Y+4	; 0x04
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     3ec:	6d 81       	ldd	r22, Y+5	; 0x05
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	40 e7       	ldi	r20, 0x70	; 112
     3fe:	52 e4       	ldi	r21, 0x42	; 66
     400:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     404:	9b 01       	movw	r18, r22
     406:	ac 01       	movw	r20, r24
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     410:	f8 01       	movw	r30, r16
     412:	60 87       	std	Z+8, r22	; 0x08
     414:	71 87       	std	Z+9, r23	; 0x09
     416:	82 87       	std	Z+10, r24	; 0x0a
     418:	93 87       	std	Z+11, r25	; 0x0b
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     41a:	6e 81       	ldd	r22, Y+6	; 0x06
};
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     426:	6b 01       	movw	r12, r22
     428:	7c 01       	movw	r14, r24
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     42a:	6f 81       	ldd	r22, Y+7	; 0x07
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	40 e7       	ldi	r20, 0x70	; 112
     43c:	52 e4       	ldi	r21, 0x42	; 66
     43e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     442:	9b 01       	movw	r18, r22
     444:	ac 01       	movw	r20, r24
     446:	c7 01       	movw	r24, r14
     448:	b6 01       	movw	r22, r12
     44a:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
};
     44e:	f8 01       	movw	r30, r16
     450:	64 87       	std	Z+12, r22	; 0x0c
     452:	75 87       	std	Z+13, r23	; 0x0d
     454:	86 87       	std	Z+14, r24	; 0x0e
     456:	97 87       	std	Z+15, r25	; 0x0f
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	2f 93       	push	r18
     476:	3f 93       	push	r19
     478:	4f 93       	push	r20
     47a:	5f 93       	push	r21
     47c:	6f 93       	push	r22
     47e:	7f 93       	push	r23
     480:	8f 93       	push	r24
     482:	9f 93       	push	r25
     484:	af 93       	push	r26
     486:	bf 93       	push	r27
     488:	ef 93       	push	r30
     48a:	ff 93       	push	r31
	cli();
     48c:	f8 94       	cli
	time[0]++;						// Инкремент секунды
     48e:	e8 e8       	ldi	r30, 0x88	; 136
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	80 83       	st	Z, r24
	
	if (time[0] >= 60)
     498:	8c 33       	cpi	r24, 0x3C	; 60
     49a:	20 f0       	brcs	.+8      	; 0x4a4 <__vector_7+0x3a>
	{
		time[1]++;					// Инкремент минуты
     49c:	81 81       	ldd	r24, Z+1	; 0x01
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	81 83       	std	Z+1, r24	; 0x01
		time[0] = 0;
     4a2:	10 82       	st	Z, r1
	}
	
	if (time[1] >= 60)
     4a4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     4a8:	8c 33       	cpi	r24, 0x3C	; 60
     4aa:	30 f0       	brcs	.+12     	; 0x4b8 <__vector_7+0x4e>
	{
		time[2]++;
     4ac:	e8 e8       	ldi	r30, 0x88	; 136
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	82 81       	ldd	r24, Z+2	; 0x02
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	82 83       	std	Z+2, r24	; 0x02
		time[1] = 0;				// Инкремент часа
     4b6:	11 82       	std	Z+1, r1	; 0x01
	}
	
	if (time[2] >= 24)				// Сутки
     4b8:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     4bc:	88 31       	cpi	r24, 0x18	; 24
     4be:	28 f0       	brcs	.+10     	; 0x4ca <__vector_7+0x60>
	{
		time[0] = 0;
     4c0:	e8 e8       	ldi	r30, 0x88	; 136
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	10 82       	st	Z, r1
		time[1] = 0;
     4c6:	11 82       	std	Z+1, r1	; 0x01
		time[2] = 0;
     4c8:	12 82       	std	Z+2, r1	; 0x02
	}	
	
	
	// Синхронизация с DS1307 в полночь
	if (time[0] == 0 && time[1] == 0 && time[2] == 0)
     4ca:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     4ce:	81 11       	cpse	r24, r1
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <__vector_7+0x80>
     4d2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     4d6:	81 11       	cpse	r24, r1
     4d8:	08 c0       	rjmp	.+16     	; 0x4ea <__vector_7+0x80>
     4da:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     4de:	81 11       	cpse	r24, r1
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <__vector_7+0x80>
	{
		DS1307::readTime(time);
     4e2:	88 e8       	ldi	r24, 0x88	; 136
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6DS13078readTimeEPc>
	}
	
	
	sei();
     4ea:	78 94       	sei
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <_Z5setupv>:

void setup(void)
{
	sei();
     50e:	78 94       	sei
	//////////// Таймер 1 (16 бит) Часы ////////////
	OCR1A   = 14398;	// Запись значения прерывания CTC производится до инициализации таймера
     510:	8e e3       	ldi	r24, 0x3E	; 62
     512:	98 e3       	ldi	r25, 0x38	; 56
     514:	9b bd       	out	0x2b, r25	; 43
     516:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(0 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);	// COM - порты, FOC - ?, WGM - режим CTC, CS - прескелер
     518:	8f b5       	in	r24, 0x2f	; 47
     51a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 <<  ICNC1)|(0 <<  ICES1)|(0 <<  WGM13)|(1 <<  WGM12)|(1 <<  CS12)|(0 <<  CS11)|(1 <<  CS10);				// IC - настройки пина ICP1 (PD6)
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	8d 60       	ori	r24, 0x0D	; 13
     520:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (0 << TICIE1)|(1 << OCIE1A)|(0 << OCIE1B)|(0 << TOIE1);														// OCIE1A - Прерывание по совпадению разрешено
     522:	89 b7       	in	r24, 0x39	; 57
     524:	80 61       	ori	r24, 0x10	; 16
     526:	89 bf       	out	0x39, r24	; 57
	

	//////////// Таймер 0 (8 бит) PWM ////////////
	OCR0  |= 0;			// Скважность - Значение сравнения f = fcpu/(N*256) = 7372800/256 = 28800 || = 14745600/256 = 57600 | 248 -> 97.1% | 249 -> 97.5% | 250 -> 97.9% | 251 -> 98.3% | 252 -> 98.7%  | *по расчету надо 97,5 - 98,6%
     528:	8c b7       	in	r24, 0x3c	; 60
     52a:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (0 << FOC0)|(1  << WGM01)|(1 << WGM00)|(1 << COM01)|(0 << COM00)|(0 << CS02)|(0 << CS01)|(1 << CS00);	// WGM - fast PWM, COM - clear on compare, CS - прескелер, FOC - ?
     52c:	83 b7       	in	r24, 0x33	; 51
     52e:	89 66       	ori	r24, 0x69	; 105
     530:	83 bf       	out	0x33, r24	; 51
		
	DDRB |= 0b00001000;		// Вывод ШИМ - PB3(OC0)
     532:	87 b3       	in	r24, 0x17	; 23
     534:	88 60       	ori	r24, 0x08	; 8
     536:	87 bb       	out	0x17, r24	; 23
	
	ST7789::init();
     538:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN6ST77894initEv>
     53c:	08 95       	ret

0000053e <_Z10printClockv>:
}

void printClock(void)
{
     53e:	cf 92       	push	r12
     540:	ef 92       	push	r14
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	if (time[2] < 10)
     54a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     54e:	8a 30       	cpi	r24, 0x0A	; 10
     550:	90 f4       	brcc	.+36     	; 0x576 <_Z10printClockv+0x38>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     552:	0f 2e       	mov	r0, r31
     554:	f5 e0       	ldi	r31, 0x05	; 5
     556:	cf 2e       	mov	r12, r31
     558:	f0 2d       	mov	r31, r0
     55a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     55e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     562:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     566:	48 ef       	ldi	r20, 0xF8	; 248
     568:	55 e0       	ldi	r21, 0x05	; 5
     56a:	69 ef       	ldi	r22, 0xF9	; 249
     56c:	75 e0       	ldi	r23, 0x05	; 5
     56e:	82 e9       	ldi	r24, 0x92	; 146
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[2], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     576:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     57a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     57e:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     582:	c8 e8       	ldi	r28, 0x88	; 136
     584:	d0 e0       	ldi	r29, 0x00	; 0
     586:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     588:	4a e0       	ldi	r20, 0x0A	; 10
     58a:	6f ee       	ldi	r22, 0xEF	; 239
     58c:	75 e0       	ldi	r23, 0x05	; 5
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     594:	0f 2e       	mov	r0, r31
     596:	f5 e0       	ldi	r31, 0x05	; 5
     598:	cf 2e       	mov	r12, r31
     59a:	f0 2d       	mov	r31, r0
     59c:	21 2f       	mov	r18, r17
     59e:	48 ef       	ldi	r20, 0xF8	; 248
     5a0:	55 e0       	ldi	r21, 0x05	; 5
     5a2:	69 ef       	ldi	r22, 0xF9	; 249
     5a4:	75 e0       	ldi	r23, 0x05	; 5
     5a6:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     5aa:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     5ae:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     5b2:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     5b6:	48 ef       	ldi	r20, 0xF8	; 248
     5b8:	55 e0       	ldi	r21, 0x05	; 5
     5ba:	69 ef       	ldi	r22, 0xF9	; 249
     5bc:	75 e0       	ldi	r23, 0x05	; 5
     5be:	84 e9       	ldi	r24, 0x94	; 148
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	if (time[1] < 10)
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	8a 30       	cpi	r24, 0x0A	; 10
     5ca:	70 f4       	brcc	.+28     	; 0x5e8 <_Z10printClockv+0xaa>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     5cc:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     5d0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     5d4:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     5d8:	48 ef       	ldi	r20, 0xF8	; 248
     5da:	55 e0       	ldi	r21, 0x05	; 5
     5dc:	69 ef       	ldi	r22, 0xF9	; 249
     5de:	75 e0       	ldi	r23, 0x05	; 5
     5e0:	82 e9       	ldi	r24, 0x92	; 146
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[1], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     5e8:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     5ec:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     5f0:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     5f4:	c8 e8       	ldi	r28, 0x88	; 136
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	4a e0       	ldi	r20, 0x0A	; 10
     5fc:	6f ee       	ldi	r22, 0xEF	; 239
     5fe:	75 e0       	ldi	r23, 0x05	; 5
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     606:	0f 2e       	mov	r0, r31
     608:	f5 e0       	ldi	r31, 0x05	; 5
     60a:	cf 2e       	mov	r12, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	21 2f       	mov	r18, r17
     610:	48 ef       	ldi	r20, 0xF8	; 248
     612:	55 e0       	ldi	r21, 0x05	; 5
     614:	69 ef       	ldi	r22, 0xF9	; 249
     616:	75 e0       	ldi	r23, 0x05	; 5
     618:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     61c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     620:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     624:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     628:	48 ef       	ldi	r20, 0xF8	; 248
     62a:	55 e0       	ldi	r21, 0x05	; 5
     62c:	69 ef       	ldi	r22, 0xF9	; 249
     62e:	75 e0       	ldi	r23, 0x05	; 5
     630:	84 e9       	ldi	r24, 0x94	; 148
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	if (time[0] < 10)
     638:	88 81       	ld	r24, Y
     63a:	8a 30       	cpi	r24, 0x0A	; 10
     63c:	70 f4       	brcc	.+28     	; 0x65a <_Z10printClockv+0x11c>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     63e:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     642:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     646:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     64a:	48 ef       	ldi	r20, 0xF8	; 248
     64c:	55 e0       	ldi	r21, 0x05	; 5
     64e:	69 ef       	ldi	r22, 0xF9	; 249
     650:	75 e0       	ldi	r23, 0x05	; 5
     652:	82 e9       	ldi	r24, 0x92	; 146
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[0], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     65a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     65e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     662:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     666:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     66a:	4a e0       	ldi	r20, 0x0A	; 10
     66c:	6f ee       	ldi	r22, 0xEF	; 239
     66e:	75 e0       	ldi	r23, 0x05	; 5
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     676:	0f 2e       	mov	r0, r31
     678:	f5 e0       	ldi	r31, 0x05	; 5
     67a:	cf 2e       	mov	r12, r31
     67c:	f0 2d       	mov	r31, r0
     67e:	2c 2f       	mov	r18, r28
     680:	48 ef       	ldi	r20, 0xF8	; 248
     682:	55 e0       	ldi	r21, 0x05	; 5
     684:	69 ef       	ldi	r22, 0xF9	; 249
     686:	75 e0       	ldi	r23, 0x05	; 5
     688:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ef 90       	pop	r14
     696:	cf 90       	pop	r12
     698:	08 95       	ret

0000069a <_Z13printSchedulev>:

void printSchedule(void)
{
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
	for(char i = 0; i < 4; i++)
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	14 30       	cpi	r17, 0x04	; 4
     6b0:	08 f0       	brcs	.+2      	; 0x6b4 <_Z13printSchedulev+0x1a>
     6b2:	a5 c0       	rjmp	.+330    	; 0x7fe <_Z13printSchedulev+0x164>
	{
		// Первое число
		if (timeschedule[i][0] < 10)
     6b4:	c1 2f       	mov	r28, r17
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	fe 01       	movw	r30, r28
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e0 58       	subi	r30, 0x80	; 128
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	80 81       	ld	r24, Z
     6c4:	8a 30       	cpi	r24, 0x0A	; 10
     6c6:	90 f4       	brcc	.+36     	; 0x6ec <_Z13printSchedulev+0x52>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     6c8:	0f 2e       	mov	r0, r31
     6ca:	f3 e0       	ldi	r31, 0x03	; 3
     6cc:	cf 2e       	mov	r12, r31
     6ce:	f0 2d       	mov	r31, r0
     6d0:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     6d4:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     6d8:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     6dc:	48 ef       	ldi	r20, 0xF8	; 248
     6de:	55 e0       	ldi	r21, 0x05	; 5
     6e0:	69 ef       	ldi	r22, 0xF9	; 249
     6e2:	75 e0       	ldi	r23, 0x05	; 5
     6e4:	82 e9       	ldi	r24, 0x92	; 146
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][0], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     6ec:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     6f0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     6f4:	f0 90 91 00 	lds	r15, 0x0091	; 0x800091 <red>
     6f8:	ce 01       	movw	r24, r28
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	9c 01       	movw	r18, r24
     700:	20 58       	subi	r18, 0x80	; 128
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	59 01       	movw	r10, r18
     706:	f9 01       	movw	r30, r18
     708:	80 81       	ld	r24, Z
     70a:	4a e0       	ldi	r20, 0x0A	; 10
     70c:	6f ee       	ldi	r22, 0xEF	; 239
     70e:	75 e0       	ldi	r23, 0x05	; 5
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     716:	0f 2e       	mov	r0, r31
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	cf 2e       	mov	r12, r31
     71c:	f0 2d       	mov	r31, r0
     71e:	2f 2d       	mov	r18, r15
     720:	48 ef       	ldi	r20, 0xF8	; 248
     722:	55 e0       	ldi	r21, 0x05	; 5
     724:	69 ef       	ldi	r22, 0xF9	; 249
     726:	75 e0       	ldi	r23, 0x05	; 5
     728:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(":", &xpos, &ypos, red, green, blue, 3);
     72c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     730:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     734:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     738:	48 ef       	ldi	r20, 0xF8	; 248
     73a:	55 e0       	ldi	r21, 0x05	; 5
     73c:	69 ef       	ldi	r22, 0xF9	; 249
     73e:	75 e0       	ldi	r23, 0x05	; 5
     740:	84 e9       	ldi	r24, 0x94	; 148
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		
		// Второе число
		if (timeschedule[i][1] < 10)
     748:	f5 01       	movw	r30, r10
     74a:	81 81       	ldd	r24, Z+1	; 0x01
     74c:	8a 30       	cpi	r24, 0x0A	; 10
     74e:	70 f4       	brcc	.+28     	; 0x76c <_Z13printSchedulev+0xd2>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     750:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     754:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     758:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     75c:	48 ef       	ldi	r20, 0xF8	; 248
     75e:	55 e0       	ldi	r21, 0x05	; 5
     760:	69 ef       	ldi	r22, 0xF9	; 249
     762:	75 e0       	ldi	r23, 0x05	; 5
     764:	82 e9       	ldi	r24, 0x92	; 146
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][1], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     76c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     770:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     774:	b0 90 91 00 	lds	r11, 0x0091	; 0x800091 <red>
     778:	fe 01       	movw	r30, r28
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e0 58       	subi	r30, 0x80	; 128
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	4a e0       	ldi	r20, 0x0A	; 10
     786:	6f ee       	ldi	r22, 0xEF	; 239
     788:	75 e0       	ldi	r23, 0x05	; 5
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     790:	0f 2e       	mov	r0, r31
     792:	f3 e0       	ldi	r31, 0x03	; 3
     794:	cf 2e       	mov	r12, r31
     796:	f0 2d       	mov	r31, r0
     798:	2b 2d       	mov	r18, r11
     79a:	48 ef       	ldi	r20, 0xF8	; 248
     79c:	55 e0       	ldi	r21, 0x05	; 5
     79e:	69 ef       	ldi	r22, 0xF9	; 249
     7a0:	75 e0       	ldi	r23, 0x05	; 5
     7a2:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(" ", &xpos, &ypos, red, green, blue, 3);
     7a6:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     7aa:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     7ae:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     7b2:	48 ef       	ldi	r20, 0xF8	; 248
     7b4:	55 e0       	ldi	r21, 0x05	; 5
     7b6:	69 ef       	ldi	r22, 0xF9	; 249
     7b8:	75 e0       	ldi	r23, 0x05	; 5
     7ba:	88 e9       	ldi	r24, 0x98	; 152
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		// Слово
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
     7c2:	ce 01       	movw	r24, r28
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     7d4:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     7d8:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     7dc:	48 ef       	ldi	r20, 0xF8	; 248
     7de:	55 e0       	ldi	r21, 0x05	; 5
     7e0:	69 ef       	ldi	r22, 0xF9	; 249
     7e2:	75 e0       	ldi	r23, 0x05	; 5
     7e4:	80 5a       	subi	r24, 0xA0	; 160
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			
		xpos = 0;
     7ec:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <xpos>
		ypos += 26;
     7f0:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <ypos>
     7f4:	86 5e       	subi	r24, 0xE6	; 230
     7f6:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ypos>
	
}

void printSchedule(void)
{
	for(char i = 0; i < 4; i++)
     7fa:	1f 5f       	subi	r17, 0xFF	; 255
     7fc:	58 cf       	rjmp	.-336    	; 0x6ae <_Z13printSchedulev+0x14>
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
			
		xpos = 0;
		ypos += 26;
	}
	ypos -= 26;
     7fe:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <ypos>
     802:	8a 51       	subi	r24, 0x1A	; 26
     804:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ypos>
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	cf 90       	pop	r12
     816:	bf 90       	pop	r11
     818:	af 90       	pop	r10
     81a:	08 95       	ret

0000081c <_Z4ftoafPci>:
	return i;
}

// Converts a floating-point/double number to a string.
char* ftoa(float n, char* res, int afterpoint)
{
     81c:	8f 92       	push	r8
     81e:	9f 92       	push	r9
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
     838:	7a 01       	movw	r14, r20
     83a:	69 01       	movw	r12, r18
	// Extract integer part
	int ipart = (int)n;
     83c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     840:	8b 01       	movw	r16, r22
	
	// Extract floating part
	float fpart = n - (float)ipart;
     842:	07 2e       	mov	r0, r23
     844:	00 0c       	add	r0, r0
     846:	88 0b       	sbc	r24, r24
     848:	99 0b       	sbc	r25, r25
     84a:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	c5 01       	movw	r24, r10
     854:	b4 01       	movw	r22, r8
     856:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     85a:	4b 01       	movw	r8, r22
     85c:	5c 01       	movw	r10, r24
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
     862:	01 15       	cp	r16, r1
     864:	11 05       	cpc	r17, r1
     866:	71 f0       	breq	.+28     	; 0x884 <__stack+0x25>
		str[i++] = (x % 10) + '0';
     868:	f7 01       	movw	r30, r14
     86a:	ec 0f       	add	r30, r28
     86c:	fd 1f       	adc	r31, r29
     86e:	c8 01       	movw	r24, r16
     870:	6a e0       	ldi	r22, 0x0A	; 10
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
     878:	80 5d       	subi	r24, 0xD0	; 208
     87a:	80 83       	st	Z, r24
		x = x / 10;
     87c:	06 2f       	mov	r16, r22
     87e:	17 2f       	mov	r17, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     880:	21 96       	adiw	r28, 0x01	; 1
     882:	ef cf       	rjmp	.-34     	; 0x862 <__stack+0x3>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     884:	dd 23       	and	r29, r29
     886:	3c f4       	brge	.+14     	; 0x896 <__stack+0x37>
	str[i++] = '0';
     888:	f7 01       	movw	r30, r14
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	80 e3       	ldi	r24, 0x30	; 48
     890:	80 83       	st	Z, r24
     892:	21 96       	adiw	r28, 0x01	; 1
     894:	f7 cf       	rjmp	.-18     	; 0x884 <__stack+0x25>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     896:	9e 01       	movw	r18, r28
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	31 09       	sbc	r19, r1
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     8a0:	82 17       	cp	r24, r18
     8a2:	93 07       	cpc	r25, r19
     8a4:	74 f4       	brge	.+28     	; 0x8c2 <__stack+0x63>
		temp = str[i];
     8a6:	d7 01       	movw	r26, r14
     8a8:	a8 0f       	add	r26, r24
     8aa:	b9 1f       	adc	r27, r25
     8ac:	4c 91       	ld	r20, X
		str[i] = str[j];
     8ae:	f7 01       	movw	r30, r14
     8b0:	e2 0f       	add	r30, r18
     8b2:	f3 1f       	adc	r31, r19
     8b4:	50 81       	ld	r21, Z
     8b6:	5c 93       	st	X, r21
		str[j] = temp;
     8b8:	40 83       	st	Z, r20
		i++;
     8ba:	01 96       	adiw	r24, 0x01	; 1
		j--;
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	31 09       	sbc	r19, r1
     8c0:	ef cf       	rjmp	.-34     	; 0x8a0 <__stack+0x41>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     8c2:	f7 01       	movw	r30, r14
     8c4:	ec 0f       	add	r30, r28
     8c6:	fd 1f       	adc	r31, r29
     8c8:	10 82       	st	Z, r1
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
	
	// check for display option after point
	if (afterpoint != 0) {
     8ca:	c1 14       	cp	r12, r1
     8cc:	d1 04       	cpc	r13, r1
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	56 c0       	rjmp	.+172    	; 0x97e <__stack+0x11f>
		res[i] = '.'; // add dot
     8d2:	f7 01       	movw	r30, r14
     8d4:	ec 0f       	add	r30, r28
     8d6:	fd 1f       	adc	r31, r29
     8d8:	8e e2       	ldi	r24, 0x2E	; 46
     8da:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     8dc:	b6 01       	movw	r22, r12
     8de:	0d 2c       	mov	r0, r13
     8e0:	00 0c       	add	r0, r0
     8e2:	88 0b       	sbc	r24, r24
     8e4:	99 0b       	sbc	r25, r25
     8e6:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
     8ea:	9b 01       	movw	r18, r22
     8ec:	ac 01       	movw	r20, r24
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	80 e2       	ldi	r24, 0x20	; 32
     8f4:	91 e4       	ldi	r25, 0x41	; 65
     8f6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <pow>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	c5 01       	movw	r24, r10
     900:	b4 01       	movw	r22, r8
     902:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     906:	21 96       	adiw	r28, 0x01	; 1
     908:	ce 0d       	add	r28, r14
     90a:	df 1d       	adc	r29, r15
     90c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     910:	cb 01       	movw	r24, r22
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
	while (x) {
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	71 f0       	breq	.+28     	; 0x936 <__stack+0xd7>
		str[i++] = (x % 10) + '0';
     91a:	fe 01       	movw	r30, r28
     91c:	e2 0f       	add	r30, r18
     91e:	f3 1f       	adc	r31, r19
     920:	6a e0       	ldi	r22, 0x0A	; 10
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__divmodhi4>
     928:	80 5d       	subi	r24, 0xD0	; 208
     92a:	80 83       	st	Z, r24
		x = x / 10;
     92c:	86 2f       	mov	r24, r22
     92e:	97 2f       	mov	r25, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	f0 cf       	rjmp	.-32     	; 0x916 <__stack+0xb7>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     936:	2c 15       	cp	r18, r12
     938:	3d 05       	cpc	r19, r13
     93a:	44 f4       	brge	.+16     	; 0x94c <__stack+0xed>
	str[i++] = '0';
     93c:	fe 01       	movw	r30, r28
     93e:	e2 0f       	add	r30, r18
     940:	f3 1f       	adc	r31, r19
     942:	80 e3       	ldi	r24, 0x30	; 48
     944:	80 83       	st	Z, r24
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	3f 4f       	sbci	r19, 0xFF	; 255
     94a:	f5 cf       	rjmp	.-22     	; 0x936 <__stack+0xd7>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     94c:	a9 01       	movw	r20, r18
     94e:	41 50       	subi	r20, 0x01	; 1
     950:	51 09       	sbc	r21, r1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     956:	84 17       	cp	r24, r20
     958:	95 07       	cpc	r25, r21
     95a:	74 f4       	brge	.+28     	; 0x978 <__stack+0x119>
		temp = str[i];
     95c:	de 01       	movw	r26, r28
     95e:	a8 0f       	add	r26, r24
     960:	b9 1f       	adc	r27, r25
     962:	6c 91       	ld	r22, X
		str[i] = str[j];
     964:	fe 01       	movw	r30, r28
     966:	e4 0f       	add	r30, r20
     968:	f5 1f       	adc	r31, r21
     96a:	70 81       	ld	r23, Z
     96c:	7c 93       	st	X, r23
		str[j] = temp;
     96e:	60 83       	st	Z, r22
		i++;
     970:	01 96       	adiw	r24, 0x01	; 1
		j--;
     972:	41 50       	subi	r20, 0x01	; 1
     974:	51 09       	sbc	r21, r1
     976:	ef cf       	rjmp	.-34     	; 0x956 <__stack+0xf7>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     978:	c2 0f       	add	r28, r18
     97a:	d3 1f       	adc	r29, r19
     97c:	18 82       	st	Y, r1
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     97e:	c7 01       	movw	r24, r14
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	08 95       	ret

0000099a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99a:	2f ef       	ldi	r18, 0xFF	; 255
     99c:	8f e7       	ldi	r24, 0x7F	; 127
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	80 40       	sbci	r24, 0x00	; 0
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <main+0x6>
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <main+0x10>
     9aa:	00 00       	nop
char* ftoa(float n, char* res, int afterpoint);

int main(void)
{
	_delay_ms(100);
	setup();
     9ac:	0e 94 87 02 	call	0x50e	; 0x50e <_Z5setupv>
	ST7789::fillScreen(0, 0, 0);
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6ST778910fillScreenEccc>
     9ba:	ef ef       	ldi	r30, 0xFF	; 255
     9bc:	ff e3       	ldi	r31, 0x3F	; 63
     9be:	22 e0       	ldi	r18, 0x02	; 2
     9c0:	e1 50       	subi	r30, 0x01	; 1
     9c2:	f0 40       	sbci	r31, 0x00	; 0
     9c4:	20 40       	sbci	r18, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0x26>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0x30>
     9ca:	00 00       	nop
	
	//DS1307::writeTime(time);
	_delay_ms(50);
	
	DS1307::readTime(time);
     9cc:	88 e8       	ldi	r24, 0x88	; 136
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6DS13078readTimeEPc>
		
	while (1) 
    {
		while (time[0] == timecomp){}
     9d4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     9d8:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <timecomp>
     9dc:	89 17       	cp	r24, r25
     9de:	d1 f3       	breq	.-12     	; 0x9d4 <main+0x3a>
		timecomp = time[0];	
     9e0:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <timecomp>
		
		xpos = 0;
     9e4:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <xpos>
		ypos = 0;
     9e8:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <ypos>
		printClock();
     9ec:	0e 94 9f 02 	call	0x53e	; 0x53e <_Z10printClockv>
		
		
		
		xpos = 0;
     9f0:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <xpos>
		ypos = 40;
     9f4:	88 e2       	ldi	r24, 0x28	; 40
     9f6:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ypos>
		
		// Расчеты времён		
		timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
     9fa:	c8 e8       	ldi	r28, 0x88	; 136
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
     9fe:	1a 81       	ldd	r17, Y+2	; 0x02
     a00:	69 81       	ldd	r22, Y+1	; 0x01
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e7       	ldi	r20, 0x70	; 112
     a12:	52 e4       	ldi	r21, 0x42	; 66
     a14:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     a18:	4b 01       	movw	r8, r22
     a1a:	5c 01       	movw	r10, r24
     a1c:	61 2f       	mov	r22, r17
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     a28:	a5 01       	movw	r20, r10
     a2a:	94 01       	movw	r18, r8
     a2c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     a30:	4b 01       	movw	r8, r22
     a32:	5c 01       	movw	r10, r24
     a34:	68 81       	ld	r22, Y
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	41 e6       	ldi	r20, 0x61	; 97
     a46:	55 e4       	ldi	r21, 0x45	; 69
     a48:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	c5 01       	movw	r24, r10
     a52:	b4 01       	movw	r22, r8
     a54:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     a58:	4b 01       	movw	r8, r22
     a5a:	5c 01       	movw	r10, r24
     a5c:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <timeDec>
     a60:	70 93 ec 05 	sts	0x05EC, r23	; 0x8005ec <timeDec+0x1>
     a64:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <timeDec+0x2>
     a68:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <timeDec+0x3>
		
		for(char i = 0; i < 4; i++)
     a6c:	f1 2c       	mov	r15, r1
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	8f 15       	cp	r24, r15
     a72:	78 f1       	brcs	.+94     	; 0xad2 <main+0x138>
		{
			timescheduleDec[i] = (float)timeschedule[i][0] + (float)timeschedule[i][1] / 60.0;
     a74:	cf 2d       	mov	r28, r15
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	8e 01       	movw	r16, r28
     a7a:	00 0f       	add	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	00 58       	subi	r16, 0x80	; 128
     a80:	1f 4f       	sbci	r17, 0xFF	; 255
     a82:	f8 01       	movw	r30, r16
     a84:	60 81       	ld	r22, Z
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     a90:	2b 01       	movw	r4, r22
     a92:	3c 01       	movw	r6, r24
     a94:	f8 01       	movw	r30, r16
     a96:	61 81       	ldd	r22, Z+1	; 0x01
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e7       	ldi	r20, 0x70	; 112
     aa8:	52 e4       	ldi	r21, 0x42	; 66
     aaa:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	c3 01       	movw	r24, r6
     ab4:	b2 01       	movw	r22, r4
     ab6:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
     aba:	cc 0f       	add	r28, r28
     abc:	dd 1f       	adc	r29, r29
     abe:	cc 0f       	add	r28, r28
     ac0:	dd 1f       	adc	r29, r29
     ac2:	c6 52       	subi	r28, 0x26	; 38
     ac4:	da 4f       	sbci	r29, 0xFA	; 250
     ac6:	68 83       	st	Y, r22
     ac8:	79 83       	std	Y+1, r23	; 0x01
     aca:	8a 83       	std	Y+2, r24	; 0x02
     acc:	9b 83       	std	Y+3, r25	; 0x03
		ypos = 40;
		
		// Расчеты времён		
		timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
		
		for(char i = 0; i < 4; i++)
     ace:	f3 94       	inc	r15
     ad0:	ce cf       	rjmp	.-100    	; 0xa6e <main+0xd4>
		}
		


		// Определение слова и скважности
		if (timeDec < timescheduleDec[0])													// Время меньше чем время рассвета = ночь - 3
     ad2:	20 91 da 05 	lds	r18, 0x05DA	; 0x8005da <__data_end>
     ad6:	30 91 db 05 	lds	r19, 0x05DB	; 0x8005db <__data_end+0x1>
     ada:	40 91 dc 05 	lds	r20, 0x05DC	; 0x8005dc <__data_end+0x2>
     ade:	50 91 dd 05 	lds	r21, 0x05DD	; 0x8005dd <__data_end+0x3>
     ae2:	c5 01       	movw	r24, r10
     ae4:	b4 01       	movw	r22, r8
     ae6:	0e 94 16 0a 	call	0x142c	; 0x142c <__cmpsf2>
     aea:	88 23       	and	r24, r24
     aec:	a4 f4       	brge	.+40     	; 0xb16 <main+0x17c>
		{
			ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
     aee:	0f 2e       	mov	r0, r31
     af0:	f5 e0       	ldi	r31, 0x05	; 5
     af2:	cf 2e       	mov	r12, r31
     af4:	f0 2d       	mov	r31, r0
     af6:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     afa:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     afe:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     b02:	48 ef       	ldi	r20, 0xF8	; 248
     b04:	55 e0       	ldi	r21, 0x05	; 5
     b06:	69 ef       	ldi	r22, 0xF9	; 249
     b08:	75 e0       	ldi	r23, 0x05	; 5
     b0a:	88 e7       	ldi	r24, 0x78	; 120
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 0;
     b12:	1c be       	out	0x3c, r1	; 60
     b14:	d7 c0       	rjmp	.+430    	; 0xcc4 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[1])												// Время меньше чем время начала дня = рассвет - 0
     b16:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <__data_end+0x4>
     b1a:	30 91 df 05 	lds	r19, 0x05DF	; 0x8005df <__data_end+0x5>
     b1e:	40 91 e0 05 	lds	r20, 0x05E0	; 0x8005e0 <__data_end+0x6>
     b22:	50 91 e1 05 	lds	r21, 0x05E1	; 0x8005e1 <__data_end+0x7>
     b26:	c5 01       	movw	r24, r10
     b28:	b4 01       	movw	r22, r8
     b2a:	0e 94 16 0a 	call	0x142c	; 0x142c <__cmpsf2>
     b2e:	88 23       	and	r24, r24
     b30:	f4 f5       	brge	.+124    	; 0xbae <main+0x214>
		{
			ST7789::printString(wordschedule[0], &xpos, &ypos, red, green, blue, 5);
     b32:	0f 2e       	mov	r0, r31
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	cf 2e       	mov	r12, r31
     b38:	f0 2d       	mov	r31, r0
     b3a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     b3e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     b42:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     b46:	48 ef       	ldi	r20, 0xF8	; 248
     b48:	55 e0       	ldi	r21, 0x05	; 5
     b4a:	69 ef       	ldi	r22, 0xF9	; 249
     b4c:	75 e0       	ldi	r23, 0x05	; 5
     b4e:	80 e6       	ldi	r24, 0x60	; 96
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = (char)(((timeDec - timescheduleDec[0])/(timescheduleDec[1] - timescheduleDec[0])) * 255.0);
     b56:	ca ed       	ldi	r28, 0xDA	; 218
     b58:	d5 e0       	ldi	r29, 0x05	; 5
     b5a:	88 80       	ld	r8, Y
     b5c:	99 80       	ldd	r9, Y+1	; 0x01
     b5e:	aa 80       	ldd	r10, Y+2	; 0x02
     b60:	bb 80       	ldd	r11, Y+3	; 0x03
     b62:	a5 01       	movw	r20, r10
     b64:	94 01       	movw	r18, r8
     b66:	60 91 eb 05 	lds	r22, 0x05EB	; 0x8005eb <timeDec>
     b6a:	70 91 ec 05 	lds	r23, 0x05EC	; 0x8005ec <timeDec+0x1>
     b6e:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <timeDec+0x2>
     b72:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <timeDec+0x3>
     b76:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     b7a:	2b 01       	movw	r4, r22
     b7c:	3c 01       	movw	r6, r24
     b7e:	6c 81       	ldd	r22, Y+4	; 0x04
     b80:	7d 81       	ldd	r23, Y+5	; 0x05
     b82:	8e 81       	ldd	r24, Y+6	; 0x06
     b84:	9f 81       	ldd	r25, Y+7	; 0x07
     b86:	a5 01       	movw	r20, r10
     b88:	94 01       	movw	r18, r8
     b8a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c3 01       	movw	r24, r6
     b94:	b2 01       	movw	r22, r4
     b96:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4f e7       	ldi	r20, 0x7F	; 127
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     ba6:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fixunssfsi>
     baa:	6c bf       	out	0x3c, r22	; 60
     bac:	8b c0       	rjmp	.+278    	; 0xcc4 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[2])												// Время меньше чем время конца дня = день - 1
     bae:	20 91 e2 05 	lds	r18, 0x05E2	; 0x8005e2 <__data_end+0x8>
     bb2:	30 91 e3 05 	lds	r19, 0x05E3	; 0x8005e3 <__data_end+0x9>
     bb6:	40 91 e4 05 	lds	r20, 0x05E4	; 0x8005e4 <__data_end+0xa>
     bba:	50 91 e5 05 	lds	r21, 0x05E5	; 0x8005e5 <__data_end+0xb>
     bbe:	c5 01       	movw	r24, r10
     bc0:	b4 01       	movw	r22, r8
     bc2:	0e 94 16 0a 	call	0x142c	; 0x142c <__cmpsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	ac f4       	brge	.+42     	; 0xbf4 <main+0x25a>
		{
			ST7789::printString(wordschedule[1], &xpos, &ypos, red, green, blue, 5);
     bca:	0f 2e       	mov	r0, r31
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	cf 2e       	mov	r12, r31
     bd0:	f0 2d       	mov	r31, r0
     bd2:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     bd6:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     bda:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     bde:	48 ef       	ldi	r20, 0xF8	; 248
     be0:	55 e0       	ldi	r21, 0x05	; 5
     be2:	69 ef       	ldi	r22, 0xF9	; 249
     be4:	75 e0       	ldi	r23, 0x05	; 5
     be6:	88 e6       	ldi	r24, 0x68	; 104
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 255;
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	8c bf       	out	0x3c, r24	; 60
     bf2:	68 c0       	rjmp	.+208    	; 0xcc4 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[3])												// Время меньше чем время конца заката = закат - 2
     bf4:	20 91 e6 05 	lds	r18, 0x05E6	; 0x8005e6 <__data_end+0xc>
     bf8:	30 91 e7 05 	lds	r19, 0x05E7	; 0x8005e7 <__data_end+0xd>
     bfc:	40 91 e8 05 	lds	r20, 0x05E8	; 0x8005e8 <__data_end+0xe>
     c00:	50 91 e9 05 	lds	r21, 0x05E9	; 0x8005e9 <__data_end+0xf>
     c04:	c5 01       	movw	r24, r10
     c06:	b4 01       	movw	r22, r8
     c08:	0e 94 16 0a 	call	0x142c	; 0x142c <__cmpsf2>
     c0c:	88 23       	and	r24, r24
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <main+0x278>
     c10:	46 c0       	rjmp	.+140    	; 0xc9e <main+0x304>
		{
			ST7789::printString(wordschedule[2], &xpos, &ypos, red, green, blue, 5);
     c12:	0f 2e       	mov	r0, r31
     c14:	f5 e0       	ldi	r31, 0x05	; 5
     c16:	cf 2e       	mov	r12, r31
     c18:	f0 2d       	mov	r31, r0
     c1a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     c1e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     c22:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     c26:	48 ef       	ldi	r20, 0xF8	; 248
     c28:	55 e0       	ldi	r21, 0x05	; 5
     c2a:	69 ef       	ldi	r22, 0xF9	; 249
     c2c:	75 e0       	ldi	r23, 0x05	; 5
     c2e:	80 e7       	ldi	r24, 0x70	; 112
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = (char)((1.0 - ((timeDec - timescheduleDec[2])/(timescheduleDec[3] - timescheduleDec[2]))) * 255.0);
     c36:	ca ed       	ldi	r28, 0xDA	; 218
     c38:	d5 e0       	ldi	r29, 0x05	; 5
     c3a:	88 84       	ldd	r8, Y+8	; 0x08
     c3c:	99 84       	ldd	r9, Y+9	; 0x09
     c3e:	aa 84       	ldd	r10, Y+10	; 0x0a
     c40:	bb 84       	ldd	r11, Y+11	; 0x0b
     c42:	a5 01       	movw	r20, r10
     c44:	94 01       	movw	r18, r8
     c46:	60 91 eb 05 	lds	r22, 0x05EB	; 0x8005eb <timeDec>
     c4a:	70 91 ec 05 	lds	r23, 0x05EC	; 0x8005ec <timeDec+0x1>
     c4e:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <timeDec+0x2>
     c52:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <timeDec+0x3>
     c56:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     c5a:	2b 01       	movw	r4, r22
     c5c:	3c 01       	movw	r6, r24
     c5e:	6c 85       	ldd	r22, Y+12	; 0x0c
     c60:	7d 85       	ldd	r23, Y+13	; 0x0d
     c62:	8e 85       	ldd	r24, Y+14	; 0x0e
     c64:	9f 85       	ldd	r25, Y+15	; 0x0f
     c66:	a5 01       	movw	r20, r10
     c68:	94 01       	movw	r18, r8
     c6a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c3 01       	movw	r24, r6
     c74:	b2 01       	movw	r22, r4
     c76:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     c7a:	9b 01       	movw	r18, r22
     c7c:	ac 01       	movw	r20, r24
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	9f e3       	ldi	r25, 0x3F	; 63
     c86:	0e 94 a9 09 	call	0x1352	; 0x1352 <__subsf3>
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	53 e4       	ldi	r21, 0x43	; 67
     c92:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     c96:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fixunssfsi>
     c9a:	6c bf       	out	0x3c, r22	; 60
     c9c:	13 c0       	rjmp	.+38     	; 0xcc4 <main+0x32a>
		}
		else																				// В остальных случаях ночь - 3
		{
			ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
     c9e:	0f 2e       	mov	r0, r31
     ca0:	f5 e0       	ldi	r31, 0x05	; 5
     ca2:	cf 2e       	mov	r12, r31
     ca4:	f0 2d       	mov	r31, r0
     ca6:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     caa:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     cae:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     cb2:	48 ef       	ldi	r20, 0xF8	; 248
     cb4:	55 e0       	ldi	r21, 0x05	; 5
     cb6:	69 ef       	ldi	r22, 0xF9	; 249
     cb8:	75 e0       	ldi	r23, 0x05	; 5
     cba:	88 e7       	ldi	r24, 0x78	; 120
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 0;
     cc2:	1c be       	out	0x3c, r1	; 60
		
		
		
		
		
		xpos = 0;
     cc4:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <xpos>
		ypos = 85;
     cc8:	85 e5       	ldi	r24, 0x55	; 85
     cca:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ypos>
		
		ST7789::printString(itoa(OCR0, buffer, 10), &xpos, &ypos, red, green, blue, 3);
     cce:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     cd2:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     cd6:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     cda:	8c b7       	in	r24, 0x3c	; 60
     cdc:	4a e0       	ldi	r20, 0x0A	; 10
     cde:	6f ee       	ldi	r22, 0xEF	; 239
     ce0:	75 e0       	ldi	r23, 0x05	; 5
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__itoa_ncheck>
     ce8:	0f 2e       	mov	r0, r31
     cea:	f3 e0       	ldi	r31, 0x03	; 3
     cec:	cf 2e       	mov	r12, r31
     cee:	f0 2d       	mov	r31, r0
     cf0:	2c 2f       	mov	r18, r28
     cf2:	48 ef       	ldi	r20, 0xF8	; 248
     cf4:	55 e0       	ldi	r21, 0x05	; 5
     cf6:	69 ef       	ldi	r22, 0xF9	; 249
     cf8:	75 e0       	ldi	r23, 0x05	; 5
     cfa:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(" ", &xpos, &ypos, red, green, blue, 3);
     cfe:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     d02:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     d06:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     d0a:	48 ef       	ldi	r20, 0xF8	; 248
     d0c:	55 e0       	ldi	r21, 0x05	; 5
     d0e:	69 ef       	ldi	r22, 0xF9	; 249
     d10:	75 e0       	ldi	r23, 0x05	; 5
     d12:	88 e9       	ldi	r24, 0x98	; 152
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		if ((float)OCR0/2.55 < 10)
     d1a:	6c b7       	in	r22, 0x3c	; 60
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     d26:	23 e3       	ldi	r18, 0x33	; 51
     d28:	33 e3       	ldi	r19, 0x33	; 51
     d2a:	43 e2       	ldi	r20, 0x23	; 35
     d2c:	50 e4       	ldi	r21, 0x40	; 64
     d2e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 16 0a 	call	0x142c	; 0x142c <__cmpsf2>
     d3e:	88 23       	and	r24, r24
     d40:	74 f4       	brge	.+28     	; 0xd5e <main+0x3c4>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     d42:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     d46:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     d4a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     d4e:	48 ef       	ldi	r20, 0xF8	; 248
     d50:	55 e0       	ldi	r21, 0x05	; 5
     d52:	69 ef       	ldi	r22, 0xF9	; 249
     d54:	75 e0       	ldi	r23, 0x05	; 5
     d56:	82 e9       	ldi	r24, 0x92	; 146
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		
		ST7789::printString(ftoa(((float)OCR0/2.55), buffer, 2), &xpos, &ypos, red, green, blue, 3);
     d5e:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     d62:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     d66:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     d6a:	6c b7       	in	r22, 0x3c	; 60
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     d76:	23 e3       	ldi	r18, 0x33	; 51
     d78:	33 e3       	ldi	r19, 0x33	; 51
     d7a:	43 e2       	ldi	r20, 0x23	; 35
     d7c:	50 e4       	ldi	r21, 0x40	; 64
     d7e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3>
     d82:	22 e0       	ldi	r18, 0x02	; 2
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4f ee       	ldi	r20, 0xEF	; 239
     d88:	55 e0       	ldi	r21, 0x05	; 5
     d8a:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z4ftoafPci>
     d8e:	0f 2e       	mov	r0, r31
     d90:	f3 e0       	ldi	r31, 0x03	; 3
     d92:	cf 2e       	mov	r12, r31
     d94:	f0 2d       	mov	r31, r0
     d96:	2c 2f       	mov	r18, r28
     d98:	48 ef       	ldi	r20, 0xF8	; 248
     d9a:	55 e0       	ldi	r21, 0x05	; 5
     d9c:	69 ef       	ldi	r22, 0xF9	; 249
     d9e:	75 e0       	ldi	r23, 0x05	; 5
     da0:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString("%  ", &xpos, &ypos, red, green, blue, 3);
     da4:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     da8:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     dac:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     db0:	48 ef       	ldi	r20, 0xF8	; 248
     db2:	55 e0       	ldi	r21, 0x05	; 5
     db4:	69 ef       	ldi	r22, 0xF9	; 249
     db6:	75 e0       	ldi	r23, 0x05	; 5
     db8:	86 e9       	ldi	r24, 0x96	; 150
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		xpos = 0;
     dc0:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <xpos>
		ypos = 130;
     dc4:	82 e8       	ldi	r24, 0x82	; 130
     dc6:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <ypos>
		printSchedule();
     dca:	0e 94 4d 03 	call	0x69a	; 0x69a <_Z13printSchedulev>
	//DS1307::writeTime(time);
	_delay_ms(50);
	
	DS1307::readTime(time);
		
	while (1) 
     dce:	02 ce       	rjmp	.-1020   	; 0x9d4 <main+0x3a>

00000dd0 <_GLOBAL__sub_I_xpos>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     dd0:	6f ef       	ldi	r22, 0xFF	; 255
     dd2:	7f ef       	ldi	r23, 0xFF	; 255
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z41__static_initialization_and_destruction_0ii>
     ddc:	08 95       	ret

00000dde <_ZN6ST77894initEv>:
	//==============================================================================

	void init(void)
	{
		// Настройка пинов SPI
		DDR_SPI  |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(0 << MISO);		// Обязательная настройка! Для всех 4-х пинов SPI!
     dde:	87 b3       	in	r24, 0x17	; 23
     de0:	80 6b       	ori	r24, 0xB0	; 176
     de2:	87 bb       	out	0x17, r24	; 23
		PORT_SPI |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(1 << MISO);		//
     de4:	88 b3       	in	r24, 0x18	; 24
     de6:	80 6f       	ori	r24, 0xF0	; 240
     de8:	88 bb       	out	0x18, r24	; 24
			
		// Настройка реистра SPI
		// Разрешение SPI - (SPE), старший бит вперед - (DORD), мастер - (MSTR), режим ? ((1 << CPHA)|(0 << SPR1)), делитель частоты - 64 (SPR1, SPR0) (~230кГц)
		SPCR = (1 << SPE)|(0 << DORD)|(1 << MSTR)|(1 << CPOL)|(1 << CPHA)|(0 << SPR1)|(0 << SPR0);	// (1 << CPHA)|(1 << SPR1) - обязательно для ST7789!!!
     dea:	8c e5       	ldi	r24, 0x5C	; 92
     dec:	8d b9       	out	0x0d, r24	; 13
		SPSR = (1 << SPI2X);
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	9e b9       	out	0x0e, r25	; 14
			
		// Настройка пина RES ST7789
		DDR_RES  |= (1 << RES);											// Выходы (1)
     df2:	84 b3       	in	r24, 0x14	; 20
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	84 bb       	out	0x14, r24	; 20
		PORT_RES |= (1 << RES);											// Изначально высокий уровень RES
     df8:	85 b3       	in	r24, 0x15	; 21
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	85 bb       	out	0x15, r24	; 21
			
		// Настройка пина защёлки ST7789
		DDR_DC  |= (1 << DC);											// Выходы (1)
     dfe:	84 b3       	in	r24, 0x14	; 20
     e00:	84 60       	ori	r24, 0x04	; 4
     e02:	84 bb       	out	0x14, r24	; 20
		PORT_DC |= (1 << DC);											// Изначально высокий уровень DC
     e04:	85 b3       	in	r24, 0x15	; 21
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	85 bb       	out	0x15, r24	; 21
		
		
		// Рестарт экрана
		RESET_HIGH;
     e0a:	85 b3       	in	r24, 0x15	; 21
     e0c:	88 60       	ori	r24, 0x08	; 8
     e0e:	85 bb       	out	0x15, r24	; 21
     e10:	e7 e8       	ldi	r30, 0x87	; 135
     e12:	f3 e1       	ldi	r31, 0x13	; 19
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <_ZN6ST77894initEv+0x36>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <_ZN6ST77894initEv+0x3c>
     e1a:	00 00       	nop
		_delay_ms(20);
		RESET_LOW;
     e1c:	85 b3       	in	r24, 0x15	; 21
     e1e:	87 7f       	andi	r24, 0xF7	; 247
     e20:	85 bb       	out	0x15, r24	; 21
     e22:	e1 ee       	ldi	r30, 0xE1	; 225
     e24:	f4 e0       	ldi	r31, 0x04	; 4
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <_ZN6ST77894initEv+0x48>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <_ZN6ST77894initEv+0x4e>
     e2c:	00 00       	nop
		_delay_ms(5);
		RESET_HIGH;
     e2e:	85 b3       	in	r24, 0x15	; 21
     e30:	88 60       	ori	r24, 0x08	; 8
     e32:	85 bb       	out	0x15, r24	; 21
     e34:	e7 e8       	ldi	r30, 0x87	; 135
     e36:	f3 e1       	ldi	r31, 0x13	; 19
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <_ZN6ST77894initEv+0x5a>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <_ZN6ST77894initEv+0x60>
     e3e:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     e40:	85 b3       	in	r24, 0x15	; 21
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     e46:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
     e48:	77 9b       	sbis	0x0e, 7	; 14
     e4a:	fe cf       	rjmp	.-4      	; 0xe48 <_ZN6ST77894initEv+0x6a>
     e4c:	83 ec       	ldi	r24, 0xC3	; 195
     e4e:	99 e0       	ldi	r25, 0x09	; 9
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <_ZN6ST77894initEv+0x72>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <_ZN6ST77894initEv+0x78>
     e56:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     e58:	85 b3       	in	r24, 0x15	; 21
     e5a:	8b 7f       	andi	r24, 0xFB	; 251
     e5c:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     e5e:	81 e1       	ldi	r24, 0x11	; 17
     e60:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     e62:	77 9b       	sbis	0x0e, 7	; 14
     e64:	fe cf       	rjmp	.-4      	; 0xe62 <_ZN6ST77894initEv+0x84>
     e66:	e3 ec       	ldi	r30, 0xC3	; 195
     e68:	f9 e0       	ldi	r31, 0x09	; 9
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <_ZN6ST77894initEv+0x8c>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <_ZN6ST77894initEv+0x92>
     e70:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     e72:	85 b3       	in	r24, 0x15	; 21
     e74:	8b 7f       	andi	r24, 0xFB	; 251
     e76:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     e78:	8a e3       	ldi	r24, 0x3A	; 58
     e7a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     e7c:	77 9b       	sbis	0x0e, 7	; 14
     e7e:	fe cf       	rjmp	.-4      	; 0xe7c <_ZN6ST77894initEv+0x9e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     e80:	85 b3       	in	r24, 0x15	; 21
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     e8a:	77 9b       	sbis	0x0e, 7	; 14
     e8c:	fe cf       	rjmp	.-4      	; 0xe8a <_ZN6ST77894initEv+0xac>
     e8e:	83 ec       	ldi	r24, 0xC3	; 195
     e90:	99 e0       	ldi	r25, 0x09	; 9
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <_ZN6ST77894initEv+0xb4>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <_ZN6ST77894initEv+0xba>
     e98:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     e9a:	85 b3       	in	r24, 0x15	; 21
     e9c:	8b 7f       	andi	r24, 0xFB	; 251
     e9e:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     ea0:	86 e3       	ldi	r24, 0x36	; 54
     ea2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     ea4:	77 9b       	sbis	0x0e, 7	; 14
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <_ZN6ST77894initEv+0xc6>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     ea8:	85 b3       	in	r24, 0x15	; 21
     eaa:	84 60       	ori	r24, 0x04	; 4
     eac:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     eae:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     eb0:	77 9b       	sbis	0x0e, 7	; 14
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <_ZN6ST77894initEv+0xd2>
     eb4:	e3 ec       	ldi	r30, 0xC3	; 195
     eb6:	f9 e0       	ldi	r31, 0x09	; 9
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <_ZN6ST77894initEv+0xda>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <_ZN6ST77894initEv+0xe0>
     ebe:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     ec0:	85 b3       	in	r24, 0x15	; 21
     ec2:	8b 7f       	andi	r24, 0xFB	; 251
     ec4:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     ec6:	8a e2       	ldi	r24, 0x2A	; 42
     ec8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     eca:	77 9b       	sbis	0x0e, 7	; 14
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <_ZN6ST77894initEv+0xec>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     ece:	85 b3       	in	r24, 0x15	; 21
     ed0:	84 60       	ori	r24, 0x04	; 4
     ed2:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     ed4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     ed6:	77 9b       	sbis	0x0e, 7	; 14
     ed8:	fe cf       	rjmp	.-4      	; 0xed6 <_ZN6ST77894initEv+0xf8>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     eda:	85 b3       	in	r24, 0x15	; 21
     edc:	84 60       	ori	r24, 0x04	; 4
     ede:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     ee0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     ee2:	77 9b       	sbis	0x0e, 7	; 14
     ee4:	fe cf       	rjmp	.-4      	; 0xee2 <_ZN6ST77894initEv+0x104>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     ee6:	85 b3       	in	r24, 0x15	; 21
     ee8:	84 60       	ori	r24, 0x04	; 4
     eea:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     eec:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     eee:	77 9b       	sbis	0x0e, 7	; 14
     ef0:	fe cf       	rjmp	.-4      	; 0xeee <_ZN6ST77894initEv+0x110>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     ef2:	85 b3       	in	r24, 0x15	; 21
     ef4:	84 60       	ori	r24, 0x04	; 4
     ef6:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     ef8:	80 ef       	ldi	r24, 0xF0	; 240
     efa:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     efc:	77 9b       	sbis	0x0e, 7	; 14
     efe:	fe cf       	rjmp	.-4      	; 0xefc <_ZN6ST77894initEv+0x11e>
     f00:	83 ec       	ldi	r24, 0xC3	; 195
     f02:	99 e0       	ldi	r25, 0x09	; 9
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <_ZN6ST77894initEv+0x126>
     f08:	00 c0       	rjmp	.+0      	; 0xf0a <_ZN6ST77894initEv+0x12c>
     f0a:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     f0c:	85 b3       	in	r24, 0x15	; 21
     f0e:	8b 7f       	andi	r24, 0xFB	; 251
     f10:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f12:	8b e2       	ldi	r24, 0x2B	; 43
     f14:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     f16:	77 9b       	sbis	0x0e, 7	; 14
     f18:	fe cf       	rjmp	.-4      	; 0xf16 <_ZN6ST77894initEv+0x138>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     f1a:	85 b3       	in	r24, 0x15	; 21
     f1c:	84 60       	ori	r24, 0x04	; 4
     f1e:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f20:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     f22:	77 9b       	sbis	0x0e, 7	; 14
     f24:	fe cf       	rjmp	.-4      	; 0xf22 <_ZN6ST77894initEv+0x144>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     f26:	85 b3       	in	r24, 0x15	; 21
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f2c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     f2e:	77 9b       	sbis	0x0e, 7	; 14
     f30:	fe cf       	rjmp	.-4      	; 0xf2e <_ZN6ST77894initEv+0x150>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     f32:	85 b3       	in	r24, 0x15	; 21
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f38:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     f3a:	77 9b       	sbis	0x0e, 7	; 14
     f3c:	fe cf       	rjmp	.-4      	; 0xf3a <_ZN6ST77894initEv+0x15c>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     f3e:	85 b3       	in	r24, 0x15	; 21
     f40:	84 60       	ori	r24, 0x04	; 4
     f42:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f44:	80 ef       	ldi	r24, 0xF0	; 240
     f46:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     f48:	77 9b       	sbis	0x0e, 7	; 14
     f4a:	fe cf       	rjmp	.-4      	; 0xf48 <_ZN6ST77894initEv+0x16a>
     f4c:	e3 ec       	ldi	r30, 0xC3	; 195
     f4e:	f9 e0       	ldi	r31, 0x09	; 9
     f50:	31 97       	sbiw	r30, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <_ZN6ST77894initEv+0x172>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <_ZN6ST77894initEv+0x178>
     f56:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     f58:	85 b3       	in	r24, 0x15	; 21
     f5a:	8b 7f       	andi	r24, 0xFB	; 251
     f5c:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f5e:	81 e2       	ldi	r24, 0x21	; 33
     f60:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     f62:	77 9b       	sbis	0x0e, 7	; 14
     f64:	fe cf       	rjmp	.-4      	; 0xf62 <_ZN6ST77894initEv+0x184>
     f66:	83 ec       	ldi	r24, 0xC3	; 195
     f68:	99 e0       	ldi	r25, 0x09	; 9
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	f1 f7       	brne	.-4      	; 0xf6a <_ZN6ST77894initEv+0x18c>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <_ZN6ST77894initEv+0x192>
     f70:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     f72:	85 b3       	in	r24, 0x15	; 21
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
     f78:	89 e2       	ldi	r24, 0x29	; 41
     f7a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
     f7c:	77 9b       	sbis	0x0e, 7	; 14
     f7e:	fe cf       	rjmp	.-4      	; 0xf7c <_ZN6ST77894initEv+0x19e>
     f80:	e3 ec       	ldi	r30, 0xC3	; 195
     f82:	f9 e0       	ldi	r31, 0x09	; 9
     f84:	31 97       	sbiw	r30, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <_ZN6ST77894initEv+0x1a6>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <_ZN6ST77894initEv+0x1ac>
     f8a:	00 00       	nop
     f8c:	08 95       	ret

00000f8e <_ZN6ST778910fillScreenEccc>:
	//==============================================================================
	//							Функции экрана ST7789
	//==============================================================================
		
	void fillScreen(char red, char green, char blue)
	{
     f8e:	26 2f       	mov	r18, r22
     f90:	34 2f       	mov	r19, r20
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     f92:	95 b3       	in	r25, 0x15	; 21
     f94:	9b 7f       	andi	r25, 0xFB	; 251
     f96:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     f98:	9a e2       	ldi	r25, 0x2A	; 42
     f9a:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
     f9c:	77 9b       	sbis	0x0e, 7	; 14
     f9e:	fe cf       	rjmp	.-4      	; 0xf9c <_ZN6ST778910fillScreenEccc+0xe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fa0:	95 b3       	in	r25, 0x15	; 21
     fa2:	94 60       	ori	r25, 0x04	; 4
     fa4:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fa6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     fa8:	77 9b       	sbis	0x0e, 7	; 14
     faa:	fe cf       	rjmp	.-4      	; 0xfa8 <_ZN6ST778910fillScreenEccc+0x1a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fac:	95 b3       	in	r25, 0x15	; 21
     fae:	94 60       	ori	r25, 0x04	; 4
     fb0:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fb2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     fb4:	77 9b       	sbis	0x0e, 7	; 14
     fb6:	fe cf       	rjmp	.-4      	; 0xfb4 <_ZN6ST778910fillScreenEccc+0x26>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fb8:	95 b3       	in	r25, 0x15	; 21
     fba:	94 60       	ori	r25, 0x04	; 4
     fbc:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fbe:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     fc0:	77 9b       	sbis	0x0e, 7	; 14
     fc2:	fe cf       	rjmp	.-4      	; 0xfc0 <_ZN6ST778910fillScreenEccc+0x32>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fc4:	95 b3       	in	r25, 0x15	; 21
     fc6:	94 60       	ori	r25, 0x04	; 4
     fc8:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fca:	90 ef       	ldi	r25, 0xF0	; 240
     fcc:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
     fce:	77 9b       	sbis	0x0e, 7	; 14
     fd0:	fe cf       	rjmp	.-4      	; 0xfce <_ZN6ST778910fillScreenEccc+0x40>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
     fd2:	95 b3       	in	r25, 0x15	; 21
     fd4:	9b 7f       	andi	r25, 0xFB	; 251
     fd6:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fd8:	9b e2       	ldi	r25, 0x2B	; 43
     fda:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
     fdc:	77 9b       	sbis	0x0e, 7	; 14
     fde:	fe cf       	rjmp	.-4      	; 0xfdc <_ZN6ST778910fillScreenEccc+0x4e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fe0:	95 b3       	in	r25, 0x15	; 21
     fe2:	94 60       	ori	r25, 0x04	; 4
     fe4:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     fe6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     fe8:	77 9b       	sbis	0x0e, 7	; 14
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <_ZN6ST778910fillScreenEccc+0x5a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     fec:	95 b3       	in	r25, 0x15	; 21
     fee:	94 60       	ori	r25, 0x04	; 4
     ff0:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     ff2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
     ff4:	77 9b       	sbis	0x0e, 7	; 14
     ff6:	fe cf       	rjmp	.-4      	; 0xff4 <_ZN6ST778910fillScreenEccc+0x66>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
     ff8:	95 b3       	in	r25, 0x15	; 21
     ffa:	94 60       	ori	r25, 0x04	; 4
     ffc:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
     ffe:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1000:	77 9b       	sbis	0x0e, 7	; 14
    1002:	fe cf       	rjmp	.-4      	; 0x1000 <_ZN6ST778910fillScreenEccc+0x72>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1004:	95 b3       	in	r25, 0x15	; 21
    1006:	94 60       	ori	r25, 0x04	; 4
    1008:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    100a:	90 ef       	ldi	r25, 0xF0	; 240
    100c:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    100e:	77 9b       	sbis	0x0e, 7	; 14
    1010:	fe cf       	rjmp	.-4      	; 0x100e <_ZN6ST778910fillScreenEccc+0x80>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1012:	95 b3       	in	r25, 0x15	; 21
    1014:	9b 7f       	andi	r25, 0xFB	; 251
    1016:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1018:	9c e2       	ldi	r25, 0x2C	; 44
    101a:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    101c:	77 9b       	sbis	0x0e, 7	; 14
    101e:	fe cf       	rjmp	.-4      	; 0x101c <_ZN6ST778910fillScreenEccc+0x8e>
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	ba 01       	movw	r22, r20
		sendData(240 >> 8);			// YE highpart	(Старшая часть конечного положения Ряда)
		sendData(240);				// YE highpart	(Младшая часть конечного положения Ряда)

		sendCommand(0x2C);			// НЕ ПОМНЮ ЧТО ЭТО?
		
		for(long int i = 0; i < 57600; i++)
    1026:	41 15       	cp	r20, r1
    1028:	91 ee       	ldi	r25, 0xE1	; 225
    102a:	59 07       	cpc	r21, r25
    102c:	61 05       	cpc	r22, r1
    102e:	71 05       	cpc	r23, r1
    1030:	04 f5       	brge	.+64     	; 0x1072 <_ZN6ST778910fillScreenEccc+0xe4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1032:	95 b3       	in	r25, 0x15	; 21
    1034:	94 60       	ori	r25, 0x04	; 4
    1036:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1038:	98 2f       	mov	r25, r24
    103a:	99 0f       	add	r25, r25
    103c:	99 0f       	add	r25, r25
    103e:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1040:	77 9b       	sbis	0x0e, 7	; 14
    1042:	fe cf       	rjmp	.-4      	; 0x1040 <_ZN6ST778910fillScreenEccc+0xb2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1044:	95 b3       	in	r25, 0x15	; 21
    1046:	94 60       	ori	r25, 0x04	; 4
    1048:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    104a:	92 2f       	mov	r25, r18
    104c:	99 0f       	add	r25, r25
    104e:	99 0f       	add	r25, r25
    1050:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1052:	77 9b       	sbis	0x0e, 7	; 14
    1054:	fe cf       	rjmp	.-4      	; 0x1052 <_ZN6ST778910fillScreenEccc+0xc4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1056:	95 b3       	in	r25, 0x15	; 21
    1058:	94 60       	ori	r25, 0x04	; 4
    105a:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    105c:	93 2f       	mov	r25, r19
    105e:	99 0f       	add	r25, r25
    1060:	99 0f       	add	r25, r25
    1062:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1064:	77 9b       	sbis	0x0e, 7	; 14
    1066:	fe cf       	rjmp	.-4      	; 0x1064 <_ZN6ST778910fillScreenEccc+0xd6>
    1068:	4f 5f       	subi	r20, 0xFF	; 255
    106a:	5f 4f       	sbci	r21, 0xFF	; 255
    106c:	6f 4f       	sbci	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	da cf       	rjmp	.-76     	; 0x1026 <_ZN6ST778910fillScreenEccc+0x98>
    1072:	08 95       	ret

00001074 <_ZN6ST778911printStringEPcS0_S0_cccc>:
			sendData(blue << 2);
		}
	}

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	ef 92       	push	r14
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	5c 01       	movw	r10, r24
    108a:	eb 01       	movw	r28, r22
		char counter = 0;
    108c:	10 e0       	ldi	r17, 0x00	; 0
	
		while (string[counter] != '\0')
    108e:	f5 01       	movw	r30, r10
    1090:	e1 0f       	add	r30, r17
    1092:	f1 1d       	adc	r31, r1
    1094:	30 81       	ld	r19, Z
    1096:	33 23       	and	r19, r19
    1098:	09 f4       	brne	.+2      	; 0x109c <_ZN6ST778911printStringEPcS0_S0_cccc+0x28>
    109a:	50 c1       	rjmp	.+672    	; 0x133c <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c8>
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	86 30       	cpi	r24, 0x06	; 6
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x30>
    10a2:	4a c1       	rjmp	.+660    	; 0x1338 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c4>
    10a4:	90 e0       	ldi	r25, 0x00	; 0
		{
			char mask;
			for (char y = 0; y < 8; y++)
    10a6:	98 30       	cpi	r25, 0x08	; 8
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <_ZN6ST778911printStringEPcS0_S0_cccc+0x38>
    10aa:	30 c1       	rjmp	.+608    	; 0x130c <_ZN6ST778911printStringEPcS0_S0_cccc+0x298>
			{
				mask = 1;
				if(monocraft[letter - 32][i] & (mask << (7 - y)))
    10ac:	e3 2f       	mov	r30, r19
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	b0 97       	sbiw	r30, 0x20	; 32
    10b2:	bf 01       	movw	r22, r30
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	e6 0f       	add	r30, r22
    10ba:	f7 1f       	adc	r31, r23
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e6 56       	subi	r30, 0x66	; 102
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	e8 0f       	add	r30, r24
    10c6:	f1 1d       	adc	r31, r1
    10c8:	a0 81       	ld	r26, Z
    10ca:	e7 e0       	ldi	r30, 0x07	; 7
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	e9 1b       	sub	r30, r25
    10d0:	f1 09       	sbc	r31, r1
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	4b 01       	movw	r8, r22
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <_ZN6ST778911printStringEPcS0_S0_cccc+0x6a>
    10da:	88 0c       	add	r8, r8
    10dc:	99 1c       	adc	r9, r9
    10de:	ea 95       	dec	r30
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <_ZN6ST778911printStringEPcS0_S0_cccc+0x66>
    10e2:	6a 2f       	mov	r22, r26
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	68 21       	and	r22, r8
    10e8:	79 21       	and	r23, r9
    10ea:	67 2b       	or	r22, r23
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <_ZN6ST778911printStringEPcS0_S0_cccc+0x7c>
    10ee:	8a c0       	rjmp	.+276    	; 0x1204 <_ZN6ST778911printStringEPcS0_S0_cccc+0x190>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
    10f0:	fa 01       	movw	r30, r20
    10f2:	a0 81       	ld	r26, Z
    10f4:	c9 9e       	mul	r12, r25
    10f6:	a0 0d       	add	r26, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	b8 81       	ld	r27, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    10fc:	b1 3f       	cpi	r27, 0xF1	; 241
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <_ZN6ST778911printStringEPcS0_S0_cccc+0x8e>
    1100:	03 c1       	rjmp	.+518    	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    1102:	a1 3f       	cpi	r26, 0xF1	; 241
    1104:	08 f0       	brcs	.+2      	; 0x1108 <_ZN6ST778911printStringEPcS0_S0_cccc+0x94>
    1106:	00 c1       	rjmp	.+512    	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1108:	65 b3       	in	r22, 0x15	; 21
    110a:	6b 7f       	andi	r22, 0xFB	; 251
    110c:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    110e:	6a e2       	ldi	r22, 0x2A	; 42
    1110:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1112:	77 9b       	sbis	0x0e, 7	; 14
    1114:	fe cf       	rjmp	.-4      	; 0x1112 <_ZN6ST778911printStringEPcS0_S0_cccc+0x9e>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    1116:	eb 2f       	mov	r30, r27
    1118:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    111a:	65 b3       	in	r22, 0x15	; 21
    111c:	64 60       	ori	r22, 0x04	; 4
    111e:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1120:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1122:	77 9b       	sbis	0x0e, 7	; 14
    1124:	fe cf       	rjmp	.-4      	; 0x1122 <_ZN6ST778911printStringEPcS0_S0_cccc+0xae>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1126:	65 b3       	in	r22, 0x15	; 21
    1128:	64 60       	ori	r22, 0x04	; 4
    112a:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    112c:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    112e:	77 9b       	sbis	0x0e, 7	; 14
    1130:	fe cf       	rjmp	.-4      	; 0x112e <_ZN6ST778911printStringEPcS0_S0_cccc+0xba>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    1132:	6c 2d       	mov	r22, r12
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	e6 0f       	add	r30, r22
    1138:	f7 1f       	adc	r31, r23
    113a:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    113c:	e5 b3       	in	r30, 0x15	; 21
    113e:	e4 60       	ori	r30, 0x04	; 4
    1140:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    1142:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    1144:	77 9b       	sbis	0x0e, 7	; 14
    1146:	fe cf       	rjmp	.-4      	; 0x1144 <_ZN6ST778911printStringEPcS0_S0_cccc+0xd0>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    1148:	bc 0d       	add	r27, r12
    114a:	b1 50       	subi	r27, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    114c:	e5 b3       	in	r30, 0x15	; 21
    114e:	e4 60       	ori	r30, 0x04	; 4
    1150:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    1152:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    1154:	77 9b       	sbis	0x0e, 7	; 14
    1156:	fe cf       	rjmp	.-4      	; 0x1154 <_ZN6ST778911printStringEPcS0_S0_cccc+0xe0>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1158:	e5 b3       	in	r30, 0x15	; 21
    115a:	eb 7f       	andi	r30, 0xFB	; 251
    115c:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    115e:	eb e2       	ldi	r30, 0x2B	; 43
    1160:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    1162:	77 9b       	sbis	0x0e, 7	; 14
    1164:	fe cf       	rjmp	.-4      	; 0x1162 <_ZN6ST778911printStringEPcS0_S0_cccc+0xee>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    1166:	ea 2f       	mov	r30, r26
    1168:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    116a:	b5 b3       	in	r27, 0x15	; 21
    116c:	b4 60       	ori	r27, 0x04	; 4
    116e:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    1170:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1172:	77 9b       	sbis	0x0e, 7	; 14
    1174:	fe cf       	rjmp	.-4      	; 0x1172 <_ZN6ST778911printStringEPcS0_S0_cccc+0xfe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1176:	b5 b3       	in	r27, 0x15	; 21
    1178:	b4 60       	ori	r27, 0x04	; 4
    117a:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    117c:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    117e:	77 9b       	sbis	0x0e, 7	; 14
    1180:	fe cf       	rjmp	.-4      	; 0x117e <_ZN6ST778911printStringEPcS0_S0_cccc+0x10a>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    1182:	e6 0f       	add	r30, r22
    1184:	f7 1f       	adc	r31, r23
    1186:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1188:	e5 b3       	in	r30, 0x15	; 21
    118a:	e4 60       	ori	r30, 0x04	; 4
    118c:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    118e:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    1190:	77 9b       	sbis	0x0e, 7	; 14
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <_ZN6ST778911printStringEPcS0_S0_cccc+0x11c>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    1194:	ac 0d       	add	r26, r12
    1196:	a1 50       	subi	r26, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1198:	e5 b3       	in	r30, 0x15	; 21
    119a:	e4 60       	ori	r30, 0x04	; 4
    119c:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    119e:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    11a0:	77 9b       	sbis	0x0e, 7	; 14
    11a2:	fe cf       	rjmp	.-4      	; 0x11a0 <_ZN6ST778911printStringEPcS0_S0_cccc+0x12c>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    11a4:	e5 b3       	in	r30, 0x15	; 21
    11a6:	eb 7f       	andi	r30, 0xFB	; 251
    11a8:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    11aa:	ec e2       	ldi	r30, 0x2C	; 44
    11ac:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    11ae:	77 9b       	sbis	0x0e, 7	; 14
    11b0:	fe cf       	rjmp	.-4      	; 0x11ae <_ZN6ST778911printStringEPcS0_S0_cccc+0x13a>
    11b2:	e0 e0       	ldi	r30, 0x00	; 0
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    11b6:	66 9f       	mul	r22, r22
    11b8:	d0 01       	movw	r26, r0
    11ba:	67 9f       	mul	r22, r23
    11bc:	b0 0d       	add	r27, r0
    11be:	b0 0d       	add	r27, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	ea 17       	cp	r30, r26
    11c4:	fb 07       	cpc	r31, r27
    11c6:	0c f0       	brlt	.+2      	; 0x11ca <_ZN6ST778911printStringEPcS0_S0_cccc+0x156>
    11c8:	9f c0       	rjmp	.+318    	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11ca:	a5 b3       	in	r26, 0x15	; 21
    11cc:	a4 60       	ori	r26, 0x04	; 4
    11ce:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    11d0:	a2 2f       	mov	r26, r18
    11d2:	aa 0f       	add	r26, r26
    11d4:	aa 0f       	add	r26, r26
    11d6:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    11d8:	77 9b       	sbis	0x0e, 7	; 14
    11da:	fe cf       	rjmp	.-4      	; 0x11d8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x164>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11dc:	a5 b3       	in	r26, 0x15	; 21
    11de:	a4 60       	ori	r26, 0x04	; 4
    11e0:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    11e2:	a0 2f       	mov	r26, r16
    11e4:	aa 0f       	add	r26, r26
    11e6:	aa 0f       	add	r26, r26
    11e8:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    11ea:	77 9b       	sbis	0x0e, 7	; 14
    11ec:	fe cf       	rjmp	.-4      	; 0x11ea <_ZN6ST778911printStringEPcS0_S0_cccc+0x176>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11ee:	a5 b3       	in	r26, 0x15	; 21
    11f0:	a4 60       	ori	r26, 0x04	; 4
    11f2:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    11f4:	ae 2d       	mov	r26, r14
    11f6:	aa 0f       	add	r26, r26
    11f8:	aa 0f       	add	r26, r26
    11fa:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    11fc:	77 9b       	sbis	0x0e, 7	; 14
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <_ZN6ST778911printStringEPcS0_S0_cccc+0x188>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1200:	31 96       	adiw	r30, 0x01	; 1
    1202:	d9 cf       	rjmp	.-78     	; 0x11b6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x142>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
				}
				else
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
    1204:	da 01       	movw	r26, r20
    1206:	ec 91       	ld	r30, X
    1208:	c9 9e       	mul	r12, r25
    120a:	e0 0d       	add	r30, r0
    120c:	11 24       	eor	r1, r1
    120e:	f8 81       	ld	r31, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    1210:	f1 3f       	cpi	r31, 0xF1	; 241
    1212:	08 f0       	brcs	.+2      	; 0x1216 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a2>
    1214:	79 c0       	rjmp	.+242    	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    1216:	e1 3f       	cpi	r30, 0xF1	; 241
    1218:	08 f0       	brcs	.+2      	; 0x121c <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a8>
    121a:	76 c0       	rjmp	.+236    	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    121c:	65 b3       	in	r22, 0x15	; 21
    121e:	6b 7f       	andi	r22, 0xFB	; 251
    1220:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1222:	6a e2       	ldi	r22, 0x2A	; 42
    1224:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1226:	77 9b       	sbis	0x0e, 7	; 14
    1228:	fe cf       	rjmp	.-4      	; 0x1226 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1b2>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    122a:	6f 2f       	mov	r22, r31
    122c:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    122e:	a5 b3       	in	r26, 0x15	; 21
    1230:	a4 60       	ori	r26, 0x04	; 4
    1232:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1234:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1236:	77 9b       	sbis	0x0e, 7	; 14
    1238:	fe cf       	rjmp	.-4      	; 0x1236 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1c2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    123a:	a5 b3       	in	r26, 0x15	; 21
    123c:	a4 60       	ori	r26, 0x04	; 4
    123e:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1240:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    1242:	77 9b       	sbis	0x0e, 7	; 14
    1244:	fe cf       	rjmp	.-4      	; 0x1242 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1ce>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    1246:	ac 2d       	mov	r26, r12
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	6a 0f       	add	r22, r26
    124c:	7b 1f       	adc	r23, r27
    124e:	61 50       	subi	r22, 0x01	; 1
    1250:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1252:	65 b3       	in	r22, 0x15	; 21
    1254:	64 60       	ori	r22, 0x04	; 4
    1256:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1258:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    125a:	77 9b       	sbis	0x0e, 7	; 14
    125c:	fe cf       	rjmp	.-4      	; 0x125a <_ZN6ST778911printStringEPcS0_S0_cccc+0x1e6>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    125e:	fc 0d       	add	r31, r12
    1260:	f1 50       	subi	r31, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1262:	65 b3       	in	r22, 0x15	; 21
    1264:	64 60       	ori	r22, 0x04	; 4
    1266:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1268:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    126a:	77 9b       	sbis	0x0e, 7	; 14
    126c:	fe cf       	rjmp	.-4      	; 0x126a <_ZN6ST778911printStringEPcS0_S0_cccc+0x1f6>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    126e:	65 b3       	in	r22, 0x15	; 21
    1270:	6b 7f       	andi	r22, 0xFB	; 251
    1272:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1274:	6b e2       	ldi	r22, 0x2B	; 43
    1276:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1278:	77 9b       	sbis	0x0e, 7	; 14
    127a:	fe cf       	rjmp	.-4      	; 0x1278 <_ZN6ST778911printStringEPcS0_S0_cccc+0x204>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    127c:	6e 2f       	mov	r22, r30
    127e:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1280:	f5 b3       	in	r31, 0x15	; 21
    1282:	f4 60       	ori	r31, 0x04	; 4
    1284:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    1286:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1288:	77 9b       	sbis	0x0e, 7	; 14
    128a:	fe cf       	rjmp	.-4      	; 0x1288 <_ZN6ST778911printStringEPcS0_S0_cccc+0x214>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    128c:	f5 b3       	in	r31, 0x15	; 21
    128e:	f4 60       	ori	r31, 0x04	; 4
    1290:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    1292:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    1294:	77 9b       	sbis	0x0e, 7	; 14
    1296:	fe cf       	rjmp	.-4      	; 0x1294 <_ZN6ST778911printStringEPcS0_S0_cccc+0x220>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    1298:	6a 0f       	add	r22, r26
    129a:	7b 1f       	adc	r23, r27
    129c:	61 50       	subi	r22, 0x01	; 1
    129e:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12a0:	65 b3       	in	r22, 0x15	; 21
    12a2:	64 60       	ori	r22, 0x04	; 4
    12a4:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12a6:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    12a8:	77 9b       	sbis	0x0e, 7	; 14
    12aa:	fe cf       	rjmp	.-4      	; 0x12a8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x234>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    12ac:	ec 0d       	add	r30, r12
    12ae:	e1 50       	subi	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12b0:	65 b3       	in	r22, 0x15	; 21
    12b2:	64 60       	ori	r22, 0x04	; 4
    12b4:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12b6:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    12b8:	77 9b       	sbis	0x0e, 7	; 14
    12ba:	fe cf       	rjmp	.-4      	; 0x12b8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x244>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    12bc:	65 b3       	in	r22, 0x15	; 21
    12be:	6b 7f       	andi	r22, 0xFB	; 251
    12c0:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12c2:	6c e2       	ldi	r22, 0x2C	; 44
    12c4:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    12c6:	77 9b       	sbis	0x0e, 7	; 14
    12c8:	fe cf       	rjmp	.-4      	; 0x12c6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x252>
    12ca:	e0 e0       	ldi	r30, 0x00	; 0
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    12ce:	aa 9f       	mul	r26, r26
    12d0:	b0 01       	movw	r22, r0
    12d2:	ab 9f       	mul	r26, r27
    12d4:	70 0d       	add	r23, r0
    12d6:	70 0d       	add	r23, r0
    12d8:	11 24       	eor	r1, r1
    12da:	e6 17       	cp	r30, r22
    12dc:	f7 07       	cpc	r31, r23
    12de:	a4 f4       	brge	.+40     	; 0x1308 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12e0:	65 b3       	in	r22, 0x15	; 21
    12e2:	64 60       	ori	r22, 0x04	; 4
    12e4:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12e6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    12e8:	77 9b       	sbis	0x0e, 7	; 14
    12ea:	fe cf       	rjmp	.-4      	; 0x12e8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x274>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12ec:	65 b3       	in	r22, 0x15	; 21
    12ee:	64 60       	ori	r22, 0x04	; 4
    12f0:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12f2:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    12f4:	77 9b       	sbis	0x0e, 7	; 14
    12f6:	fe cf       	rjmp	.-4      	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x280>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12f8:	65 b3       	in	r22, 0x15	; 21
    12fa:	64 60       	ori	r22, 0x04	; 4
    12fc:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    12fe:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1300:	77 9b       	sbis	0x0e, 7	; 14
    1302:	fe cf       	rjmp	.-4      	; 0x1300 <_ZN6ST778911printStringEPcS0_S0_cccc+0x28c>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	e3 cf       	rjmp	.-58     	; 0x12ce <_ZN6ST778911printStringEPcS0_S0_cccc+0x25a>
	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
		{
			char mask;
			for (char y = 0; y < 8; y++)
    1308:	9f 5f       	subi	r25, 0xFF	; 255
    130a:	cd ce       	rjmp	.-614    	; 0x10a6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x32>
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
				}
			}
					
			*xpos += size;
    130c:	98 81       	ld	r25, Y
    130e:	9c 0d       	add	r25, r12
    1310:	98 83       	st	Y, r25
					
			if (*xpos >= 240)
    1312:	90 3f       	cpi	r25, 0xF0	; 240
    1314:	48 f0       	brcs	.+18     	; 0x1328 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2b4>
			{
				*xpos = 0;
    1316:	18 82       	st	Y, r1
				*ypos += 8 * size;
    1318:	fa 01       	movw	r30, r20
    131a:	60 81       	ld	r22, Z
    131c:	9c 2d       	mov	r25, r12
    131e:	99 0f       	add	r25, r25
    1320:	99 0f       	add	r25, r25
    1322:	99 0f       	add	r25, r25
    1324:	96 0f       	add	r25, r22
    1326:	90 83       	st	Z, r25
			}
					
			if (*ypos >= 240)
    1328:	da 01       	movw	r26, r20
    132a:	9c 91       	ld	r25, X
    132c:	90 3f       	cpi	r25, 0xF0	; 240
    132e:	10 f0       	brcs	.+4      	; 0x1334 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c0>
			{
				*xpos = 0;
    1330:	18 82       	st	Y, r1
				*ypos = 0;
    1332:	1c 92       	st	X, r1
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	b3 ce       	rjmp	.-666    	; 0x109e <_ZN6ST778911printStringEPcS0_S0_cccc+0x2a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
    1338:	1f 5f       	subi	r17, 0xFF	; 255

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		char counter = 0;
	
		while (string[counter] != '\0')
    133a:	a9 ce       	rjmp	.-686    	; 0x108e <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
		}
	}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ef 90       	pop	r14
    1346:	cf 90       	pop	r12
    1348:	bf 90       	pop	r11
    134a:	af 90       	pop	r10
    134c:	9f 90       	pop	r9
    134e:	8f 90       	pop	r8
    1350:	08 95       	ret

00001352 <__subsf3>:
    1352:	50 58       	subi	r21, 0x80	; 128

00001354 <__addsf3>:
    1354:	bb 27       	eor	r27, r27
    1356:	aa 27       	eor	r26, r26
    1358:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3x>
    135c:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>
    1360:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscA>
    1364:	38 f0       	brcs	.+14     	; 0x1374 <__addsf3+0x20>
    1366:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_pscB>
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__addsf3+0x20>
    136c:	39 f4       	brne	.+14     	; 0x137c <__addsf3+0x28>
    136e:	9f 3f       	cpi	r25, 0xFF	; 255
    1370:	19 f4       	brne	.+6      	; 0x1378 <__addsf3+0x24>
    1372:	26 f4       	brtc	.+8      	; 0x137c <__addsf3+0x28>
    1374:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    1378:	0e f4       	brtc	.+2      	; 0x137c <__addsf3+0x28>
    137a:	e0 95       	com	r30
    137c:	e7 fb       	bst	r30, 7
    137e:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>

00001382 <__addsf3x>:
    1382:	e9 2f       	mov	r30, r25
    1384:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_split3>
    1388:	58 f3       	brcs	.-42     	; 0x1360 <__addsf3+0xc>
    138a:	ba 17       	cp	r27, r26
    138c:	62 07       	cpc	r22, r18
    138e:	73 07       	cpc	r23, r19
    1390:	84 07       	cpc	r24, r20
    1392:	95 07       	cpc	r25, r21
    1394:	20 f0       	brcs	.+8      	; 0x139e <__addsf3x+0x1c>
    1396:	79 f4       	brne	.+30     	; 0x13b6 <__addsf3x+0x34>
    1398:	a6 f5       	brtc	.+104    	; 0x1402 <__addsf3x+0x80>
    139a:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_zero>
    139e:	0e f4       	brtc	.+2      	; 0x13a2 <__addsf3x+0x20>
    13a0:	e0 95       	com	r30
    13a2:	0b 2e       	mov	r0, r27
    13a4:	ba 2f       	mov	r27, r26
    13a6:	a0 2d       	mov	r26, r0
    13a8:	0b 01       	movw	r0, r22
    13aa:	b9 01       	movw	r22, r18
    13ac:	90 01       	movw	r18, r0
    13ae:	0c 01       	movw	r0, r24
    13b0:	ca 01       	movw	r24, r20
    13b2:	a0 01       	movw	r20, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	ff 27       	eor	r31, r31
    13b8:	59 1b       	sub	r21, r25
    13ba:	99 f0       	breq	.+38     	; 0x13e2 <__addsf3x+0x60>
    13bc:	59 3f       	cpi	r21, 0xF9	; 249
    13be:	50 f4       	brcc	.+20     	; 0x13d4 <__addsf3x+0x52>
    13c0:	50 3e       	cpi	r21, 0xE0	; 224
    13c2:	68 f1       	brcs	.+90     	; 0x141e <__addsf3x+0x9c>
    13c4:	1a 16       	cp	r1, r26
    13c6:	f0 40       	sbci	r31, 0x00	; 0
    13c8:	a2 2f       	mov	r26, r18
    13ca:	23 2f       	mov	r18, r19
    13cc:	34 2f       	mov	r19, r20
    13ce:	44 27       	eor	r20, r20
    13d0:	58 5f       	subi	r21, 0xF8	; 248
    13d2:	f3 cf       	rjmp	.-26     	; 0x13ba <__addsf3x+0x38>
    13d4:	46 95       	lsr	r20
    13d6:	37 95       	ror	r19
    13d8:	27 95       	ror	r18
    13da:	a7 95       	ror	r26
    13dc:	f0 40       	sbci	r31, 0x00	; 0
    13de:	53 95       	inc	r21
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <__addsf3x+0x52>
    13e2:	7e f4       	brtc	.+30     	; 0x1402 <__addsf3x+0x80>
    13e4:	1f 16       	cp	r1, r31
    13e6:	ba 0b       	sbc	r27, r26
    13e8:	62 0b       	sbc	r22, r18
    13ea:	73 0b       	sbc	r23, r19
    13ec:	84 0b       	sbc	r24, r20
    13ee:	ba f0       	brmi	.+46     	; 0x141e <__addsf3x+0x9c>
    13f0:	91 50       	subi	r25, 0x01	; 1
    13f2:	a1 f0       	breq	.+40     	; 0x141c <__addsf3x+0x9a>
    13f4:	ff 0f       	add	r31, r31
    13f6:	bb 1f       	adc	r27, r27
    13f8:	66 1f       	adc	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	88 1f       	adc	r24, r24
    13fe:	c2 f7       	brpl	.-16     	; 0x13f0 <__addsf3x+0x6e>
    1400:	0e c0       	rjmp	.+28     	; 0x141e <__addsf3x+0x9c>
    1402:	ba 0f       	add	r27, r26
    1404:	62 1f       	adc	r22, r18
    1406:	73 1f       	adc	r23, r19
    1408:	84 1f       	adc	r24, r20
    140a:	48 f4       	brcc	.+18     	; 0x141e <__addsf3x+0x9c>
    140c:	87 95       	ror	r24
    140e:	77 95       	ror	r23
    1410:	67 95       	ror	r22
    1412:	b7 95       	ror	r27
    1414:	f7 95       	ror	r31
    1416:	9e 3f       	cpi	r25, 0xFE	; 254
    1418:	08 f0       	brcs	.+2      	; 0x141c <__addsf3x+0x9a>
    141a:	b0 cf       	rjmp	.-160    	; 0x137c <__addsf3+0x28>
    141c:	93 95       	inc	r25
    141e:	88 0f       	add	r24, r24
    1420:	08 f0       	brcs	.+2      	; 0x1424 <__addsf3x+0xa2>
    1422:	99 27       	eor	r25, r25
    1424:	ee 0f       	add	r30, r30
    1426:	97 95       	ror	r25
    1428:	87 95       	ror	r24
    142a:	08 95       	ret

0000142c <__cmpsf2>:
    142c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_cmp>
    1430:	08 f4       	brcc	.+2      	; 0x1434 <__cmpsf2+0x8>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	08 95       	ret

00001436 <__divsf3>:
    1436:	0e 94 2f 0a 	call	0x145e	; 0x145e <__divsf3x>
    143a:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>
    143e:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_pscB>
    1442:	58 f0       	brcs	.+22     	; 0x145a <__divsf3+0x24>
    1444:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscA>
    1448:	40 f0       	brcs	.+16     	; 0x145a <__divsf3+0x24>
    144a:	29 f4       	brne	.+10     	; 0x1456 <__divsf3+0x20>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	29 f0       	breq	.+10     	; 0x145a <__divsf3+0x24>
    1450:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    1454:	51 11       	cpse	r21, r1
    1456:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    145a:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>

0000145e <__divsf3x>:
    145e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_split3>
    1462:	68 f3       	brcs	.-38     	; 0x143e <__divsf3+0x8>

00001464 <__divsf3_pse>:
    1464:	99 23       	and	r25, r25
    1466:	b1 f3       	breq	.-20     	; 0x1454 <__divsf3+0x1e>
    1468:	55 23       	and	r21, r21
    146a:	91 f3       	breq	.-28     	; 0x1450 <__divsf3+0x1a>
    146c:	95 1b       	sub	r25, r21
    146e:	55 0b       	sbc	r21, r21
    1470:	bb 27       	eor	r27, r27
    1472:	aa 27       	eor	r26, r26
    1474:	62 17       	cp	r22, r18
    1476:	73 07       	cpc	r23, r19
    1478:	84 07       	cpc	r24, r20
    147a:	38 f0       	brcs	.+14     	; 0x148a <__divsf3_pse+0x26>
    147c:	9f 5f       	subi	r25, 0xFF	; 255
    147e:	5f 4f       	sbci	r21, 0xFF	; 255
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	44 1f       	adc	r20, r20
    1486:	aa 1f       	adc	r26, r26
    1488:	a9 f3       	breq	.-22     	; 0x1474 <__divsf3_pse+0x10>
    148a:	35 d0       	rcall	.+106    	; 0x14f6 <__divsf3_pse+0x92>
    148c:	0e 2e       	mov	r0, r30
    148e:	3a f0       	brmi	.+14     	; 0x149e <__divsf3_pse+0x3a>
    1490:	e0 e8       	ldi	r30, 0x80	; 128
    1492:	32 d0       	rcall	.+100    	; 0x14f8 <__divsf3_pse+0x94>
    1494:	91 50       	subi	r25, 0x01	; 1
    1496:	50 40       	sbci	r21, 0x00	; 0
    1498:	e6 95       	lsr	r30
    149a:	00 1c       	adc	r0, r0
    149c:	ca f7       	brpl	.-14     	; 0x1490 <__divsf3_pse+0x2c>
    149e:	2b d0       	rcall	.+86     	; 0x14f6 <__divsf3_pse+0x92>
    14a0:	fe 2f       	mov	r31, r30
    14a2:	29 d0       	rcall	.+82     	; 0x14f6 <__divsf3_pse+0x92>
    14a4:	66 0f       	add	r22, r22
    14a6:	77 1f       	adc	r23, r23
    14a8:	88 1f       	adc	r24, r24
    14aa:	bb 1f       	adc	r27, r27
    14ac:	26 17       	cp	r18, r22
    14ae:	37 07       	cpc	r19, r23
    14b0:	48 07       	cpc	r20, r24
    14b2:	ab 07       	cpc	r26, r27
    14b4:	b0 e8       	ldi	r27, 0x80	; 128
    14b6:	09 f0       	breq	.+2      	; 0x14ba <__divsf3_pse+0x56>
    14b8:	bb 0b       	sbc	r27, r27
    14ba:	80 2d       	mov	r24, r0
    14bc:	bf 01       	movw	r22, r30
    14be:	ff 27       	eor	r31, r31
    14c0:	93 58       	subi	r25, 0x83	; 131
    14c2:	5f 4f       	sbci	r21, 0xFF	; 255
    14c4:	3a f0       	brmi	.+14     	; 0x14d4 <__divsf3_pse+0x70>
    14c6:	9e 3f       	cpi	r25, 0xFE	; 254
    14c8:	51 05       	cpc	r21, r1
    14ca:	78 f0       	brcs	.+30     	; 0x14ea <__divsf3_pse+0x86>
    14cc:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    14d0:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    14d4:	5f 3f       	cpi	r21, 0xFF	; 255
    14d6:	e4 f3       	brlt	.-8      	; 0x14d0 <__divsf3_pse+0x6c>
    14d8:	98 3e       	cpi	r25, 0xE8	; 232
    14da:	d4 f3       	brlt	.-12     	; 0x14d0 <__divsf3_pse+0x6c>
    14dc:	86 95       	lsr	r24
    14de:	77 95       	ror	r23
    14e0:	67 95       	ror	r22
    14e2:	b7 95       	ror	r27
    14e4:	f7 95       	ror	r31
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	c9 f7       	brne	.-14     	; 0x14dc <__divsf3_pse+0x78>
    14ea:	88 0f       	add	r24, r24
    14ec:	91 1d       	adc	r25, r1
    14ee:	96 95       	lsr	r25
    14f0:	87 95       	ror	r24
    14f2:	97 f9       	bld	r25, 7
    14f4:	08 95       	ret
    14f6:	e1 e0       	ldi	r30, 0x01	; 1
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	bb 1f       	adc	r27, r27
    1500:	62 17       	cp	r22, r18
    1502:	73 07       	cpc	r23, r19
    1504:	84 07       	cpc	r24, r20
    1506:	ba 07       	cpc	r27, r26
    1508:	20 f0       	brcs	.+8      	; 0x1512 <__divsf3_pse+0xae>
    150a:	62 1b       	sub	r22, r18
    150c:	73 0b       	sbc	r23, r19
    150e:	84 0b       	sbc	r24, r20
    1510:	ba 0b       	sbc	r27, r26
    1512:	ee 1f       	adc	r30, r30
    1514:	88 f7       	brcc	.-30     	; 0x14f8 <__divsf3_pse+0x94>
    1516:	e0 95       	com	r30
    1518:	08 95       	ret

0000151a <__fixsfsi>:
    151a:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fixunssfsi>
    151e:	68 94       	set
    1520:	b1 11       	cpse	r27, r1
    1522:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    1526:	08 95       	ret

00001528 <__fixunssfsi>:
    1528:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_splitA>
    152c:	88 f0       	brcs	.+34     	; 0x1550 <__fixunssfsi+0x28>
    152e:	9f 57       	subi	r25, 0x7F	; 127
    1530:	98 f0       	brcs	.+38     	; 0x1558 <__fixunssfsi+0x30>
    1532:	b9 2f       	mov	r27, r25
    1534:	99 27       	eor	r25, r25
    1536:	b7 51       	subi	r27, 0x17	; 23
    1538:	b0 f0       	brcs	.+44     	; 0x1566 <__fixunssfsi+0x3e>
    153a:	e1 f0       	breq	.+56     	; 0x1574 <__fixunssfsi+0x4c>
    153c:	66 0f       	add	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	88 1f       	adc	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	1a f0       	brmi	.+6      	; 0x154c <__fixunssfsi+0x24>
    1546:	ba 95       	dec	r27
    1548:	c9 f7       	brne	.-14     	; 0x153c <__fixunssfsi+0x14>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <__fixunssfsi+0x4c>
    154c:	b1 30       	cpi	r27, 0x01	; 1
    154e:	91 f0       	breq	.+36     	; 0x1574 <__fixunssfsi+0x4c>
    1550:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_zero>
    1554:	b1 e0       	ldi	r27, 0x01	; 1
    1556:	08 95       	ret
    1558:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_zero>
    155c:	67 2f       	mov	r22, r23
    155e:	78 2f       	mov	r23, r24
    1560:	88 27       	eor	r24, r24
    1562:	b8 5f       	subi	r27, 0xF8	; 248
    1564:	39 f0       	breq	.+14     	; 0x1574 <__fixunssfsi+0x4c>
    1566:	b9 3f       	cpi	r27, 0xF9	; 249
    1568:	cc f3       	brlt	.-14     	; 0x155c <__fixunssfsi+0x34>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b3 95       	inc	r27
    1572:	d9 f7       	brne	.-10     	; 0x156a <__fixunssfsi+0x42>
    1574:	3e f4       	brtc	.+14     	; 0x1584 <__fixunssfsi+0x5c>
    1576:	90 95       	com	r25
    1578:	80 95       	com	r24
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__floatunsisf>:
    1586:	e8 94       	clt
    1588:	09 c0       	rjmp	.+18     	; 0x159c <__floatsisf+0x12>

0000158a <__floatsisf>:
    158a:	97 fb       	bst	r25, 7
    158c:	3e f4       	brtc	.+14     	; 0x159c <__floatsisf+0x12>
    158e:	90 95       	com	r25
    1590:	80 95       	com	r24
    1592:	70 95       	com	r23
    1594:	61 95       	neg	r22
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	99 23       	and	r25, r25
    159e:	a9 f0       	breq	.+42     	; 0x15ca <__floatsisf+0x40>
    15a0:	f9 2f       	mov	r31, r25
    15a2:	96 e9       	ldi	r25, 0x96	; 150
    15a4:	bb 27       	eor	r27, r27
    15a6:	93 95       	inc	r25
    15a8:	f6 95       	lsr	r31
    15aa:	87 95       	ror	r24
    15ac:	77 95       	ror	r23
    15ae:	67 95       	ror	r22
    15b0:	b7 95       	ror	r27
    15b2:	f1 11       	cpse	r31, r1
    15b4:	f8 cf       	rjmp	.-16     	; 0x15a6 <__floatsisf+0x1c>
    15b6:	fa f4       	brpl	.+62     	; 0x15f6 <__floatsisf+0x6c>
    15b8:	bb 0f       	add	r27, r27
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <__floatsisf+0x36>
    15bc:	60 ff       	sbrs	r22, 0
    15be:	1b c0       	rjmp	.+54     	; 0x15f6 <__floatsisf+0x6c>
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	16 c0       	rjmp	.+44     	; 0x15f6 <__floatsisf+0x6c>
    15ca:	88 23       	and	r24, r24
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <__floatsisf+0x48>
    15ce:	96 e9       	ldi	r25, 0x96	; 150
    15d0:	11 c0       	rjmp	.+34     	; 0x15f4 <__floatsisf+0x6a>
    15d2:	77 23       	and	r23, r23
    15d4:	21 f0       	breq	.+8      	; 0x15de <__floatsisf+0x54>
    15d6:	9e e8       	ldi	r25, 0x8E	; 142
    15d8:	87 2f       	mov	r24, r23
    15da:	76 2f       	mov	r23, r22
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <__floatsisf+0x5e>
    15de:	66 23       	and	r22, r22
    15e0:	71 f0       	breq	.+28     	; 0x15fe <__floatsisf+0x74>
    15e2:	96 e8       	ldi	r25, 0x86	; 134
    15e4:	86 2f       	mov	r24, r22
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	2a f0       	brmi	.+10     	; 0x15f6 <__floatsisf+0x6c>
    15ec:	9a 95       	dec	r25
    15ee:	66 0f       	add	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	88 1f       	adc	r24, r24
    15f4:	da f7       	brpl	.-10     	; 0x15ec <__floatsisf+0x62>
    15f6:	88 0f       	add	r24, r24
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	97 f9       	bld	r25, 7
    15fe:	08 95       	ret

00001600 <__fp_cmp>:
    1600:	99 0f       	add	r25, r25
    1602:	00 08       	sbc	r0, r0
    1604:	55 0f       	add	r21, r21
    1606:	aa 0b       	sbc	r26, r26
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	fe ef       	ldi	r31, 0xFE	; 254
    160c:	16 16       	cp	r1, r22
    160e:	17 06       	cpc	r1, r23
    1610:	e8 07       	cpc	r30, r24
    1612:	f9 07       	cpc	r31, r25
    1614:	c0 f0       	brcs	.+48     	; 0x1646 <__fp_cmp+0x46>
    1616:	12 16       	cp	r1, r18
    1618:	13 06       	cpc	r1, r19
    161a:	e4 07       	cpc	r30, r20
    161c:	f5 07       	cpc	r31, r21
    161e:	98 f0       	brcs	.+38     	; 0x1646 <__fp_cmp+0x46>
    1620:	62 1b       	sub	r22, r18
    1622:	73 0b       	sbc	r23, r19
    1624:	84 0b       	sbc	r24, r20
    1626:	95 0b       	sbc	r25, r21
    1628:	39 f4       	brne	.+14     	; 0x1638 <__fp_cmp+0x38>
    162a:	0a 26       	eor	r0, r26
    162c:	61 f0       	breq	.+24     	; 0x1646 <__fp_cmp+0x46>
    162e:	23 2b       	or	r18, r19
    1630:	24 2b       	or	r18, r20
    1632:	25 2b       	or	r18, r21
    1634:	21 f4       	brne	.+8      	; 0x163e <__fp_cmp+0x3e>
    1636:	08 95       	ret
    1638:	0a 26       	eor	r0, r26
    163a:	09 f4       	brne	.+2      	; 0x163e <__fp_cmp+0x3e>
    163c:	a1 40       	sbci	r26, 0x01	; 1
    163e:	a6 95       	lsr	r26
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	81 1d       	adc	r24, r1
    1644:	81 1d       	adc	r24, r1
    1646:	08 95       	ret

00001648 <__fp_inf>:
    1648:	97 f9       	bld	r25, 7
    164a:	9f 67       	ori	r25, 0x7F	; 127
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	08 95       	ret

00001654 <__fp_nan>:
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	80 ec       	ldi	r24, 0xC0	; 192
    1658:	08 95       	ret

0000165a <__fp_pscA>:
    165a:	00 24       	eor	r0, r0
    165c:	0a 94       	dec	r0
    165e:	16 16       	cp	r1, r22
    1660:	17 06       	cpc	r1, r23
    1662:	18 06       	cpc	r1, r24
    1664:	09 06       	cpc	r0, r25
    1666:	08 95       	ret

00001668 <__fp_pscB>:
    1668:	00 24       	eor	r0, r0
    166a:	0a 94       	dec	r0
    166c:	12 16       	cp	r1, r18
    166e:	13 06       	cpc	r1, r19
    1670:	14 06       	cpc	r1, r20
    1672:	05 06       	cpc	r0, r21
    1674:	08 95       	ret

00001676 <__fp_round>:
    1676:	09 2e       	mov	r0, r25
    1678:	03 94       	inc	r0
    167a:	00 0c       	add	r0, r0
    167c:	11 f4       	brne	.+4      	; 0x1682 <__fp_round+0xc>
    167e:	88 23       	and	r24, r24
    1680:	52 f0       	brmi	.+20     	; 0x1696 <__fp_round+0x20>
    1682:	bb 0f       	add	r27, r27
    1684:	40 f4       	brcc	.+16     	; 0x1696 <__fp_round+0x20>
    1686:	bf 2b       	or	r27, r31
    1688:	11 f4       	brne	.+4      	; 0x168e <__fp_round+0x18>
    168a:	60 ff       	sbrs	r22, 0
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <__fp_round+0x20>
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	08 95       	ret

00001698 <__fp_split3>:
    1698:	57 fd       	sbrc	r21, 7
    169a:	90 58       	subi	r25, 0x80	; 128
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <__fp_splitA+0x10>
    16a2:	5f 3f       	cpi	r21, 0xFF	; 255
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <__fp_splitA+0x1a>
    16a6:	47 95       	ror	r20

000016a8 <__fp_splitA>:
    16a8:	88 0f       	add	r24, r24
    16aa:	97 fb       	bst	r25, 7
    16ac:	99 1f       	adc	r25, r25
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <__fp_splitA+0x20>
    16b0:	9f 3f       	cpi	r25, 0xFF	; 255
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <__fp_splitA+0x2a>
    16b4:	87 95       	ror	r24
    16b6:	08 95       	ret
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	14 06       	cpc	r1, r20
    16be:	55 1f       	adc	r21, r21
    16c0:	f2 cf       	rjmp	.-28     	; 0x16a6 <__fp_split3+0xe>
    16c2:	46 95       	lsr	r20
    16c4:	f1 df       	rcall	.-30     	; 0x16a8 <__fp_splitA>
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <__fp_splitA+0x30>
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	18 06       	cpc	r1, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	f1 cf       	rjmp	.-30     	; 0x16b4 <__fp_splitA+0xc>
    16d2:	86 95       	lsr	r24
    16d4:	71 05       	cpc	r23, r1
    16d6:	61 05       	cpc	r22, r1
    16d8:	08 94       	sec
    16da:	08 95       	ret

000016dc <__fp_zero>:
    16dc:	e8 94       	clt

000016de <__fp_szero>:
    16de:	bb 27       	eor	r27, r27
    16e0:	66 27       	eor	r22, r22
    16e2:	77 27       	eor	r23, r23
    16e4:	cb 01       	movw	r24, r22
    16e6:	97 f9       	bld	r25, 7
    16e8:	08 95       	ret

000016ea <__mulsf3>:
    16ea:	0e 94 88 0b 	call	0x1710	; 0x1710 <__mulsf3x>
    16ee:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>
    16f2:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscA>
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <__mulsf3+0x1c>
    16f8:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__mulsf3+0x1c>
    16fe:	95 23       	and	r25, r21
    1700:	11 f0       	breq	.+4      	; 0x1706 <__mulsf3+0x1c>
    1702:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    1706:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    170a:	11 24       	eor	r1, r1
    170c:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>

00001710 <__mulsf3x>:
    1710:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_split3>
    1714:	70 f3       	brcs	.-36     	; 0x16f2 <__mulsf3+0x8>

00001716 <__mulsf3_pse>:
    1716:	95 9f       	mul	r25, r21
    1718:	c1 f3       	breq	.-16     	; 0x170a <__mulsf3+0x20>
    171a:	95 0f       	add	r25, r21
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	55 1f       	adc	r21, r21
    1720:	62 9f       	mul	r22, r18
    1722:	f0 01       	movw	r30, r0
    1724:	72 9f       	mul	r23, r18
    1726:	bb 27       	eor	r27, r27
    1728:	f0 0d       	add	r31, r0
    172a:	b1 1d       	adc	r27, r1
    172c:	63 9f       	mul	r22, r19
    172e:	aa 27       	eor	r26, r26
    1730:	f0 0d       	add	r31, r0
    1732:	b1 1d       	adc	r27, r1
    1734:	aa 1f       	adc	r26, r26
    1736:	64 9f       	mul	r22, r20
    1738:	66 27       	eor	r22, r22
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	66 1f       	adc	r22, r22
    1740:	82 9f       	mul	r24, r18
    1742:	22 27       	eor	r18, r18
    1744:	b0 0d       	add	r27, r0
    1746:	a1 1d       	adc	r26, r1
    1748:	62 1f       	adc	r22, r18
    174a:	73 9f       	mul	r23, r19
    174c:	b0 0d       	add	r27, r0
    174e:	a1 1d       	adc	r26, r1
    1750:	62 1f       	adc	r22, r18
    1752:	83 9f       	mul	r24, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	22 1f       	adc	r18, r18
    175a:	74 9f       	mul	r23, r20
    175c:	33 27       	eor	r19, r19
    175e:	a0 0d       	add	r26, r0
    1760:	61 1d       	adc	r22, r1
    1762:	23 1f       	adc	r18, r19
    1764:	84 9f       	mul	r24, r20
    1766:	60 0d       	add	r22, r0
    1768:	21 1d       	adc	r18, r1
    176a:	82 2f       	mov	r24, r18
    176c:	76 2f       	mov	r23, r22
    176e:	6a 2f       	mov	r22, r26
    1770:	11 24       	eor	r1, r1
    1772:	9f 57       	subi	r25, 0x7F	; 127
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	9a f0       	brmi	.+38     	; 0x179e <__mulsf3_pse+0x88>
    1778:	f1 f0       	breq	.+60     	; 0x17b6 <__mulsf3_pse+0xa0>
    177a:	88 23       	and	r24, r24
    177c:	4a f0       	brmi	.+18     	; 0x1790 <__mulsf3_pse+0x7a>
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	bb 1f       	adc	r27, r27
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	91 50       	subi	r25, 0x01	; 1
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	a9 f7       	brne	.-22     	; 0x177a <__mulsf3_pse+0x64>
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	51 05       	cpc	r21, r1
    1794:	80 f0       	brcs	.+32     	; 0x17b6 <__mulsf3_pse+0xa0>
    1796:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    179a:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	e4 f3       	brlt	.-8      	; 0x179a <__mulsf3_pse+0x84>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	d4 f3       	brlt	.-12     	; 0x179a <__mulsf3_pse+0x84>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	e7 95       	ror	r30
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	c1 f7       	brne	.-16     	; 0x17a6 <__mulsf3_pse+0x90>
    17b6:	fe 2b       	or	r31, r30
    17b8:	88 0f       	add	r24, r24
    17ba:	91 1d       	adc	r25, r1
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <pow>:
    17c4:	fa 01       	movw	r30, r20
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	30 96       	adiw	r30, 0x00	; 0
    17cc:	21 05       	cpc	r18, r1
    17ce:	31 05       	cpc	r19, r1
    17d0:	a1 f1       	breq	.+104    	; 0x183a <pow+0x76>
    17d2:	61 15       	cp	r22, r1
    17d4:	71 05       	cpc	r23, r1
    17d6:	61 f4       	brne	.+24     	; 0x17f0 <pow+0x2c>
    17d8:	80 38       	cpi	r24, 0x80	; 128
    17da:	bf e3       	ldi	r27, 0x3F	; 63
    17dc:	9b 07       	cpc	r25, r27
    17de:	49 f1       	breq	.+82     	; 0x1832 <pow+0x6e>
    17e0:	68 94       	set
    17e2:	90 38       	cpi	r25, 0x80	; 128
    17e4:	81 05       	cpc	r24, r1
    17e6:	61 f0       	breq	.+24     	; 0x1800 <pow+0x3c>
    17e8:	80 38       	cpi	r24, 0x80	; 128
    17ea:	bf ef       	ldi	r27, 0xFF	; 255
    17ec:	9b 07       	cpc	r25, r27
    17ee:	41 f0       	breq	.+16     	; 0x1800 <pow+0x3c>
    17f0:	99 23       	and	r25, r25
    17f2:	4a f5       	brpl	.+82     	; 0x1846 <pow+0x82>
    17f4:	ff 3f       	cpi	r31, 0xFF	; 255
    17f6:	e1 05       	cpc	r30, r1
    17f8:	31 05       	cpc	r19, r1
    17fa:	21 05       	cpc	r18, r1
    17fc:	19 f1       	breq	.+70     	; 0x1844 <pow+0x80>
    17fe:	e8 94       	clt
    1800:	08 94       	sec
    1802:	e7 95       	ror	r30
    1804:	d9 01       	movw	r26, r18
    1806:	aa 23       	and	r26, r26
    1808:	29 f4       	brne	.+10     	; 0x1814 <pow+0x50>
    180a:	ab 2f       	mov	r26, r27
    180c:	be 2f       	mov	r27, r30
    180e:	f8 5f       	subi	r31, 0xF8	; 248
    1810:	d0 f3       	brcs	.-12     	; 0x1806 <pow+0x42>
    1812:	10 c0       	rjmp	.+32     	; 0x1834 <pow+0x70>
    1814:	ff 5f       	subi	r31, 0xFF	; 255
    1816:	70 f4       	brcc	.+28     	; 0x1834 <pow+0x70>
    1818:	a6 95       	lsr	r26
    181a:	e0 f7       	brcc	.-8      	; 0x1814 <pow+0x50>
    181c:	f7 39       	cpi	r31, 0x97	; 151
    181e:	50 f0       	brcs	.+20     	; 0x1834 <pow+0x70>
    1820:	19 f0       	breq	.+6      	; 0x1828 <pow+0x64>
    1822:	ff 3a       	cpi	r31, 0xAF	; 175
    1824:	38 f4       	brcc	.+14     	; 0x1834 <pow+0x70>
    1826:	9f 77       	andi	r25, 0x7F	; 127
    1828:	9f 93       	push	r25
    182a:	0d d0       	rcall	.+26     	; 0x1846 <pow+0x82>
    182c:	0f 90       	pop	r0
    182e:	07 fc       	sbrc	r0, 7
    1830:	90 58       	subi	r25, 0x80	; 128
    1832:	08 95       	ret
    1834:	46 f0       	brts	.+16     	; 0x1846 <pow+0x82>
    1836:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	9f e3       	ldi	r25, 0x3F	; 63
    1842:	08 95       	ret
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	9f 77       	andi	r25, 0x7F	; 127
    1848:	5f 93       	push	r21
    184a:	4f 93       	push	r20
    184c:	3f 93       	push	r19
    184e:	2f 93       	push	r18
    1850:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <log>
    1854:	2f 91       	pop	r18
    1856:	3f 91       	pop	r19
    1858:	4f 91       	pop	r20
    185a:	5f 91       	pop	r21
    185c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
    1860:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <exp>
    1864:	29 f4       	brne	.+10     	; 0x1870 <pow+0xac>
    1866:	16 f0       	brts	.+4      	; 0x186c <pow+0xa8>
    1868:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    186c:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_zero>
    1870:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>

00001874 <exp>:
    1874:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_splitA>
    1878:	a8 f3       	brcs	.-22     	; 0x1864 <pow+0xa0>
    187a:	96 38       	cpi	r25, 0x86	; 134
    187c:	a0 f7       	brcc	.-24     	; 0x1866 <pow+0xa2>
    187e:	07 f8       	bld	r0, 7
    1880:	0f 92       	push	r0
    1882:	e8 94       	clt
    1884:	2b e3       	ldi	r18, 0x3B	; 59
    1886:	3a ea       	ldi	r19, 0xAA	; 170
    1888:	48 eb       	ldi	r20, 0xB8	; 184
    188a:	5f e7       	ldi	r21, 0x7F	; 127
    188c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__mulsf3_pse>
    1890:	0f 92       	push	r0
    1892:	0f 92       	push	r0
    1894:	0f 92       	push	r0
    1896:	4d b7       	in	r20, 0x3d	; 61
    1898:	5e b7       	in	r21, 0x3e	; 62
    189a:	0f 92       	push	r0
    189c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <modf>
    18a0:	e4 e5       	ldi	r30, 0x54	; 84
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_powser>
    18a8:	4f 91       	pop	r20
    18aa:	5f 91       	pop	r21
    18ac:	ef 91       	pop	r30
    18ae:	ff 91       	pop	r31
    18b0:	e5 95       	asr	r30
    18b2:	ee 1f       	adc	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	49 f0       	breq	.+18     	; 0x18ca <exp+0x56>
    18b8:	fe 57       	subi	r31, 0x7E	; 126
    18ba:	e0 68       	ori	r30, 0x80	; 128
    18bc:	44 27       	eor	r20, r20
    18be:	ee 0f       	add	r30, r30
    18c0:	44 1f       	adc	r20, r20
    18c2:	fa 95       	dec	r31
    18c4:	e1 f7       	brne	.-8      	; 0x18be <exp+0x4a>
    18c6:	41 95       	neg	r20
    18c8:	55 0b       	sbc	r21, r21
    18ca:	0e 94 9f 0c 	call	0x193e	; 0x193e <ldexp>
    18ce:	0f 90       	pop	r0
    18d0:	07 fe       	sbrs	r0, 7
    18d2:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <inverse>
    18d6:	08 95       	ret

000018d8 <__fp_powser>:
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	1f 93       	push	r17
    18de:	0f 93       	push	r16
    18e0:	ff 92       	push	r15
    18e2:	ef 92       	push	r14
    18e4:	df 92       	push	r13
    18e6:	7b 01       	movw	r14, r22
    18e8:	8c 01       	movw	r16, r24
    18ea:	68 94       	set
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <__fp_powser+0x22>
    18ee:	da 2e       	mov	r13, r26
    18f0:	ef 01       	movw	r28, r30
    18f2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__mulsf3x>
    18f6:	fe 01       	movw	r30, r28
    18f8:	e8 94       	clt
    18fa:	a5 91       	lpm	r26, Z+
    18fc:	25 91       	lpm	r18, Z+
    18fe:	35 91       	lpm	r19, Z+
    1900:	45 91       	lpm	r20, Z+
    1902:	55 91       	lpm	r21, Z+
    1904:	a6 f3       	brts	.-24     	; 0x18ee <__fp_powser+0x16>
    1906:	ef 01       	movw	r28, r30
    1908:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3x>
    190c:	fe 01       	movw	r30, r28
    190e:	97 01       	movw	r18, r14
    1910:	a8 01       	movw	r20, r16
    1912:	da 94       	dec	r13
    1914:	69 f7       	brne	.-38     	; 0x18f0 <__fp_powser+0x18>
    1916:	df 90       	pop	r13
    1918:	ef 90       	pop	r14
    191a:	ff 90       	pop	r15
    191c:	0f 91       	pop	r16
    191e:	1f 91       	pop	r17
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <inverse>:
    1926:	9b 01       	movw	r18, r22
    1928:	ac 01       	movw	r20, r24
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	80 e8       	ldi	r24, 0x80	; 128
    1930:	9f e3       	ldi	r25, 0x3F	; 63
    1932:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__divsf3>
    1936:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    193a:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_mpack>

0000193e <ldexp>:
    193e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_splitA>
    1942:	d8 f3       	brcs	.-10     	; 0x193a <inverse+0x14>
    1944:	99 23       	and	r25, r25
    1946:	c9 f3       	breq	.-14     	; 0x193a <inverse+0x14>
    1948:	94 0f       	add	r25, r20
    194a:	51 1d       	adc	r21, r1
    194c:	a3 f3       	brvs	.-24     	; 0x1936 <inverse+0x10>
    194e:	91 50       	subi	r25, 0x01	; 1
    1950:	50 40       	sbci	r21, 0x00	; 0
    1952:	94 f0       	brlt	.+36     	; 0x1978 <ldexp+0x3a>
    1954:	59 f0       	breq	.+22     	; 0x196c <ldexp+0x2e>
    1956:	88 23       	and	r24, r24
    1958:	32 f0       	brmi	.+12     	; 0x1966 <ldexp+0x28>
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	c1 f7       	brne	.-16     	; 0x1956 <ldexp+0x18>
    1966:	9e 3f       	cpi	r25, 0xFE	; 254
    1968:	51 05       	cpc	r21, r1
    196a:	2c f7       	brge	.-54     	; 0x1936 <inverse+0x10>
    196c:	88 0f       	add	r24, r24
    196e:	91 1d       	adc	r25, r1
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	97 f9       	bld	r25, 7
    1976:	08 95       	ret
    1978:	5f 3f       	cpi	r21, 0xFF	; 255
    197a:	ac f0       	brlt	.+42     	; 0x19a6 <ldexp+0x68>
    197c:	98 3e       	cpi	r25, 0xE8	; 232
    197e:	9c f0       	brlt	.+38     	; 0x19a6 <ldexp+0x68>
    1980:	bb 27       	eor	r27, r27
    1982:	86 95       	lsr	r24
    1984:	77 95       	ror	r23
    1986:	67 95       	ror	r22
    1988:	b7 95       	ror	r27
    198a:	08 f4       	brcc	.+2      	; 0x198e <ldexp+0x50>
    198c:	b1 60       	ori	r27, 0x01	; 1
    198e:	93 95       	inc	r25
    1990:	c1 f7       	brne	.-16     	; 0x1982 <ldexp+0x44>
    1992:	bb 0f       	add	r27, r27
    1994:	58 f7       	brcc	.-42     	; 0x196c <ldexp+0x2e>
    1996:	11 f4       	brne	.+4      	; 0x199c <ldexp+0x5e>
    1998:	60 ff       	sbrs	r22, 0
    199a:	e8 cf       	rjmp	.-48     	; 0x196c <ldexp+0x2e>
    199c:	6f 5f       	subi	r22, 0xFF	; 255
    199e:	7f 4f       	sbci	r23, 0xFF	; 255
    19a0:	8f 4f       	sbci	r24, 0xFF	; 255
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	e3 cf       	rjmp	.-58     	; 0x196c <ldexp+0x2e>
    19a6:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    19aa:	16 f0       	brts	.+4      	; 0x19b0 <ldexp+0x72>
    19ac:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__fp_mpack>
    19b0:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    19b4:	68 94       	set
    19b6:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>

000019ba <log>:
    19ba:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_splitA>
    19be:	a8 f3       	brcs	.-22     	; 0x19aa <ldexp+0x6c>
    19c0:	99 23       	and	r25, r25
    19c2:	c1 f3       	breq	.-16     	; 0x19b4 <ldexp+0x76>
    19c4:	ae f3       	brts	.-22     	; 0x19b0 <ldexp+0x72>
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	1f 93       	push	r17
    19cc:	0f 93       	push	r16
    19ce:	ff 92       	push	r15
    19d0:	c9 2f       	mov	r28, r25
    19d2:	dd 27       	eor	r29, r29
    19d4:	88 23       	and	r24, r24
    19d6:	2a f0       	brmi	.+10     	; 0x19e2 <log+0x28>
    19d8:	21 97       	sbiw	r28, 0x01	; 1
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	da f7       	brpl	.-10     	; 0x19d8 <log+0x1e>
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f eb       	ldi	r21, 0xBF	; 191
    19ea:	9f e3       	ldi	r25, 0x3F	; 63
    19ec:	88 39       	cpi	r24, 0x98	; 152
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <log+0x3e>
    19f0:	80 3e       	cpi	r24, 0xE0	; 224
    19f2:	38 f0       	brcs	.+14     	; 0x1a02 <log+0x48>
    19f4:	21 96       	adiw	r28, 0x01	; 1
    19f6:	8f 77       	andi	r24, 0x7F	; 127
    19f8:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
    19fc:	ec e7       	ldi	r30, 0x7C	; 124
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <log+0x50>
    1a02:	0e 94 aa 09 	call	0x1354	; 0x1354 <__addsf3>
    1a06:	e9 ea       	ldi	r30, 0xA9	; 169
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__fp_powser>
    1a0e:	8b 01       	movw	r16, r22
    1a10:	be 01       	movw	r22, r28
    1a12:	ec 01       	movw	r28, r24
    1a14:	fb 2e       	mov	r15, r27
    1a16:	6f 57       	subi	r22, 0x7F	; 127
    1a18:	71 09       	sbc	r23, r1
    1a1a:	75 95       	asr	r23
    1a1c:	77 1f       	adc	r23, r23
    1a1e:	88 0b       	sbc	r24, r24
    1a20:	99 0b       	sbc	r25, r25
    1a22:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
    1a26:	28 e1       	ldi	r18, 0x18	; 24
    1a28:	32 e7       	ldi	r19, 0x72	; 114
    1a2a:	41 e3       	ldi	r20, 0x31	; 49
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 88 0b 	call	0x1710	; 0x1710 <__mulsf3x>
    1a32:	af 2d       	mov	r26, r15
    1a34:	98 01       	movw	r18, r16
    1a36:	ae 01       	movw	r20, r28
    1a38:	ff 90       	pop	r15
    1a3a:	0f 91       	pop	r16
    1a3c:	1f 91       	pop	r17
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3x>
    1a46:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>

00001a4a <modf>:
    1a4a:	fa 01       	movw	r30, r20
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	aa 0f       	add	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	9b 01       	movw	r18, r22
    1a54:	ac 01       	movw	r20, r24
    1a56:	bf 57       	subi	r27, 0x7F	; 127
    1a58:	28 f4       	brcc	.+10     	; 0x1a64 <modf+0x1a>
    1a5a:	22 27       	eor	r18, r18
    1a5c:	33 27       	eor	r19, r19
    1a5e:	44 27       	eor	r20, r20
    1a60:	50 78       	andi	r21, 0x80	; 128
    1a62:	20 c0       	rjmp	.+64     	; 0x1aa4 <modf+0x5a>
    1a64:	b7 51       	subi	r27, 0x17	; 23
    1a66:	90 f4       	brcc	.+36     	; 0x1a8c <modf+0x42>
    1a68:	ab 2f       	mov	r26, r27
    1a6a:	00 24       	eor	r0, r0
    1a6c:	46 95       	lsr	r20
    1a6e:	37 95       	ror	r19
    1a70:	27 95       	ror	r18
    1a72:	01 1c       	adc	r0, r1
    1a74:	a3 95       	inc	r26
    1a76:	d2 f3       	brmi	.-12     	; 0x1a6c <modf+0x22>
    1a78:	00 20       	and	r0, r0
    1a7a:	71 f0       	breq	.+28     	; 0x1a98 <modf+0x4e>
    1a7c:	22 0f       	add	r18, r18
    1a7e:	33 1f       	adc	r19, r19
    1a80:	44 1f       	adc	r20, r20
    1a82:	b3 95       	inc	r27
    1a84:	da f3       	brmi	.-10     	; 0x1a7c <modf+0x32>
    1a86:	0e d0       	rcall	.+28     	; 0x1aa4 <modf+0x5a>
    1a88:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__subsf3>
    1a8c:	61 30       	cpi	r22, 0x01	; 1
    1a8e:	71 05       	cpc	r23, r1
    1a90:	a0 e8       	ldi	r26, 0x80	; 128
    1a92:	8a 07       	cpc	r24, r26
    1a94:	b9 46       	sbci	r27, 0x69	; 105
    1a96:	30 f4       	brcc	.+12     	; 0x1aa4 <modf+0x5a>
    1a98:	9b 01       	movw	r18, r22
    1a9a:	ac 01       	movw	r20, r24
    1a9c:	66 27       	eor	r22, r22
    1a9e:	77 27       	eor	r23, r23
    1aa0:	88 27       	eor	r24, r24
    1aa2:	90 78       	andi	r25, 0x80	; 128
    1aa4:	30 96       	adiw	r30, 0x00	; 0
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <modf+0x66>
    1aa8:	20 83       	st	Z, r18
    1aaa:	31 83       	std	Z+1, r19	; 0x01
    1aac:	42 83       	std	Z+2, r20	; 0x02
    1aae:	53 83       	std	Z+3, r21	; 0x03
    1ab0:	08 95       	ret

00001ab2 <__fp_mpack>:
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <__fp_mpack_finite+0xc>

00001ab6 <__fp_mpack_finite>:
    1ab6:	91 50       	subi	r25, 0x01	; 1
    1ab8:	20 f4       	brcc	.+8      	; 0x1ac2 <__fp_mpack_finite+0xc>
    1aba:	87 95       	ror	r24
    1abc:	77 95       	ror	r23
    1abe:	67 95       	ror	r22
    1ac0:	b7 95       	ror	r27
    1ac2:	88 0f       	add	r24, r24
    1ac4:	91 1d       	adc	r25, r1
    1ac6:	96 95       	lsr	r25
    1ac8:	87 95       	ror	r24
    1aca:	97 f9       	bld	r25, 7
    1acc:	08 95       	ret

00001ace <__divmodhi4>:
    1ace:	97 fb       	bst	r25, 7
    1ad0:	07 2e       	mov	r0, r23
    1ad2:	16 f4       	brtc	.+4      	; 0x1ad8 <__divmodhi4+0xa>
    1ad4:	00 94       	com	r0
    1ad6:	07 d0       	rcall	.+14     	; 0x1ae6 <__divmodhi4_neg1>
    1ad8:	77 fd       	sbrc	r23, 7
    1ada:	09 d0       	rcall	.+18     	; 0x1aee <__divmodhi4_neg2>
    1adc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodhi4>
    1ae0:	07 fc       	sbrc	r0, 7
    1ae2:	05 d0       	rcall	.+10     	; 0x1aee <__divmodhi4_neg2>
    1ae4:	3e f4       	brtc	.+14     	; 0x1af4 <__divmodhi4_exit>

00001ae6 <__divmodhi4_neg1>:
    1ae6:	90 95       	com	r25
    1ae8:	81 95       	neg	r24
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__divmodhi4_neg2>:
    1aee:	70 95       	com	r23
    1af0:	61 95       	neg	r22
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255

00001af4 <__divmodhi4_exit>:
    1af4:	08 95       	ret

00001af6 <__udivmodhi4>:
    1af6:	aa 1b       	sub	r26, r26
    1af8:	bb 1b       	sub	r27, r27
    1afa:	51 e1       	ldi	r21, 0x11	; 17
    1afc:	07 c0       	rjmp	.+14     	; 0x1b0c <__udivmodhi4_ep>

00001afe <__udivmodhi4_loop>:
    1afe:	aa 1f       	adc	r26, r26
    1b00:	bb 1f       	adc	r27, r27
    1b02:	a6 17       	cp	r26, r22
    1b04:	b7 07       	cpc	r27, r23
    1b06:	10 f0       	brcs	.+4      	; 0x1b0c <__udivmodhi4_ep>
    1b08:	a6 1b       	sub	r26, r22
    1b0a:	b7 0b       	sbc	r27, r23

00001b0c <__udivmodhi4_ep>:
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	5a 95       	dec	r21
    1b12:	a9 f7       	brne	.-22     	; 0x1afe <__udivmodhi4_loop>
    1b14:	80 95       	com	r24
    1b16:	90 95       	com	r25
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	08 95       	ret

00001b1e <__tablejump2__>:
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	05 90       	lpm	r0, Z+
    1b24:	f4 91       	lpm	r31, Z
    1b26:	e0 2d       	mov	r30, r0
    1b28:	09 94       	ijmp

00001b2a <__itoa_ncheck>:
    1b2a:	bb 27       	eor	r27, r27
    1b2c:	4a 30       	cpi	r20, 0x0A	; 10
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <__itoa_ncheck+0x12>
    1b30:	99 23       	and	r25, r25
    1b32:	22 f4       	brpl	.+8      	; 0x1b3c <__itoa_ncheck+0x12>
    1b34:	bd e2       	ldi	r27, 0x2D	; 45
    1b36:	90 95       	com	r25
    1b38:	81 95       	neg	r24
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__utoa_common>

00001b40 <__utoa_ncheck>:
    1b40:	bb 27       	eor	r27, r27

00001b42 <__utoa_common>:
    1b42:	fb 01       	movw	r30, r22
    1b44:	55 27       	eor	r21, r21
    1b46:	aa 27       	eor	r26, r26
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	aa 1f       	adc	r26, r26
    1b4e:	a4 17       	cp	r26, r20
    1b50:	10 f0       	brcs	.+4      	; 0x1b56 <__utoa_common+0x14>
    1b52:	a4 1b       	sub	r26, r20
    1b54:	83 95       	inc	r24
    1b56:	50 51       	subi	r21, 0x10	; 16
    1b58:	b9 f7       	brne	.-18     	; 0x1b48 <__utoa_common+0x6>
    1b5a:	a0 5d       	subi	r26, 0xD0	; 208
    1b5c:	aa 33       	cpi	r26, 0x3A	; 58
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <__utoa_common+0x20>
    1b60:	a9 5d       	subi	r26, 0xD9	; 217
    1b62:	a1 93       	st	Z+, r26
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	79 f7       	brne	.-34     	; 0x1b46 <__utoa_common+0x4>
    1b68:	b1 11       	cpse	r27, r1
    1b6a:	b1 93       	st	Z+, r27
    1b6c:	11 92       	st	Z+, r1
    1b6e:	cb 01       	movw	r24, r22
    1b70:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <strrev>

00001b74 <strrev>:
    1b74:	dc 01       	movw	r26, r24
    1b76:	fc 01       	movw	r30, r24
    1b78:	67 2f       	mov	r22, r23
    1b7a:	71 91       	ld	r23, Z+
    1b7c:	77 23       	and	r23, r23
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <strrev+0x4>
    1b80:	32 97       	sbiw	r30, 0x02	; 2
    1b82:	04 c0       	rjmp	.+8      	; 0x1b8c <strrev+0x18>
    1b84:	7c 91       	ld	r23, X
    1b86:	6d 93       	st	X+, r22
    1b88:	70 83       	st	Z, r23
    1b8a:	62 91       	ld	r22, -Z
    1b8c:	ae 17       	cp	r26, r30
    1b8e:	bf 07       	cpc	r27, r31
    1b90:	c8 f3       	brcs	.-14     	; 0x1b84 <strrev+0x10>
    1b92:	08 95       	ret

00001b94 <_exit>:
    1b94:	f8 94       	cli

00001b96 <__stop_program>:
    1b96:	ff cf       	rjmp	.-2      	; 0x1b96 <__stop_program>
