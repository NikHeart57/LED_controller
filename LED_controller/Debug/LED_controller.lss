
LED_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000057c  00800060  00001e18  00001eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008005dc  008005dc  00002428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b3e  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b92  00000000  00000000  0000609a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001220  00000000  00000000  00006c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00007e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  00008138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e1  00000000  00000000  00008977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00009f58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_1>
       8:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_2>
       c:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_3>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_7>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_start>:
      d6:	28 08       	sbc	r2, r8

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	15 e0       	ldi	r17, 0x05	; 5
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e8 e1       	ldi	r30, 0x18	; 24
      ec:	fe e1       	ldi	r31, 0x1E	; 30
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	ac 3d       	cpi	r26, 0xDC	; 220
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	25 e0       	ldi	r18, 0x05	; 5
      fc:	ac ed       	ldi	r26, 0xDC	; 220
      fe:	b5 e0       	ldi	r27, 0x05	; 5
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	ac 3f       	cpi	r26, 0xFC	; 252
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 0d 06 	call	0xc1a	; 0xc1a <main>
     124:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN6DS13079writeTimeEPc>:
	//==============================================================================
	// Адрес часов слейв на запись W	0b11010000
	// Адрес часов слейв на чтение R	0b11010001
	
	void writeTime(char time[])
	{
     12c:	fc 01       	movw	r30, r24
		
	//  Функции мастера трансмиттера  //
		
	inline void I2CMTinit(void)
	{
		TWBR = 40;										// Задает скорость соединения. Чем больше тем медленнее; 255 -> 28кбит/с; 66 -> 100кбит/с; 11 -> 388кбит/с
     12e:	88 e2       	ldi	r24, 0x28	; 40
     130:	80 b9       	out	0x00, r24	; 0
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
     132:	81 b1       	in	r24, 0x01	; 1
     134:	81 b9       	out	0x01, r24	; 1
	}

	inline void I2CMTstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     136:	84 ea       	ldi	r24, 0xA4	; 164
     138:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     13a:	06 b6       	in	r0, 0x36	; 54
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <_ZN6DS13079writeTimeEPc+0xe>
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     140:	80 ed       	ldi	r24, 0xD0	; 208
     142:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     144:	84 e8       	ldi	r24, 0x84	; 132
     146:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     148:	06 b6       	in	r0, 0x36	; 54
     14a:	07 fe       	sbrs	r0, 7
     14c:	fd cf       	rjmp	.-6      	; 0x148 <_ZN6DS13079writeTimeEPc+0x1c>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     14e:	13 b8       	out	0x03, r1	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     150:	84 e8       	ldi	r24, 0x84	; 132
     152:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     154:	06 b6       	in	r0, 0x36	; 54
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <_ZN6DS13079writeTimeEPc+0x28>
		I2CMTstart();							// Задание стартового условия мастером				// 00001 = 0x08 - A START condition has been transmitted
		I2CMTsend(DS1307_WRITE_ADRESS);			// Передача адреса									// 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
		I2CMTsend(0x00);						// Передача данных(адреса записи в памяти DS1307)	// 00101 = 0x28 - Data byte has been transmitted;	ACK has been received
		
		// Передача данных DATA					// 00101 = 0x28 - Data byte has been transmitted;	ACK has been received
		I2CMTsend(DecToBin(time[0]));			// 0x00	7-CH	6-10Sec		5-10Sec		4-10Sec		3-Sec	2-Sec	1-Sec	0-Sec	(CH-0 - вкл осцилятор, CH-1 - вЫкл осцилятор)
     15a:	90 81       	ld	r25, Z
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     15c:	8d ec       	ldi	r24, 0xCD	; 205
     15e:	98 9f       	mul	r25, r24
     160:	81 2d       	mov	r24, r1
     162:	11 24       	eor	r1, r1
     164:	86 95       	lsr	r24
     166:	86 95       	lsr	r24
     168:	86 95       	lsr	r24
     16a:	40 e1       	ldi	r20, 0x10	; 16
     16c:	84 9f       	mul	r24, r20
     16e:	90 01       	movw	r18, r0
     170:	11 24       	eor	r1, r1
     172:	88 0f       	add	r24, r24
     174:	38 2f       	mov	r19, r24
     176:	33 0f       	add	r19, r19
     178:	33 0f       	add	r19, r19
     17a:	83 0f       	add	r24, r19
     17c:	98 1b       	sub	r25, r24
     17e:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     180:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     186:	06 b6       	in	r0, 0x36	; 54
     188:	07 fe       	sbrs	r0, 7
     18a:	fd cf       	rjmp	.-6      	; 0x186 <_ZN6DS13079writeTimeEPc+0x5a>
		I2CMTsend(DecToBin(time[1]));			// 0x01	7-0		6-10Min		5-10Min		4-10Min		3-Min	2-Min	1-Min	0-Min
     18c:	91 81       	ldd	r25, Z+1	; 0x01
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     18e:	8d ec       	ldi	r24, 0xCD	; 205
     190:	98 9f       	mul	r25, r24
     192:	81 2d       	mov	r24, r1
     194:	11 24       	eor	r1, r1
     196:	86 95       	lsr	r24
     198:	86 95       	lsr	r24
     19a:	86 95       	lsr	r24
     19c:	40 e1       	ldi	r20, 0x10	; 16
     19e:	84 9f       	mul	r24, r20
     1a0:	90 01       	movw	r18, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	88 0f       	add	r24, r24
     1a6:	38 2f       	mov	r19, r24
     1a8:	33 0f       	add	r19, r19
     1aa:	33 0f       	add	r19, r19
     1ac:	83 0f       	add	r24, r19
     1ae:	98 1b       	sub	r25, r24
     1b0:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     1b2:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_ZN6DS13079writeTimeEPc+0x8c>
		I2CMTsend(DecToBin(time[2]));			// 0x02	7-0		6-12/24		5-10H/AMPM	4-10Hour	3-Hour	2-Hour	1-Hour	0-Hour
     1be:	82 81       	ldd	r24, Z+2	; 0x02
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     1c0:	9d ec       	ldi	r25, 0xCD	; 205
     1c2:	89 9f       	mul	r24, r25
     1c4:	91 2d       	mov	r25, r1
     1c6:	11 24       	eor	r1, r1
     1c8:	96 95       	lsr	r25
     1ca:	96 95       	lsr	r25
     1cc:	96 95       	lsr	r25
     1ce:	40 e1       	ldi	r20, 0x10	; 16
     1d0:	94 9f       	mul	r25, r20
     1d2:	90 01       	movw	r18, r0
     1d4:	11 24       	eor	r1, r1
     1d6:	99 0f       	add	r25, r25
     1d8:	39 2f       	mov	r19, r25
     1da:	33 0f       	add	r19, r19
     1dc:	33 0f       	add	r19, r19
     1de:	93 0f       	add	r25, r19
     1e0:	89 1b       	sub	r24, r25
     1e2:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     1e4:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     1e6:	84 e8       	ldi	r24, 0x84	; 132
     1e8:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     1ea:	06 b6       	in	r0, 0x36	; 54
     1ec:	07 fe       	sbrs	r0, 7
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <_ZN6DS13079writeTimeEPc+0xbe>
		I2CMTsend(DecToBin(time[3]));			// 0x03	7-0		6-0			5-0			4-0			3-0		2-Day	1-Day	0-Day	(День недели)
     1f0:	83 81       	ldd	r24, Z+3	; 0x03
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     1f2:	9d ec       	ldi	r25, 0xCD	; 205
     1f4:	89 9f       	mul	r24, r25
     1f6:	91 2d       	mov	r25, r1
     1f8:	11 24       	eor	r1, r1
     1fa:	96 95       	lsr	r25
     1fc:	96 95       	lsr	r25
     1fe:	96 95       	lsr	r25
     200:	40 e1       	ldi	r20, 0x10	; 16
     202:	94 9f       	mul	r25, r20
     204:	90 01       	movw	r18, r0
     206:	11 24       	eor	r1, r1
     208:	99 0f       	add	r25, r25
     20a:	39 2f       	mov	r19, r25
     20c:	33 0f       	add	r19, r19
     20e:	33 0f       	add	r19, r19
     210:	93 0f       	add	r25, r19
     212:	89 1b       	sub	r24, r25
     214:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     216:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     21c:	06 b6       	in	r0, 0x36	; 54
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <_ZN6DS13079writeTimeEPc+0xf0>
		I2CMTsend(DecToBin(time[4]));			// 0x04	7-0		6-0			5-10Date	4-10Date	3-Date	2-Date	1-Date	0-Date	(День месяца)
     222:	84 81       	ldd	r24, Z+4	; 0x04
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     224:	9d ec       	ldi	r25, 0xCD	; 205
     226:	89 9f       	mul	r24, r25
     228:	91 2d       	mov	r25, r1
     22a:	11 24       	eor	r1, r1
     22c:	96 95       	lsr	r25
     22e:	96 95       	lsr	r25
     230:	96 95       	lsr	r25
     232:	40 e1       	ldi	r20, 0x10	; 16
     234:	94 9f       	mul	r25, r20
     236:	90 01       	movw	r18, r0
     238:	11 24       	eor	r1, r1
     23a:	99 0f       	add	r25, r25
     23c:	39 2f       	mov	r19, r25
     23e:	33 0f       	add	r19, r19
     240:	33 0f       	add	r19, r19
     242:	93 0f       	add	r25, r19
     244:	89 1b       	sub	r24, r25
     246:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     248:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     24e:	06 b6       	in	r0, 0x36	; 54
     250:	07 fe       	sbrs	r0, 7
     252:	fd cf       	rjmp	.-6      	; 0x24e <_ZN6DS13079writeTimeEPc+0x122>
		I2CMTsend(DecToBin(time[5]));			// 0x05	7-0		6-0			5-0			4-10Month	3-Month	2-Month	1-Month	0-Month
     254:	85 81       	ldd	r24, Z+5	; 0x05
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     256:	9d ec       	ldi	r25, 0xCD	; 205
     258:	89 9f       	mul	r24, r25
     25a:	91 2d       	mov	r25, r1
     25c:	11 24       	eor	r1, r1
     25e:	96 95       	lsr	r25
     260:	96 95       	lsr	r25
     262:	96 95       	lsr	r25
     264:	40 e1       	ldi	r20, 0x10	; 16
     266:	94 9f       	mul	r25, r20
     268:	90 01       	movw	r18, r0
     26a:	11 24       	eor	r1, r1
     26c:	99 0f       	add	r25, r25
     26e:	39 2f       	mov	r19, r25
     270:	33 0f       	add	r19, r19
     272:	33 0f       	add	r19, r19
     274:	93 0f       	add	r25, r19
     276:	89 1b       	sub	r24, r25
     278:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     27a:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     27c:	84 e8       	ldi	r24, 0x84	; 132
     27e:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     280:	06 b6       	in	r0, 0x36	; 54
     282:	07 fe       	sbrs	r0, 7
     284:	fd cf       	rjmp	.-6      	; 0x280 <_ZN6DS13079writeTimeEPc+0x154>
		I2CMTsend(DecToBin(time[6]));			// 0x06	7-10Y	6-10Y		5-10Y		4-10Y		3-Y		2-Y		1-Y		0-Y
     286:	96 81       	ldd	r25, Z+6	; 0x06
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     288:	8d ec       	ldi	r24, 0xCD	; 205
     28a:	98 9f       	mul	r25, r24
     28c:	81 2d       	mov	r24, r1
     28e:	11 24       	eor	r1, r1
     290:	86 95       	lsr	r24
     292:	86 95       	lsr	r24
     294:	86 95       	lsr	r24
     296:	40 e1       	ldi	r20, 0x10	; 16
     298:	84 9f       	mul	r24, r20
     29a:	90 01       	movw	r18, r0
     29c:	11 24       	eor	r1, r1
     29e:	88 0f       	add	r24, r24
     2a0:	38 2f       	mov	r19, r24
     2a2:	33 0f       	add	r19, r19
     2a4:	33 0f       	add	r19, r19
     2a6:	83 0f       	add	r24, r19
     2a8:	98 1b       	sub	r25, r24
     2aa:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2ac:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2ae:	84 e8       	ldi	r24, 0x84	; 132
     2b0:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     2b2:	06 b6       	in	r0, 0x36	; 54
     2b4:	07 fe       	sbrs	r0, 7
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <_ZN6DS13079writeTimeEPc+0x186>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2bc:	84 e8       	ldi	r24, 0x84	; 132
     2be:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     2c0:	06 b6       	in	r0, 0x36	; 54
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <_ZN6DS13079writeTimeEPc+0x194>
	}

	inline void I2CMTstop(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
     2c6:	84 e9       	ldi	r24, 0x94	; 148
     2c8:	86 bf       	out	0x36, r24	; 54
     2ca:	08 95       	ret

000002cc <_ZN6DS13078readTimeEPc>:
		I2CMTsend(0b00010000);					// 0x07	7-OUT	6-0			5-0			4-SQWE		3-0		2-0		1-RS1	0-RS0	(OUT - логика на выходе; SQWE - генератор на выходе; RS1..0 - прескелереры частоты генератора SQWE)
		I2CMTstop();							// Стоп от мастера									// 11111 = 0xf8 - No relevant state information	available; TWINT = “0”
	}

	void readTime(char time[])
	{
     2cc:	fc 01       	movw	r30, r24
		
	//  Функции мастера рессивера  //
		
	inline void I2CMRinit(void)
	{
		TWBR = 66;										// Задает скорость соединения. Чем больше тем медленнее; 255 -> 28кбит/с; 66 -> 100кбит/с
     2ce:	82 e4       	ldi	r24, 0x42	; 66
     2d0:	80 b9       	out	0x00, r24	; 0
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
     2d2:	81 b1       	in	r24, 0x01	; 1
     2d4:	81 b9       	out	0x01, r24	; 1
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     2d6:	84 ea       	ldi	r24, 0xA4	; 164
     2d8:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     2da:	06 b6       	in	r0, 0x36	; 54
     2dc:	07 fe       	sbrs	r0, 7
     2de:	fd cf       	rjmp	.-6      	; 0x2da <_ZN6DS13078readTimeEPc+0xe>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2e0:	80 ed       	ldi	r24, 0xD0	; 208
     2e2:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2e4:	84 e8       	ldi	r24, 0x84	; 132
     2e6:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     2e8:	06 b6       	in	r0, 0x36	; 54
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <_ZN6DS13078readTimeEPc+0x1c>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2ee:	13 b8       	out	0x03, r1	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2f0:	84 e8       	ldi	r24, 0x84	; 132
     2f2:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     2f4:	06 b6       	in	r0, 0x36	; 54
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <_ZN6DS13078readTimeEPc+0x28>
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     2fa:	84 ea       	ldi	r24, 0xA4	; 164
     2fc:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     2fe:	06 b6       	in	r0, 0x36	; 54
     300:	07 fe       	sbrs	r0, 7
     302:	fd cf       	rjmp	.-6      	; 0x2fe <_ZN6DS13078readTimeEPc+0x32>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     304:	81 ed       	ldi	r24, 0xD1	; 209
     306:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     308:	84 e8       	ldi	r24, 0x84	; 132
     30a:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     30c:	06 b6       	in	r0, 0x36	; 54
     30e:	07 fe       	sbrs	r0, 7
     310:	fd cf       	rjmp	.-6      	; 0x30c <_ZN6DS13078readTimeEPc+0x40>
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     312:	84 ec       	ldi	r24, 0xC4	; 196
     314:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     316:	06 b6       	in	r0, 0x36	; 54
     318:	07 fe       	sbrs	r0, 7
     31a:	fd cf       	rjmp	.-6      	; 0x316 <_ZN6DS13078readTimeEPc+0x4a>
		return TWDR;									// Читаем регистр данных
     31c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	35 95       	asr	r19
     324:	27 95       	ror	r18
     326:	35 95       	asr	r19
     328:	27 95       	ror	r18
     32a:	35 95       	asr	r19
     32c:	27 95       	ror	r18
     32e:	35 95       	asr	r19
     330:	27 95       	ror	r18
     332:	22 0f       	add	r18, r18
     334:	92 2f       	mov	r25, r18
     336:	99 0f       	add	r25, r25
     338:	99 0f       	add	r25, r25
     33a:	29 0f       	add	r18, r25
     33c:	8f 70       	andi	r24, 0x0F	; 15
     33e:	82 0f       	add	r24, r18
		I2CMRsend(DS1307_WRITE_ADRESS);			// Передача адреса слэйва
		I2CMRsend(0x00);						// Передача адреса ячейки
		
		I2CMRstart();							// Повторный старт
		I2CMRsend(DS1307_READ_ADRESS);			// Отправка адреса слэйва							// 01000 = 0x40 - SLA+R has been transmitted;	ACK has been received
		time[0] = BinToDec(I2CMRread());		// Чтение данных   ACK								// 01010 = Data byte has been received;			ACK has been returned
     340:	80 83       	st	Z, r24
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     342:	84 ec       	ldi	r24, 0xC4	; 196
     344:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     346:	06 b6       	in	r0, 0x36	; 54
     348:	07 fe       	sbrs	r0, 7
     34a:	fd cf       	rjmp	.-6      	; 0x346 <_ZN6DS13078readTimeEPc+0x7a>
		return TWDR;									// Читаем регистр данных
     34c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	35 95       	asr	r19
     354:	27 95       	ror	r18
     356:	35 95       	asr	r19
     358:	27 95       	ror	r18
     35a:	35 95       	asr	r19
     35c:	27 95       	ror	r18
     35e:	35 95       	asr	r19
     360:	27 95       	ror	r18
     362:	22 0f       	add	r18, r18
     364:	92 2f       	mov	r25, r18
     366:	99 0f       	add	r25, r25
     368:	99 0f       	add	r25, r25
     36a:	29 0f       	add	r18, r25
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	82 0f       	add	r24, r18
		time[1] =  BinToDec(I2CMRread());
     370:	81 83       	std	Z+1, r24	; 0x01
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     372:	84 ec       	ldi	r24, 0xC4	; 196
     374:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     376:	06 b6       	in	r0, 0x36	; 54
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <_ZN6DS13078readTimeEPc+0xaa>
		return TWDR;									// Читаем регистр данных
     37c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	35 95       	asr	r19
     384:	27 95       	ror	r18
     386:	35 95       	asr	r19
     388:	27 95       	ror	r18
     38a:	35 95       	asr	r19
     38c:	27 95       	ror	r18
     38e:	35 95       	asr	r19
     390:	27 95       	ror	r18
     392:	22 0f       	add	r18, r18
     394:	92 2f       	mov	r25, r18
     396:	99 0f       	add	r25, r25
     398:	99 0f       	add	r25, r25
     39a:	29 0f       	add	r18, r25
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	82 0f       	add	r24, r18
		time[2] = BinToDec(I2CMRread());
     3a0:	82 83       	std	Z+2, r24	; 0x02
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     3a2:	84 ec       	ldi	r24, 0xC4	; 196
     3a4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     3a6:	06 b6       	in	r0, 0x36	; 54
     3a8:	07 fe       	sbrs	r0, 7
     3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <_ZN6DS13078readTimeEPc+0xda>
		return TWDR;									// Читаем регистр данных
     3ac:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	35 95       	asr	r19
     3b4:	27 95       	ror	r18
     3b6:	35 95       	asr	r19
     3b8:	27 95       	ror	r18
     3ba:	35 95       	asr	r19
     3bc:	27 95       	ror	r18
     3be:	35 95       	asr	r19
     3c0:	27 95       	ror	r18
     3c2:	22 0f       	add	r18, r18
     3c4:	92 2f       	mov	r25, r18
     3c6:	99 0f       	add	r25, r25
     3c8:	99 0f       	add	r25, r25
     3ca:	29 0f       	add	r18, r25
     3cc:	8f 70       	andi	r24, 0x0F	; 15
     3ce:	82 0f       	add	r24, r18
		time[3] = BinToDec(I2CMRread());
     3d0:	83 83       	std	Z+3, r24	; 0x03
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     3d2:	84 ec       	ldi	r24, 0xC4	; 196
     3d4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6DS13078readTimeEPc+0x10a>
		return TWDR;									// Читаем регистр данных
     3dc:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	35 95       	asr	r19
     3e4:	27 95       	ror	r18
     3e6:	35 95       	asr	r19
     3e8:	27 95       	ror	r18
     3ea:	35 95       	asr	r19
     3ec:	27 95       	ror	r18
     3ee:	35 95       	asr	r19
     3f0:	27 95       	ror	r18
     3f2:	22 0f       	add	r18, r18
     3f4:	92 2f       	mov	r25, r18
     3f6:	99 0f       	add	r25, r25
     3f8:	99 0f       	add	r25, r25
     3fa:	29 0f       	add	r18, r25
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	82 0f       	add	r24, r18
		time[4] = BinToDec(I2CMRread());
     400:	84 83       	std	Z+4, r24	; 0x04
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     402:	84 ec       	ldi	r24, 0xC4	; 196
     404:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     406:	06 b6       	in	r0, 0x36	; 54
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		return TWDR;									// Читаем регистр данных
     40c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	35 95       	asr	r19
     414:	27 95       	ror	r18
     416:	35 95       	asr	r19
     418:	27 95       	ror	r18
     41a:	35 95       	asr	r19
     41c:	27 95       	ror	r18
     41e:	35 95       	asr	r19
     420:	27 95       	ror	r18
     422:	22 0f       	add	r18, r18
     424:	92 2f       	mov	r25, r18
     426:	99 0f       	add	r25, r25
     428:	99 0f       	add	r25, r25
     42a:	29 0f       	add	r18, r25
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	82 0f       	add	r24, r18
		time[5] = BinToDec(I2CMRread());
     430:	85 83       	std	Z+5, r24	; 0x05
		return TWDR;									// Читаем регистр данных
	}
	
	inline char I2CMRreadLast(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN);
     432:	84 e8       	ldi	r24, 0x84	; 132
     434:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					//ожидание установки бита TWIN
     436:	06 b6       	in	r0, 0x36	; 54
     438:	07 fe       	sbrs	r0, 7
     43a:	fd cf       	rjmp	.-6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		return TWDR;									//читаем регистр данных
     43c:	23 b1       	in	r18, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     43e:	82 2f       	mov	r24, r18
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	95 95       	asr	r25
     444:	87 95       	ror	r24
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	95 95       	asr	r25
     44c:	87 95       	ror	r24
     44e:	95 95       	asr	r25
     450:	87 95       	ror	r24
     452:	2f 70       	andi	r18, 0x0F	; 15
     454:	88 0f       	add	r24, r24
     456:	98 2f       	mov	r25, r24
     458:	99 0f       	add	r25, r25
     45a:	99 0f       	add	r25, r25
     45c:	89 0f       	add	r24, r25
     45e:	82 0f       	add	r24, r18
		time[6] = BinToDec(I2CMRreadLast());	// Чтение данных NOACK								// 01011 = 0x58 - Data byte has been received;	NOT ACK has been returned
     460:	86 83       	std	Z+6, r24	; 0x06
		return TWDR;									//читаем регистр данных
	}
		
	inline void I2CMRstop(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
     462:	84 e9       	ldi	r24, 0x94	; 148
     464:	86 bf       	out	0x36, r24	; 54
     466:	08 95       	ret

00000468 <_Z41__static_initialization_and_destruction_0ii>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	09 f0       	breq	.+2      	; 0x47e <_Z41__static_initialization_and_destruction_0ii+0x16>
     47c:	bd c0       	rjmp	.+378    	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii+0x190>
     47e:	6f 3f       	cpi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	09 f0       	breq	.+2      	; 0x486 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     484:	b9 c0       	rjmp	.+370    	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii+0x190>
char green = 55;
char blue = 45;

// Переменные времени
char time[7] = {0, 8, 15, 4, 23, 5, 24};											// sec, min, hour, day, date, month, year
float timeDec = (float)time[0] + (float)time[1] / 60.0 + (float)time[2] / 3600.0;	// Реальное время в десятичном виде
     486:	c8 e8       	ldi	r28, 0x88	; 136
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	18 81       	ld	r17, Y
     48c:	69 81       	ldd	r22, Y+1	; 0x01
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e7       	ldi	r20, 0x70	; 112
     49e:	52 e4       	ldi	r21, 0x42	; 66
     4a0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     4a4:	6b 01       	movw	r12, r22
     4a6:	7c 01       	movw	r14, r24
     4a8:	61 2f       	mov	r22, r17
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     4b4:	a7 01       	movw	r20, r14
     4b6:	96 01       	movw	r18, r12
     4b8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     4bc:	6b 01       	movw	r12, r22
     4be:	7c 01       	movw	r14, r24
     4c0:	6a 81       	ldd	r22, Y+2	; 0x02
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	41 e6       	ldi	r20, 0x61	; 97
     4d2:	55 e4       	ldi	r21, 0x45	; 69
     4d4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     4e4:	60 93 ed 05 	sts	0x05ED, r22	; 0x8005ed <timeDec>
     4e8:	70 93 ee 05 	sts	0x05EE, r23	; 0x8005ee <timeDec+0x1>
     4ec:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <timeDec+0x2>
     4f0:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <timeDec+0x3>
char timecomp = time[0];															// Секунда сравнения
     4f4:	10 93 ec 05 	sts	0x05EC, r17	; 0x8005ec <timecomp>
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     4f8:	c0 e8       	ldi	r28, 0x80	; 128
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	68 81       	ld	r22, Y
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     508:	6b 01       	movw	r12, r22
     50a:	7c 01       	movw	r14, r24
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e7       	ldi	r20, 0x70	; 112
     51e:	52 e4       	ldi	r21, 0x42	; 66
     520:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	c7 01       	movw	r24, r14
     52a:	b6 01       	movw	r22, r12
     52c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     530:	0c ed       	ldi	r16, 0xDC	; 220
     532:	15 e0       	ldi	r17, 0x05	; 5
     534:	f8 01       	movw	r30, r16
     536:	60 83       	st	Z, r22
     538:	71 83       	std	Z+1, r23	; 0x01
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	93 83       	std	Z+3, r25	; 0x03
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     53e:	6a 81       	ldd	r22, Y+2	; 0x02
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     54a:	6b 01       	movw	r12, r22
     54c:	7c 01       	movw	r14, r24
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     54e:	6b 81       	ldd	r22, Y+3	; 0x03
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e7       	ldi	r20, 0x70	; 112
     560:	52 e4       	ldi	r21, 0x42	; 66
     562:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     572:	f8 01       	movw	r30, r16
     574:	64 83       	std	Z+4, r22	; 0x04
     576:	75 83       	std	Z+5, r23	; 0x05
     578:	86 83       	std	Z+6, r24	; 0x06
     57a:	97 83       	std	Z+7, r25	; 0x07

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     57c:	6c 81       	ldd	r22, Y+4	; 0x04
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e7       	ldi	r20, 0x70	; 112
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     5b0:	f8 01       	movw	r30, r16
     5b2:	60 87       	std	Z+8, r22	; 0x08
     5b4:	71 87       	std	Z+9, r23	; 0x09
     5b6:	82 87       	std	Z+10, r24	; 0x0a
     5b8:	93 87       	std	Z+11, r25	; 0x0b
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     5ba:	6e 81       	ldd	r22, Y+6	; 0x06
};
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     5c6:	6b 01       	movw	r12, r22
     5c8:	7c 01       	movw	r14, r24
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     5ca:	6f 81       	ldd	r22, Y+7	; 0x07
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e7       	ldi	r20, 0x70	; 112
     5dc:	52 e4       	ldi	r21, 0x42	; 66
     5de:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     5e2:	9b 01       	movw	r18, r22
     5e4:	ac 01       	movw	r20, r24
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
};
     5ee:	f8 01       	movw	r30, r16
     5f0:	64 87       	std	Z+12, r22	; 0x0c
     5f2:	75 87       	std	Z+13, r23	; 0x0d
     5f4:	86 87       	std	Z+14, r24	; 0x0e
     5f6:	97 87       	std	Z+15, r25	; 0x0f
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	ef 93       	push	r30
     62a:	ff 93       	push	r31
	cli();
     62c:	f8 94       	cli
	time[0]++;						// Инкремент секунды
     62e:	e8 e8       	ldi	r30, 0x88	; 136
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 83       	st	Z, r24
	
	if (time[0] >= 60)
     638:	8c 33       	cpi	r24, 0x3C	; 60
     63a:	20 f0       	brcs	.+8      	; 0x644 <__vector_7+0x3a>
	{
		time[1]++;					// Инкремент минуты
     63c:	81 81       	ldd	r24, Z+1	; 0x01
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	81 83       	std	Z+1, r24	; 0x01
		time[0] = 0;
     642:	10 82       	st	Z, r1
	}
	
	if (time[1] >= 60)
     644:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     648:	8c 33       	cpi	r24, 0x3C	; 60
     64a:	30 f0       	brcs	.+12     	; 0x658 <__vector_7+0x4e>
	{
		time[2]++;
     64c:	e8 e8       	ldi	r30, 0x88	; 136
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	82 83       	std	Z+2, r24	; 0x02
		time[1] = 0;				// Инкремент часа
     656:	11 82       	std	Z+1, r1	; 0x01
	}
	
	if (time[2] >= 24)				// Сутки
     658:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     65c:	88 31       	cpi	r24, 0x18	; 24
     65e:	28 f0       	brcs	.+10     	; 0x66a <__vector_7+0x60>
	{
		time[0] = 0;
     660:	e8 e8       	ldi	r30, 0x88	; 136
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	10 82       	st	Z, r1
		time[1] = 0;
     666:	11 82       	std	Z+1, r1	; 0x01
		time[2] = 0;
     668:	12 82       	std	Z+2, r1	; 0x02
	}	
	
	
	// Синхронизация с DS1307 в полночь
	if (time[0] == 0 && time[1] == 0 && time[2] == 0 && syncflag == 1)
     66a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     66e:	81 11       	cpse	r24, r1
     670:	12 c0       	rjmp	.+36     	; 0x696 <__vector_7+0x8c>
     672:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     676:	81 11       	cpse	r24, r1
     678:	0e c0       	rjmp	.+28     	; 0x696 <__vector_7+0x8c>
     67a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     67e:	81 11       	cpse	r24, r1
     680:	0a c0       	rjmp	.+20     	; 0x696 <__vector_7+0x8c>
     682:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <syncflag>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	31 f4       	brne	.+12     	; 0x696 <__vector_7+0x8c>
	{
		DS1307::readTime(time);
     68a:	88 e8       	ldi	r24, 0x88	; 136
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN6DS13078readTimeEPc>
		syncflag = 0;
     692:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <syncflag>
	}
	
	if (time[0] == 0 && time[1] == 1 && time[2] == 0)
     696:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     69a:	81 11       	cpse	r24, r1
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <__vector_7+0xaa>
     69e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	39 f4       	brne	.+14     	; 0x6b4 <__vector_7+0xaa>
     6a6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     6aa:	81 11       	cpse	r24, r1
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <__vector_7+0xaa>
	{
		syncflag = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <syncflag>
	}
	
	
	sei();
     6b4:	78 94       	sei
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti

000006d8 <__vector_1>:

ISR(INT0_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	8f 93       	push	r24
     6e4:	ef 93       	push	r30
     6e6:	ff 93       	push	r31
	time[0]++;
     6e8:	e8 e8       	ldi	r30, 0x88	; 136
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	80 81       	ld	r24, Z
     6ee:	8f 5f       	subi	r24, 0xFF	; 255
     6f0:	80 83       	st	Z, r24
}
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	8f 91       	pop	r24
     6f8:	0f 90       	pop	r0
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	0f 90       	pop	r0
     6fe:	1f 90       	pop	r1
     700:	18 95       	reti

00000702 <__vector_2>:

ISR(INT1_vect)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	8f 93       	push	r24
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	time[0]--;
     712:	e8 e8       	ldi	r30, 0x88	; 136
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	81 50       	subi	r24, 0x01	; 1
     71a:	80 83       	st	Z, r24
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	8f 91       	pop	r24
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_3>:

ISR(INT2_vect)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	ef 93       	push	r30
     74c:	ff 93       	push	r31
	DS1307::writeTime(time);
     74e:	88 e8       	ldi	r24, 0x88	; 136
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6DS13079writeTimeEPc>
}
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <_Z5setupv>:


void setup(void)
{
	sei();
     778:	78 94       	sei
	
	
	////////////// Внешние прерывания //////////////
	GICR |= (1 << INT1)|(1 << INT0)|(1 << INT2);						// General Interrupt Control Register - Установка битов INT1, INT0 или INT2 разрешает прерывания при возникновении события на соответствующем выводе микроконтроллера AVR, а сброс — запрещает.
     77a:	8b b7       	in	r24, 0x3b	; 59
     77c:	80 6e       	ori	r24, 0xE0	; 224
     77e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11)|(0 << ISC10)|(1 << ISC01)|(0 << ISC00);		// 10	- Перывание по спадающему фронту INT0, INT1
     780:	85 b7       	in	r24, 0x35	; 53
     782:	8a 60       	ori	r24, 0x0A	; 10
     784:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (0 << ISC2);												// 0	- Перывание по спадающему фронту INT2
     786:	84 b7       	in	r24, 0x34	; 52
     788:	84 bf       	out	0x34, r24	; 52
		
	DDRA = 0xff;
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
     78e:	1b ba       	out	0x1b, r1	; 27
	
	
	//////////// Таймер 1 (16 бит) Часы ////////////
	OCR1A   = 14398;	// Запись значения прерывания CTC производится до инициализации таймера
     790:	8e e3       	ldi	r24, 0x3E	; 62
     792:	98 e3       	ldi	r25, 0x38	; 56
     794:	9b bd       	out	0x2b, r25	; 43
     796:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(0 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);	// COM - порты, FOC - ?, WGM - режим CTC, CS - прескелер
     798:	8f b5       	in	r24, 0x2f	; 47
     79a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 <<  ICNC1)|(0 <<  ICES1)|(0 <<  WGM13)|(1 <<  WGM12)|(1 <<  CS12)|(0 <<  CS11)|(1 <<  CS10);				// IC - настройки пина ICP1 (PD6)
     79c:	8e b5       	in	r24, 0x2e	; 46
     79e:	8d 60       	ori	r24, 0x0D	; 13
     7a0:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (0 << TICIE1)|(1 << OCIE1A)|(0 << OCIE1B)|(0 << TOIE1);														// OCIE1A - Прерывание по совпадению разрешено
     7a2:	89 b7       	in	r24, 0x39	; 57
     7a4:	80 61       	ori	r24, 0x10	; 16
     7a6:	89 bf       	out	0x39, r24	; 57
	

	//////////// Таймер 0 (8 бит) PWM ////////////
	OCR0  |= 0;			// Скважность - Значение сравнения f = fcpu/(N*256) = 7372800/256 = 28800 || = 14745600/256 = 57600 | 248 -> 97.1% | 249 -> 97.5% | 250 -> 97.9% | 251 -> 98.3% | 252 -> 98.7%  | *по расчету надо 97,5 - 98,6%
     7a8:	8c b7       	in	r24, 0x3c	; 60
     7aa:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (0 << FOC0)|(1  << WGM01)|(1 << WGM00)|(1 << COM01)|(0 << COM00)|(0 << CS02)|(0 << CS01)|(1 << CS00);	// WGM - fast PWM, COM - clear on compare, CS - прескелер, FOC - ?
     7ac:	83 b7       	in	r24, 0x33	; 51
     7ae:	89 66       	ori	r24, 0x69	; 105
     7b0:	83 bf       	out	0x33, r24	; 51
		
	DDRB |= 0b00001000;		// Вывод ШИМ - PB3(OC0)
     7b2:	87 b3       	in	r24, 0x17	; 23
     7b4:	88 60       	ori	r24, 0x08	; 8
     7b6:	87 bb       	out	0x17, r24	; 23
	
	ST7789::init();
     7b8:	0e 94 2f 08 	call	0x105e	; 0x105e <_ZN6ST77894initEv>
     7bc:	08 95       	ret

000007be <_Z10printClockv>:
}

void printClock(void)
{
     7be:	cf 92       	push	r12
     7c0:	ef 92       	push	r14
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
	if (time[2] < 10)
     7ca:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     7ce:	8a 30       	cpi	r24, 0x0A	; 10
     7d0:	90 f4       	brcc	.+36     	; 0x7f6 <_Z10printClockv+0x38>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f5 e0       	ldi	r31, 0x05	; 5
     7d6:	cf 2e       	mov	r12, r31
     7d8:	f0 2d       	mov	r31, r0
     7da:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     7de:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     7e2:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     7e6:	4a ef       	ldi	r20, 0xFA	; 250
     7e8:	55 e0       	ldi	r21, 0x05	; 5
     7ea:	6b ef       	ldi	r22, 0xFB	; 251
     7ec:	75 e0       	ldi	r23, 0x05	; 5
     7ee:	83 e9       	ldi	r24, 0x93	; 147
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[2], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     7f6:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     7fa:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     7fe:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     802:	c8 e8       	ldi	r28, 0x88	; 136
     804:	d0 e0       	ldi	r29, 0x00	; 0
     806:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     808:	4a e0       	ldi	r20, 0x0A	; 10
     80a:	61 ef       	ldi	r22, 0xF1	; 241
     80c:	75 e0       	ldi	r23, 0x05	; 5
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     814:	0f 2e       	mov	r0, r31
     816:	f5 e0       	ldi	r31, 0x05	; 5
     818:	cf 2e       	mov	r12, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	21 2f       	mov	r18, r17
     81e:	4a ef       	ldi	r20, 0xFA	; 250
     820:	55 e0       	ldi	r21, 0x05	; 5
     822:	6b ef       	ldi	r22, 0xFB	; 251
     824:	75 e0       	ldi	r23, 0x05	; 5
     826:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     82a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     82e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     832:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     836:	4a ef       	ldi	r20, 0xFA	; 250
     838:	55 e0       	ldi	r21, 0x05	; 5
     83a:	6b ef       	ldi	r22, 0xFB	; 251
     83c:	75 e0       	ldi	r23, 0x05	; 5
     83e:	85 e9       	ldi	r24, 0x95	; 149
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	if (time[1] < 10)
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	8a 30       	cpi	r24, 0x0A	; 10
     84a:	70 f4       	brcc	.+28     	; 0x868 <__stack+0x9>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     84c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     850:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     854:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     858:	4a ef       	ldi	r20, 0xFA	; 250
     85a:	55 e0       	ldi	r21, 0x05	; 5
     85c:	6b ef       	ldi	r22, 0xFB	; 251
     85e:	75 e0       	ldi	r23, 0x05	; 5
     860:	83 e9       	ldi	r24, 0x93	; 147
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[1], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     868:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     86c:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     870:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     874:	c8 e8       	ldi	r28, 0x88	; 136
     876:	d0 e0       	ldi	r29, 0x00	; 0
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	4a e0       	ldi	r20, 0x0A	; 10
     87c:	61 ef       	ldi	r22, 0xF1	; 241
     87e:	75 e0       	ldi	r23, 0x05	; 5
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     886:	0f 2e       	mov	r0, r31
     888:	f5 e0       	ldi	r31, 0x05	; 5
     88a:	cf 2e       	mov	r12, r31
     88c:	f0 2d       	mov	r31, r0
     88e:	21 2f       	mov	r18, r17
     890:	4a ef       	ldi	r20, 0xFA	; 250
     892:	55 e0       	ldi	r21, 0x05	; 5
     894:	6b ef       	ldi	r22, 0xFB	; 251
     896:	75 e0       	ldi	r23, 0x05	; 5
     898:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     89c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     8a0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     8a4:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     8a8:	4a ef       	ldi	r20, 0xFA	; 250
     8aa:	55 e0       	ldi	r21, 0x05	; 5
     8ac:	6b ef       	ldi	r22, 0xFB	; 251
     8ae:	75 e0       	ldi	r23, 0x05	; 5
     8b0:	85 e9       	ldi	r24, 0x95	; 149
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	if (time[0] < 10)
     8b8:	88 81       	ld	r24, Y
     8ba:	8a 30       	cpi	r24, 0x0A	; 10
     8bc:	70 f4       	brcc	.+28     	; 0x8da <__stack+0x7b>
	{
		ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     8be:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     8c2:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     8c6:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     8ca:	4a ef       	ldi	r20, 0xFA	; 250
     8cc:	55 e0       	ldi	r21, 0x05	; 5
     8ce:	6b ef       	ldi	r22, 0xFB	; 251
     8d0:	75 e0       	ldi	r23, 0x05	; 5
     8d2:	83 e9       	ldi	r24, 0x93	; 147
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	ST7789::printString(itoa(time[0], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     8da:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     8de:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     8e2:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     8e6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     8ea:	4a e0       	ldi	r20, 0x0A	; 10
     8ec:	61 ef       	ldi	r22, 0xF1	; 241
     8ee:	75 e0       	ldi	r23, 0x05	; 5
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     8f6:	0f 2e       	mov	r0, r31
     8f8:	f5 e0       	ldi	r31, 0x05	; 5
     8fa:	cf 2e       	mov	r12, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	2c 2f       	mov	r18, r28
     900:	4a ef       	ldi	r20, 0xFA	; 250
     902:	55 e0       	ldi	r21, 0x05	; 5
     904:	6b ef       	ldi	r22, 0xFB	; 251
     906:	75 e0       	ldi	r23, 0x05	; 5
     908:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
	
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ef 90       	pop	r14
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <_Z13printSchedulev>:

void printSchedule(void)
{
     91a:	af 92       	push	r10
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
	for(char i = 0; i < 4; i++)
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	14 30       	cpi	r17, 0x04	; 4
     930:	08 f0       	brcs	.+2      	; 0x934 <_Z13printSchedulev+0x1a>
     932:	a5 c0       	rjmp	.+330    	; 0xa7e <_Z13printSchedulev+0x164>
	{
		// Первое число
		if (timeschedule[i][0] < 10)
     934:	c1 2f       	mov	r28, r17
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	fe 01       	movw	r30, r28
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e0 58       	subi	r30, 0x80	; 128
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	80 81       	ld	r24, Z
     944:	8a 30       	cpi	r24, 0x0A	; 10
     946:	90 f4       	brcc	.+36     	; 0x96c <_Z13printSchedulev+0x52>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     948:	0f 2e       	mov	r0, r31
     94a:	f3 e0       	ldi	r31, 0x03	; 3
     94c:	cf 2e       	mov	r12, r31
     94e:	f0 2d       	mov	r31, r0
     950:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     954:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     958:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     95c:	4a ef       	ldi	r20, 0xFA	; 250
     95e:	55 e0       	ldi	r21, 0x05	; 5
     960:	6b ef       	ldi	r22, 0xFB	; 251
     962:	75 e0       	ldi	r23, 0x05	; 5
     964:	83 e9       	ldi	r24, 0x93	; 147
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][0], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     96c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     970:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     974:	f0 90 91 00 	lds	r15, 0x0091	; 0x800091 <red>
     978:	ce 01       	movw	r24, r28
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	9c 01       	movw	r18, r24
     980:	20 58       	subi	r18, 0x80	; 128
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	59 01       	movw	r10, r18
     986:	f9 01       	movw	r30, r18
     988:	80 81       	ld	r24, Z
     98a:	4a e0       	ldi	r20, 0x0A	; 10
     98c:	61 ef       	ldi	r22, 0xF1	; 241
     98e:	75 e0       	ldi	r23, 0x05	; 5
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     996:	0f 2e       	mov	r0, r31
     998:	f3 e0       	ldi	r31, 0x03	; 3
     99a:	cf 2e       	mov	r12, r31
     99c:	f0 2d       	mov	r31, r0
     99e:	2f 2d       	mov	r18, r15
     9a0:	4a ef       	ldi	r20, 0xFA	; 250
     9a2:	55 e0       	ldi	r21, 0x05	; 5
     9a4:	6b ef       	ldi	r22, 0xFB	; 251
     9a6:	75 e0       	ldi	r23, 0x05	; 5
     9a8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(":", &xpos, &ypos, red, green, blue, 3);
     9ac:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     9b0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     9b4:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     9b8:	4a ef       	ldi	r20, 0xFA	; 250
     9ba:	55 e0       	ldi	r21, 0x05	; 5
     9bc:	6b ef       	ldi	r22, 0xFB	; 251
     9be:	75 e0       	ldi	r23, 0x05	; 5
     9c0:	85 e9       	ldi	r24, 0x95	; 149
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		
		// Второе число
		if (timeschedule[i][1] < 10)
     9c8:	f5 01       	movw	r30, r10
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	70 f4       	brcc	.+28     	; 0x9ec <_Z13printSchedulev+0xd2>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     9d0:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     9d4:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     9d8:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     9dc:	4a ef       	ldi	r20, 0xFA	; 250
     9de:	55 e0       	ldi	r21, 0x05	; 5
     9e0:	6b ef       	ldi	r22, 0xFB	; 251
     9e2:	75 e0       	ldi	r23, 0x05	; 5
     9e4:	83 e9       	ldi	r24, 0x93	; 147
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][1], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     9ec:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     9f0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     9f4:	b0 90 91 00 	lds	r11, 0x0091	; 0x800091 <red>
     9f8:	fe 01       	movw	r30, r28
     9fa:	ee 0f       	add	r30, r30
     9fc:	ff 1f       	adc	r31, r31
     9fe:	e0 58       	subi	r30, 0x80	; 128
     a00:	ff 4f       	sbci	r31, 0xFF	; 255
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	4a e0       	ldi	r20, 0x0A	; 10
     a06:	61 ef       	ldi	r22, 0xF1	; 241
     a08:	75 e0       	ldi	r23, 0x05	; 5
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     a10:	0f 2e       	mov	r0, r31
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	cf 2e       	mov	r12, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	2b 2d       	mov	r18, r11
     a1a:	4a ef       	ldi	r20, 0xFA	; 250
     a1c:	55 e0       	ldi	r21, 0x05	; 5
     a1e:	6b ef       	ldi	r22, 0xFB	; 251
     a20:	75 e0       	ldi	r23, 0x05	; 5
     a22:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(" ", &xpos, &ypos, red, green, blue, 3);
     a26:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     a2a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     a2e:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     a32:	4a ef       	ldi	r20, 0xFA	; 250
     a34:	55 e0       	ldi	r21, 0x05	; 5
     a36:	6b ef       	ldi	r22, 0xFB	; 251
     a38:	75 e0       	ldi	r23, 0x05	; 5
     a3a:	89 e9       	ldi	r24, 0x99	; 153
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		// Слово
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
     a42:	ce 01       	movw	r24, r28
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     a54:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     a58:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     a5c:	4a ef       	ldi	r20, 0xFA	; 250
     a5e:	55 e0       	ldi	r21, 0x05	; 5
     a60:	6b ef       	ldi	r22, 0xFB	; 251
     a62:	75 e0       	ldi	r23, 0x05	; 5
     a64:	80 5a       	subi	r24, 0xA0	; 160
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			
		xpos = 0;
     a6c:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <xpos>
		ypos += 26;
     a70:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <ypos>
     a74:	86 5e       	subi	r24, 0xE6	; 230
     a76:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <ypos>
	
}

void printSchedule(void)
{
	for(char i = 0; i < 4; i++)
     a7a:	1f 5f       	subi	r17, 0xFF	; 255
     a7c:	58 cf       	rjmp	.-336    	; 0x92e <_Z13printSchedulev+0x14>
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
			
		xpos = 0;
		ypos += 26;
	}
	ypos -= 26;
     a7e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <ypos>
     a82:	8a 51       	subi	r24, 0x1A	; 26
     a84:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <ypos>
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	08 95       	ret

00000a9c <_Z4ftoafPci>:
	return i;
}

// Converts a floating-point/double number to a string.
char* ftoa(float n, char* res, int afterpoint)
{
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	4b 01       	movw	r8, r22
     ab6:	5c 01       	movw	r10, r24
     ab8:	7a 01       	movw	r14, r20
     aba:	69 01       	movw	r12, r18
	// Extract integer part
	int ipart = (int)n;
     abc:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fixsfsi>
     ac0:	8b 01       	movw	r16, r22
	
	// Extract floating part
	float fpart = n - (float)ipart;
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatsisf>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c5 01       	movw	r24, r10
     ad4:	b4 01       	movw	r22, r8
     ad6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     ada:	4b 01       	movw	r8, r22
     adc:	5c 01       	movw	r10, r24
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
     ae2:	01 15       	cp	r16, r1
     ae4:	11 05       	cpc	r17, r1
     ae6:	71 f0       	breq	.+28     	; 0xb04 <_Z4ftoafPci+0x68>
		str[i++] = (x % 10) + '0';
     ae8:	f7 01       	movw	r30, r14
     aea:	ec 0f       	add	r30, r28
     aec:	fd 1f       	adc	r31, r29
     aee:	c8 01       	movw	r24, r16
     af0:	6a e0       	ldi	r22, 0x0A	; 10
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__divmodhi4>
     af8:	80 5d       	subi	r24, 0xD0	; 208
     afa:	80 83       	st	Z, r24
		x = x / 10;
     afc:	06 2f       	mov	r16, r22
     afe:	17 2f       	mov	r17, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     b00:	21 96       	adiw	r28, 0x01	; 1
     b02:	ef cf       	rjmp	.-34     	; 0xae2 <_Z4ftoafPci+0x46>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     b04:	dd 23       	and	r29, r29
     b06:	3c f4       	brge	.+14     	; 0xb16 <_Z4ftoafPci+0x7a>
	str[i++] = '0';
     b08:	f7 01       	movw	r30, r14
     b0a:	ec 0f       	add	r30, r28
     b0c:	fd 1f       	adc	r31, r29
     b0e:	80 e3       	ldi	r24, 0x30	; 48
     b10:	80 83       	st	Z, r24
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	f7 cf       	rjmp	.-18     	; 0xb04 <_Z4ftoafPci+0x68>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     b16:	9e 01       	movw	r18, r28
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	31 09       	sbc	r19, r1
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     b20:	82 17       	cp	r24, r18
     b22:	93 07       	cpc	r25, r19
     b24:	74 f4       	brge	.+28     	; 0xb42 <_Z4ftoafPci+0xa6>
		temp = str[i];
     b26:	d7 01       	movw	r26, r14
     b28:	a8 0f       	add	r26, r24
     b2a:	b9 1f       	adc	r27, r25
     b2c:	4c 91       	ld	r20, X
		str[i] = str[j];
     b2e:	f7 01       	movw	r30, r14
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
     b34:	50 81       	ld	r21, Z
     b36:	5c 93       	st	X, r21
		str[j] = temp;
     b38:	40 83       	st	Z, r20
		i++;
     b3a:	01 96       	adiw	r24, 0x01	; 1
		j--;
     b3c:	21 50       	subi	r18, 0x01	; 1
     b3e:	31 09       	sbc	r19, r1
     b40:	ef cf       	rjmp	.-34     	; 0xb20 <_Z4ftoafPci+0x84>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     b42:	f7 01       	movw	r30, r14
     b44:	ec 0f       	add	r30, r28
     b46:	fd 1f       	adc	r31, r29
     b48:	10 82       	st	Z, r1
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
	
	// check for display option after point
	if (afterpoint != 0) {
     b4a:	c1 14       	cp	r12, r1
     b4c:	d1 04       	cpc	r13, r1
     b4e:	09 f4       	brne	.+2      	; 0xb52 <_Z4ftoafPci+0xb6>
     b50:	56 c0       	rjmp	.+172    	; 0xbfe <_Z4ftoafPci+0x162>
		res[i] = '.'; // add dot
     b52:	f7 01       	movw	r30, r14
     b54:	ec 0f       	add	r30, r28
     b56:	fd 1f       	adc	r31, r29
     b58:	8e e2       	ldi	r24, 0x2E	; 46
     b5a:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     b5c:	b6 01       	movw	r22, r12
     b5e:	0d 2c       	mov	r0, r13
     b60:	00 0c       	add	r0, r0
     b62:	88 0b       	sbc	r24, r24
     b64:	99 0b       	sbc	r25, r25
     b66:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatsisf>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	80 e2       	ldi	r24, 0x20	; 32
     b74:	91 e4       	ldi	r25, 0x41	; 65
     b76:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <pow>
     b7a:	9b 01       	movw	r18, r22
     b7c:	ac 01       	movw	r20, r24
     b7e:	c5 01       	movw	r24, r10
     b80:	b4 01       	movw	r22, r8
     b82:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     b86:	21 96       	adiw	r28, 0x01	; 1
     b88:	ce 0d       	add	r28, r14
     b8a:	df 1d       	adc	r29, r15
     b8c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__fixsfsi>
     b90:	cb 01       	movw	r24, r22
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
	while (x) {
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	71 f0       	breq	.+28     	; 0xbb6 <_Z4ftoafPci+0x11a>
		str[i++] = (x % 10) + '0';
     b9a:	fe 01       	movw	r30, r28
     b9c:	e2 0f       	add	r30, r18
     b9e:	f3 1f       	adc	r31, r19
     ba0:	6a e0       	ldi	r22, 0x0A	; 10
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__divmodhi4>
     ba8:	80 5d       	subi	r24, 0xD0	; 208
     baa:	80 83       	st	Z, r24
		x = x / 10;
     bac:	86 2f       	mov	r24, r22
     bae:	97 2f       	mov	r25, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	f0 cf       	rjmp	.-32     	; 0xb96 <_Z4ftoafPci+0xfa>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     bb6:	2c 15       	cp	r18, r12
     bb8:	3d 05       	cpc	r19, r13
     bba:	44 f4       	brge	.+16     	; 0xbcc <_Z4ftoafPci+0x130>
	str[i++] = '0';
     bbc:	fe 01       	movw	r30, r28
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	80 e3       	ldi	r24, 0x30	; 48
     bc4:	80 83       	st	Z, r24
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	f5 cf       	rjmp	.-22     	; 0xbb6 <_Z4ftoafPci+0x11a>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     bcc:	a9 01       	movw	r20, r18
     bce:	41 50       	subi	r20, 0x01	; 1
     bd0:	51 09       	sbc	r21, r1
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     bd6:	84 17       	cp	r24, r20
     bd8:	95 07       	cpc	r25, r21
     bda:	74 f4       	brge	.+28     	; 0xbf8 <_Z4ftoafPci+0x15c>
		temp = str[i];
     bdc:	de 01       	movw	r26, r28
     bde:	a8 0f       	add	r26, r24
     be0:	b9 1f       	adc	r27, r25
     be2:	6c 91       	ld	r22, X
		str[i] = str[j];
     be4:	fe 01       	movw	r30, r28
     be6:	e4 0f       	add	r30, r20
     be8:	f5 1f       	adc	r31, r21
     bea:	70 81       	ld	r23, Z
     bec:	7c 93       	st	X, r23
		str[j] = temp;
     bee:	60 83       	st	Z, r22
		i++;
     bf0:	01 96       	adiw	r24, 0x01	; 1
		j--;
     bf2:	41 50       	subi	r20, 0x01	; 1
     bf4:	51 09       	sbc	r21, r1
     bf6:	ef cf       	rjmp	.-34     	; 0xbd6 <_Z4ftoafPci+0x13a>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     bf8:	c2 0f       	add	r28, r18
     bfa:	d3 1f       	adc	r29, r19
     bfc:	18 82       	st	Y, r1
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     bfe:	c7 01       	movw	r24, r14
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1a:	2f ef       	ldi	r18, 0xFF	; 255
     c1c:	8f e7       	ldi	r24, 0x7F	; 127
     c1e:	94 e0       	ldi	r25, 0x04	; 4
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	80 40       	sbci	r24, 0x00	; 0
     c24:	90 40       	sbci	r25, 0x00	; 0
     c26:	e1 f7       	brne	.-8      	; 0xc20 <main+0x6>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <main+0x10>
     c2a:	00 00       	nop
char* ftoa(float n, char* res, int afterpoint);

int main(void)
{
	_delay_ms(100);
	setup();
     c2c:	0e 94 bc 03 	call	0x778	; 0x778 <_Z5setupv>
	ST7789::fillScreen(0, 0, 0);
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 07 09 	call	0x120e	; 0x120e <_ZN6ST778910fillScreenEccc>
     c3a:	ef ef       	ldi	r30, 0xFF	; 255
     c3c:	ff e3       	ldi	r31, 0x3F	; 63
     c3e:	22 e0       	ldi	r18, 0x02	; 2
     c40:	e1 50       	subi	r30, 0x01	; 1
     c42:	f0 40       	sbci	r31, 0x00	; 0
     c44:	20 40       	sbci	r18, 0x00	; 0
     c46:	e1 f7       	brne	.-8      	; 0xc40 <main+0x26>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <main+0x30>
     c4a:	00 00       	nop
	
	//DS1307::writeTime(time);
	_delay_ms(50);
	
	DS1307::readTime(time);
     c4c:	88 e8       	ldi	r24, 0x88	; 136
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN6DS13078readTimeEPc>
		
	while (1) 
    {
		while (time[0] == timecomp){}
     c54:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     c58:	90 91 ec 05 	lds	r25, 0x05EC	; 0x8005ec <timecomp>
     c5c:	89 17       	cp	r24, r25
     c5e:	d1 f3       	breq	.-12     	; 0xc54 <main+0x3a>
		timecomp = time[0];	
     c60:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <timecomp>
		
		xpos = 0;
     c64:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <xpos>
		ypos = 0;
     c68:	10 92 fa 05 	sts	0x05FA, r1	; 0x8005fa <ypos>
		printClock();
     c6c:	0e 94 df 03 	call	0x7be	; 0x7be <_Z10printClockv>
		
		
		
		xpos = 0;
     c70:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <xpos>
		ypos = 40;
     c74:	88 e2       	ldi	r24, 0x28	; 40
     c76:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <ypos>
		
		// Расчеты времён		
		timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
     c7a:	c8 e8       	ldi	r28, 0x88	; 136
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	1a 81       	ldd	r17, Y+2	; 0x02
     c80:	69 81       	ldd	r22, Y+1	; 0x01
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e7       	ldi	r20, 0x70	; 112
     c92:	52 e4       	ldi	r21, 0x42	; 66
     c94:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     c98:	4b 01       	movw	r8, r22
     c9a:	5c 01       	movw	r10, r24
     c9c:	61 2f       	mov	r22, r17
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     ca8:	a5 01       	movw	r20, r10
     caa:	94 01       	movw	r18, r8
     cac:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     cb0:	4b 01       	movw	r8, r22
     cb2:	5c 01       	movw	r10, r24
     cb4:	68 81       	ld	r22, Y
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	41 e6       	ldi	r20, 0x61	; 97
     cc6:	55 e4       	ldi	r21, 0x45	; 69
     cc8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	c5 01       	movw	r24, r10
     cd2:	b4 01       	movw	r22, r8
     cd4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     cd8:	4b 01       	movw	r8, r22
     cda:	5c 01       	movw	r10, r24
     cdc:	60 93 ed 05 	sts	0x05ED, r22	; 0x8005ed <timeDec>
     ce0:	70 93 ee 05 	sts	0x05EE, r23	; 0x8005ee <timeDec+0x1>
     ce4:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <timeDec+0x2>
     ce8:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <timeDec+0x3>
		
		for(char i = 0; i < 4; i++)
     cec:	f1 2c       	mov	r15, r1
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	8f 15       	cp	r24, r15
     cf2:	78 f1       	brcs	.+94     	; 0xd52 <main+0x138>
		{
			timescheduleDec[i] = (float)timeschedule[i][0] + (float)timeschedule[i][1] / 60.0;
     cf4:	cf 2d       	mov	r28, r15
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	8e 01       	movw	r16, r28
     cfa:	00 0f       	add	r16, r16
     cfc:	11 1f       	adc	r17, r17
     cfe:	00 58       	subi	r16, 0x80	; 128
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	f8 01       	movw	r30, r16
     d04:	60 81       	ld	r22, Z
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     d10:	2b 01       	movw	r4, r22
     d12:	3c 01       	movw	r6, r24
     d14:	f8 01       	movw	r30, r16
     d16:	61 81       	ldd	r22, Z+1	; 0x01
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e7       	ldi	r20, 0x70	; 112
     d28:	52 e4       	ldi	r21, 0x42	; 66
     d2a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c3 01       	movw	r24, r6
     d34:	b2 01       	movw	r22, r4
     d36:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     d3a:	cc 0f       	add	r28, r28
     d3c:	dd 1f       	adc	r29, r29
     d3e:	cc 0f       	add	r28, r28
     d40:	dd 1f       	adc	r29, r29
     d42:	c4 52       	subi	r28, 0x24	; 36
     d44:	da 4f       	sbci	r29, 0xFA	; 250
     d46:	68 83       	st	Y, r22
     d48:	79 83       	std	Y+1, r23	; 0x01
     d4a:	8a 83       	std	Y+2, r24	; 0x02
     d4c:	9b 83       	std	Y+3, r25	; 0x03
		ypos = 40;
		
		// Расчеты времён		
		timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
		
		for(char i = 0; i < 4; i++)
     d4e:	f3 94       	inc	r15
     d50:	ce cf       	rjmp	.-100    	; 0xcee <main+0xd4>
		}
		


		// Определение слова и скважности
		if (timeDec < timescheduleDec[0])													// Время меньше чем время рассвета = ночь - 3
     d52:	20 91 dc 05 	lds	r18, 0x05DC	; 0x8005dc <__data_end>
     d56:	30 91 dd 05 	lds	r19, 0x05DD	; 0x8005dd <__data_end+0x1>
     d5a:	40 91 de 05 	lds	r20, 0x05DE	; 0x8005de <__data_end+0x2>
     d5e:	50 91 df 05 	lds	r21, 0x05DF	; 0x8005df <__data_end+0x3>
     d62:	c5 01       	movw	r24, r10
     d64:	b4 01       	movw	r22, r8
     d66:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__cmpsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	a4 f4       	brge	.+40     	; 0xd96 <main+0x17c>
		{
			ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
     d6e:	0f 2e       	mov	r0, r31
     d70:	f5 e0       	ldi	r31, 0x05	; 5
     d72:	cf 2e       	mov	r12, r31
     d74:	f0 2d       	mov	r31, r0
     d76:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     d7a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     d7e:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     d82:	4a ef       	ldi	r20, 0xFA	; 250
     d84:	55 e0       	ldi	r21, 0x05	; 5
     d86:	6b ef       	ldi	r22, 0xFB	; 251
     d88:	75 e0       	ldi	r23, 0x05	; 5
     d8a:	88 e7       	ldi	r24, 0x78	; 120
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 0;
     d92:	1c be       	out	0x3c, r1	; 60
     d94:	d7 c0       	rjmp	.+430    	; 0xf44 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[1])												// Время меньше чем время начала дня = рассвет - 0
     d96:	20 91 e0 05 	lds	r18, 0x05E0	; 0x8005e0 <__data_end+0x4>
     d9a:	30 91 e1 05 	lds	r19, 0x05E1	; 0x8005e1 <__data_end+0x5>
     d9e:	40 91 e2 05 	lds	r20, 0x05E2	; 0x8005e2 <__data_end+0x6>
     da2:	50 91 e3 05 	lds	r21, 0x05E3	; 0x8005e3 <__data_end+0x7>
     da6:	c5 01       	movw	r24, r10
     da8:	b4 01       	movw	r22, r8
     daa:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__cmpsf2>
     dae:	88 23       	and	r24, r24
     db0:	f4 f5       	brge	.+124    	; 0xe2e <main+0x214>
		{
			ST7789::printString(wordschedule[0], &xpos, &ypos, red, green, blue, 5);
     db2:	0f 2e       	mov	r0, r31
     db4:	f5 e0       	ldi	r31, 0x05	; 5
     db6:	cf 2e       	mov	r12, r31
     db8:	f0 2d       	mov	r31, r0
     dba:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     dbe:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     dc2:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	55 e0       	ldi	r21, 0x05	; 5
     dca:	6b ef       	ldi	r22, 0xFB	; 251
     dcc:	75 e0       	ldi	r23, 0x05	; 5
     dce:	80 e6       	ldi	r24, 0x60	; 96
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = (char)(((timeDec - timescheduleDec[0])/(timescheduleDec[1] - timescheduleDec[0])) * 255.0);
     dd6:	cc ed       	ldi	r28, 0xDC	; 220
     dd8:	d5 e0       	ldi	r29, 0x05	; 5
     dda:	88 80       	ld	r8, Y
     ddc:	99 80       	ldd	r9, Y+1	; 0x01
     dde:	aa 80       	ldd	r10, Y+2	; 0x02
     de0:	bb 80       	ldd	r11, Y+3	; 0x03
     de2:	a5 01       	movw	r20, r10
     de4:	94 01       	movw	r18, r8
     de6:	60 91 ed 05 	lds	r22, 0x05ED	; 0x8005ed <timeDec>
     dea:	70 91 ee 05 	lds	r23, 0x05EE	; 0x8005ee <timeDec+0x1>
     dee:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <timeDec+0x2>
     df2:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <timeDec+0x3>
     df6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     dfa:	2b 01       	movw	r4, r22
     dfc:	3c 01       	movw	r6, r24
     dfe:	6c 81       	ldd	r22, Y+4	; 0x04
     e00:	7d 81       	ldd	r23, Y+5	; 0x05
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	a5 01       	movw	r20, r10
     e08:	94 01       	movw	r18, r8
     e0a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	c3 01       	movw	r24, r6
     e14:	b2 01       	movw	r22, r4
     e16:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	4f e7       	ldi	r20, 0x7F	; 127
     e20:	53 e4       	ldi	r21, 0x43	; 67
     e22:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3>
     e26:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fixunssfsi>
     e2a:	6c bf       	out	0x3c, r22	; 60
     e2c:	8b c0       	rjmp	.+278    	; 0xf44 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[2])												// Время меньше чем время конца дня = день - 1
     e2e:	20 91 e4 05 	lds	r18, 0x05E4	; 0x8005e4 <__data_end+0x8>
     e32:	30 91 e5 05 	lds	r19, 0x05E5	; 0x8005e5 <__data_end+0x9>
     e36:	40 91 e6 05 	lds	r20, 0x05E6	; 0x8005e6 <__data_end+0xa>
     e3a:	50 91 e7 05 	lds	r21, 0x05E7	; 0x8005e7 <__data_end+0xb>
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__cmpsf2>
     e46:	88 23       	and	r24, r24
     e48:	ac f4       	brge	.+42     	; 0xe74 <main+0x25a>
		{
			ST7789::printString(wordschedule[1], &xpos, &ypos, red, green, blue, 5);
     e4a:	0f 2e       	mov	r0, r31
     e4c:	f5 e0       	ldi	r31, 0x05	; 5
     e4e:	cf 2e       	mov	r12, r31
     e50:	f0 2d       	mov	r31, r0
     e52:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     e56:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     e5a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     e5e:	4a ef       	ldi	r20, 0xFA	; 250
     e60:	55 e0       	ldi	r21, 0x05	; 5
     e62:	6b ef       	ldi	r22, 0xFB	; 251
     e64:	75 e0       	ldi	r23, 0x05	; 5
     e66:	88 e6       	ldi	r24, 0x68	; 104
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 255;
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	8c bf       	out	0x3c, r24	; 60
     e72:	68 c0       	rjmp	.+208    	; 0xf44 <main+0x32a>
		}
		else if (timeDec < timescheduleDec[3])												// Время меньше чем время конца заката = закат - 2
     e74:	20 91 e8 05 	lds	r18, 0x05E8	; 0x8005e8 <__data_end+0xc>
     e78:	30 91 e9 05 	lds	r19, 0x05E9	; 0x8005e9 <__data_end+0xd>
     e7c:	40 91 ea 05 	lds	r20, 0x05EA	; 0x8005ea <__data_end+0xe>
     e80:	50 91 eb 05 	lds	r21, 0x05EB	; 0x8005eb <__data_end+0xf>
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__cmpsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	0c f0       	brlt	.+2      	; 0xe92 <main+0x278>
     e90:	46 c0       	rjmp	.+140    	; 0xf1e <main+0x304>
		{
			ST7789::printString(wordschedule[2], &xpos, &ypos, red, green, blue, 5);
     e92:	0f 2e       	mov	r0, r31
     e94:	f5 e0       	ldi	r31, 0x05	; 5
     e96:	cf 2e       	mov	r12, r31
     e98:	f0 2d       	mov	r31, r0
     e9a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     e9e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     ea2:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     ea6:	4a ef       	ldi	r20, 0xFA	; 250
     ea8:	55 e0       	ldi	r21, 0x05	; 5
     eaa:	6b ef       	ldi	r22, 0xFB	; 251
     eac:	75 e0       	ldi	r23, 0x05	; 5
     eae:	80 e7       	ldi	r24, 0x70	; 112
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = (char)((1.0 - ((timeDec - timescheduleDec[2])/(timescheduleDec[3] - timescheduleDec[2]))) * 255.0);
     eb6:	cc ed       	ldi	r28, 0xDC	; 220
     eb8:	d5 e0       	ldi	r29, 0x05	; 5
     eba:	88 84       	ldd	r8, Y+8	; 0x08
     ebc:	99 84       	ldd	r9, Y+9	; 0x09
     ebe:	aa 84       	ldd	r10, Y+10	; 0x0a
     ec0:	bb 84       	ldd	r11, Y+11	; 0x0b
     ec2:	a5 01       	movw	r20, r10
     ec4:	94 01       	movw	r18, r8
     ec6:	60 91 ed 05 	lds	r22, 0x05ED	; 0x8005ed <timeDec>
     eca:	70 91 ee 05 	lds	r23, 0x05EE	; 0x8005ee <timeDec+0x1>
     ece:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <timeDec+0x2>
     ed2:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <timeDec+0x3>
     ed6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     eda:	2b 01       	movw	r4, r22
     edc:	3c 01       	movw	r6, r24
     ede:	6c 85       	ldd	r22, Y+12	; 0x0c
     ee0:	7d 85       	ldd	r23, Y+13	; 0x0d
     ee2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee6:	a5 01       	movw	r20, r10
     ee8:	94 01       	movw	r18, r8
     eea:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c3 01       	movw	r24, r6
     ef4:	b2 01       	movw	r22, r4
     ef6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     efa:	9b 01       	movw	r18, r22
     efc:	ac 01       	movw	r20, r24
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e8       	ldi	r24, 0x80	; 128
     f04:	9f e3       	ldi	r25, 0x3F	; 63
     f06:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	53 e4       	ldi	r21, 0x43	; 67
     f12:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3>
     f16:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fixunssfsi>
     f1a:	6c bf       	out	0x3c, r22	; 60
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <main+0x32a>
		}
		else																				// В остальных случаях ночь - 3
		{
			ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
     f1e:	0f 2e       	mov	r0, r31
     f20:	f5 e0       	ldi	r31, 0x05	; 5
     f22:	cf 2e       	mov	r12, r31
     f24:	f0 2d       	mov	r31, r0
     f26:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     f2a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     f2e:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	55 e0       	ldi	r21, 0x05	; 5
     f36:	6b ef       	ldi	r22, 0xFB	; 251
     f38:	75 e0       	ldi	r23, 0x05	; 5
     f3a:	88 e7       	ldi	r24, 0x78	; 120
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
			OCR0 = 0;
     f42:	1c be       	out	0x3c, r1	; 60
		
		
		
		
		
		xpos = 0;
     f44:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <xpos>
		ypos = 85;
     f48:	85 e5       	ldi	r24, 0x55	; 85
     f4a:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <ypos>
		
		ST7789::printString(itoa(OCR0, buffer, 10), &xpos, &ypos, red, green, blue, 3);
     f4e:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     f52:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     f56:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     f5a:	8c b7       	in	r24, 0x3c	; 60
     f5c:	4a e0       	ldi	r20, 0x0A	; 10
     f5e:	61 ef       	ldi	r22, 0xF1	; 241
     f60:	75 e0       	ldi	r23, 0x05	; 5
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__itoa_ncheck>
     f68:	0f 2e       	mov	r0, r31
     f6a:	f3 e0       	ldi	r31, 0x03	; 3
     f6c:	cf 2e       	mov	r12, r31
     f6e:	f0 2d       	mov	r31, r0
     f70:	2c 2f       	mov	r18, r28
     f72:	4a ef       	ldi	r20, 0xFA	; 250
     f74:	55 e0       	ldi	r21, 0x05	; 5
     f76:	6b ef       	ldi	r22, 0xFB	; 251
     f78:	75 e0       	ldi	r23, 0x05	; 5
     f7a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(" ", &xpos, &ypos, red, green, blue, 3);
     f7e:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     f82:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     f86:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     f8a:	4a ef       	ldi	r20, 0xFA	; 250
     f8c:	55 e0       	ldi	r21, 0x05	; 5
     f8e:	6b ef       	ldi	r22, 0xFB	; 251
     f90:	75 e0       	ldi	r23, 0x05	; 5
     f92:	89 e9       	ldi	r24, 0x99	; 153
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		if ((float)OCR0/2.55 < 10)
     f9a:	6c b7       	in	r22, 0x3c	; 60
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     fa6:	23 e3       	ldi	r18, 0x33	; 51
     fa8:	33 e3       	ldi	r19, 0x33	; 51
     faa:	43 e2       	ldi	r20, 0x23	; 35
     fac:	50 e4       	ldi	r21, 0x40	; 64
     fae:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__cmpsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	74 f4       	brge	.+28     	; 0xfde <main+0x3c4>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     fc2:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     fc6:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     fca:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	55 e0       	ldi	r21, 0x05	; 5
     fd2:	6b ef       	ldi	r22, 0xFB	; 251
     fd4:	75 e0       	ldi	r23, 0x05	; 5
     fd6:	83 e9       	ldi	r24, 0x93	; 147
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		
		ST7789::printString(ftoa(((float)OCR0/2.55), buffer, 2), &xpos, &ypos, red, green, blue, 3);
     fde:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     fe2:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     fe6:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
     fea:	6c b7       	in	r22, 0x3c	; 60
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 03 0c 	call	0x1806	; 0x1806 <__floatunsisf>
     ff6:	23 e3       	ldi	r18, 0x33	; 51
     ff8:	33 e3       	ldi	r19, 0x33	; 51
     ffa:	43 e2       	ldi	r20, 0x23	; 35
     ffc:	50 e4       	ldi	r21, 0x40	; 64
     ffe:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__divsf3>
    1002:	22 e0       	ldi	r18, 0x02	; 2
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	41 ef       	ldi	r20, 0xF1	; 241
    1008:	55 e0       	ldi	r21, 0x05	; 5
    100a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z4ftoafPci>
    100e:	0f 2e       	mov	r0, r31
    1010:	f3 e0       	ldi	r31, 0x03	; 3
    1012:	cf 2e       	mov	r12, r31
    1014:	f0 2d       	mov	r31, r0
    1016:	2c 2f       	mov	r18, r28
    1018:	4a ef       	ldi	r20, 0xFA	; 250
    101a:	55 e0       	ldi	r21, 0x05	; 5
    101c:	6b ef       	ldi	r22, 0xFB	; 251
    101e:	75 e0       	ldi	r23, 0x05	; 5
    1020:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString("%  ", &xpos, &ypos, red, green, blue, 3);
    1024:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    1028:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    102c:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1030:	4a ef       	ldi	r20, 0xFA	; 250
    1032:	55 e0       	ldi	r21, 0x05	; 5
    1034:	6b ef       	ldi	r22, 0xFB	; 251
    1036:	75 e0       	ldi	r23, 0x05	; 5
    1038:	87 e9       	ldi	r24, 0x97	; 151
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		xpos = 0;
    1040:	10 92 fb 05 	sts	0x05FB, r1	; 0x8005fb <xpos>
		ypos = 130;
    1044:	82 e8       	ldi	r24, 0x82	; 130
    1046:	80 93 fa 05 	sts	0x05FA, r24	; 0x8005fa <ypos>
		printSchedule();
    104a:	0e 94 8d 04 	call	0x91a	; 0x91a <_Z13printSchedulev>
	//DS1307::writeTime(time);
	_delay_ms(50);
	
	DS1307::readTime(time);
		
	while (1) 
    104e:	02 ce       	rjmp	.-1020   	; 0xc54 <main+0x3a>

00001050 <_GLOBAL__sub_I_syncflag>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
    1050:	6f ef       	ldi	r22, 0xFF	; 255
    1052:	7f ef       	ldi	r23, 0xFF	; 255
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 34 02 	call	0x468	; 0x468 <_Z41__static_initialization_and_destruction_0ii>
    105c:	08 95       	ret

0000105e <_ZN6ST77894initEv>:
	//==============================================================================

	void init(void)
	{
		// Настройка пинов SPI
		DDR_SPI  |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(0 << MISO);		// Обязательная настройка! Для всех 4-х пинов SPI!
    105e:	87 b3       	in	r24, 0x17	; 23
    1060:	80 6b       	ori	r24, 0xB0	; 176
    1062:	87 bb       	out	0x17, r24	; 23
		PORT_SPI |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(1 << MISO);		//
    1064:	88 b3       	in	r24, 0x18	; 24
    1066:	80 6f       	ori	r24, 0xF0	; 240
    1068:	88 bb       	out	0x18, r24	; 24
			
		// Настройка реистра SPI
		// Разрешение SPI - (SPE), старший бит вперед - (DORD), мастер - (MSTR), режим ? ((1 << CPHA)|(0 << SPR1)), делитель частоты - 64 (SPR1, SPR0) (~230кГц)
		SPCR = (1 << SPE)|(0 << DORD)|(1 << MSTR)|(1 << CPOL)|(1 << CPHA)|(0 << SPR1)|(0 << SPR0);	// (1 << CPHA)|(1 << SPR1) - обязательно для ST7789!!!
    106a:	8c e5       	ldi	r24, 0x5C	; 92
    106c:	8d b9       	out	0x0d, r24	; 13
		SPSR = (1 << SPI2X);
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	9e b9       	out	0x0e, r25	; 14
			
		// Настройка пина RES ST7789
		DDR_RES  |= (1 << RES);											// Выходы (1)
    1072:	84 b3       	in	r24, 0x14	; 20
    1074:	88 60       	ori	r24, 0x08	; 8
    1076:	84 bb       	out	0x14, r24	; 20
		PORT_RES |= (1 << RES);											// Изначально высокий уровень RES
    1078:	85 b3       	in	r24, 0x15	; 21
    107a:	88 60       	ori	r24, 0x08	; 8
    107c:	85 bb       	out	0x15, r24	; 21
			
		// Настройка пина защёлки ST7789
		DDR_DC  |= (1 << DC);											// Выходы (1)
    107e:	84 b3       	in	r24, 0x14	; 20
    1080:	84 60       	ori	r24, 0x04	; 4
    1082:	84 bb       	out	0x14, r24	; 20
		PORT_DC |= (1 << DC);											// Изначально высокий уровень DC
    1084:	85 b3       	in	r24, 0x15	; 21
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	85 bb       	out	0x15, r24	; 21
		
		
		// Рестарт экрана
		RESET_HIGH;
    108a:	85 b3       	in	r24, 0x15	; 21
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	85 bb       	out	0x15, r24	; 21
    1090:	e7 e8       	ldi	r30, 0x87	; 135
    1092:	f3 e1       	ldi	r31, 0x13	; 19
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <_ZN6ST77894initEv+0x36>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <_ZN6ST77894initEv+0x3c>
    109a:	00 00       	nop
		_delay_ms(20);
		RESET_LOW;
    109c:	85 b3       	in	r24, 0x15	; 21
    109e:	87 7f       	andi	r24, 0xF7	; 247
    10a0:	85 bb       	out	0x15, r24	; 21
    10a2:	e1 ee       	ldi	r30, 0xE1	; 225
    10a4:	f4 e0       	ldi	r31, 0x04	; 4
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <_ZN6ST77894initEv+0x48>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <_ZN6ST77894initEv+0x4e>
    10ac:	00 00       	nop
		_delay_ms(5);
		RESET_HIGH;
    10ae:	85 b3       	in	r24, 0x15	; 21
    10b0:	88 60       	ori	r24, 0x08	; 8
    10b2:	85 bb       	out	0x15, r24	; 21
    10b4:	e7 e8       	ldi	r30, 0x87	; 135
    10b6:	f3 e1       	ldi	r31, 0x13	; 19
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <_ZN6ST77894initEv+0x5a>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <_ZN6ST77894initEv+0x60>
    10be:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    10c0:	85 b3       	in	r24, 0x15	; 21
    10c2:	8b 7f       	andi	r24, 0xFB	; 251
    10c4:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    10c6:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    10c8:	77 9b       	sbis	0x0e, 7	; 14
    10ca:	fe cf       	rjmp	.-4      	; 0x10c8 <_ZN6ST77894initEv+0x6a>
    10cc:	83 ec       	ldi	r24, 0xC3	; 195
    10ce:	99 e0       	ldi	r25, 0x09	; 9
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <_ZN6ST77894initEv+0x72>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <_ZN6ST77894initEv+0x78>
    10d6:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    10d8:	85 b3       	in	r24, 0x15	; 21
    10da:	8b 7f       	andi	r24, 0xFB	; 251
    10dc:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    10de:	81 e1       	ldi	r24, 0x11	; 17
    10e0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    10e2:	77 9b       	sbis	0x0e, 7	; 14
    10e4:	fe cf       	rjmp	.-4      	; 0x10e2 <_ZN6ST77894initEv+0x84>
    10e6:	e3 ec       	ldi	r30, 0xC3	; 195
    10e8:	f9 e0       	ldi	r31, 0x09	; 9
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <_ZN6ST77894initEv+0x8c>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <_ZN6ST77894initEv+0x92>
    10f0:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    10f2:	85 b3       	in	r24, 0x15	; 21
    10f4:	8b 7f       	andi	r24, 0xFB	; 251
    10f6:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    10f8:	8a e3       	ldi	r24, 0x3A	; 58
    10fa:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    10fc:	77 9b       	sbis	0x0e, 7	; 14
    10fe:	fe cf       	rjmp	.-4      	; 0x10fc <_ZN6ST77894initEv+0x9e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1100:	85 b3       	in	r24, 0x15	; 21
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1106:	86 e0       	ldi	r24, 0x06	; 6
    1108:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    110a:	77 9b       	sbis	0x0e, 7	; 14
    110c:	fe cf       	rjmp	.-4      	; 0x110a <_ZN6ST77894initEv+0xac>
    110e:	83 ec       	ldi	r24, 0xC3	; 195
    1110:	99 e0       	ldi	r25, 0x09	; 9
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	f1 f7       	brne	.-4      	; 0x1112 <_ZN6ST77894initEv+0xb4>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <_ZN6ST77894initEv+0xba>
    1118:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    111a:	85 b3       	in	r24, 0x15	; 21
    111c:	8b 7f       	andi	r24, 0xFB	; 251
    111e:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1120:	86 e3       	ldi	r24, 0x36	; 54
    1122:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1124:	77 9b       	sbis	0x0e, 7	; 14
    1126:	fe cf       	rjmp	.-4      	; 0x1124 <_ZN6ST77894initEv+0xc6>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1128:	85 b3       	in	r24, 0x15	; 21
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    112e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1130:	77 9b       	sbis	0x0e, 7	; 14
    1132:	fe cf       	rjmp	.-4      	; 0x1130 <_ZN6ST77894initEv+0xd2>
    1134:	e3 ec       	ldi	r30, 0xC3	; 195
    1136:	f9 e0       	ldi	r31, 0x09	; 9
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <_ZN6ST77894initEv+0xda>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <_ZN6ST77894initEv+0xe0>
    113e:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1140:	85 b3       	in	r24, 0x15	; 21
    1142:	8b 7f       	andi	r24, 0xFB	; 251
    1144:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1146:	8a e2       	ldi	r24, 0x2A	; 42
    1148:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    114a:	77 9b       	sbis	0x0e, 7	; 14
    114c:	fe cf       	rjmp	.-4      	; 0x114a <_ZN6ST77894initEv+0xec>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    114e:	85 b3       	in	r24, 0x15	; 21
    1150:	84 60       	ori	r24, 0x04	; 4
    1152:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1154:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1156:	77 9b       	sbis	0x0e, 7	; 14
    1158:	fe cf       	rjmp	.-4      	; 0x1156 <_ZN6ST77894initEv+0xf8>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    115a:	85 b3       	in	r24, 0x15	; 21
    115c:	84 60       	ori	r24, 0x04	; 4
    115e:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1160:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1162:	77 9b       	sbis	0x0e, 7	; 14
    1164:	fe cf       	rjmp	.-4      	; 0x1162 <_ZN6ST77894initEv+0x104>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1166:	85 b3       	in	r24, 0x15	; 21
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    116c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    116e:	77 9b       	sbis	0x0e, 7	; 14
    1170:	fe cf       	rjmp	.-4      	; 0x116e <_ZN6ST77894initEv+0x110>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1172:	85 b3       	in	r24, 0x15	; 21
    1174:	84 60       	ori	r24, 0x04	; 4
    1176:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1178:	80 ef       	ldi	r24, 0xF0	; 240
    117a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    117c:	77 9b       	sbis	0x0e, 7	; 14
    117e:	fe cf       	rjmp	.-4      	; 0x117c <_ZN6ST77894initEv+0x11e>
    1180:	83 ec       	ldi	r24, 0xC3	; 195
    1182:	99 e0       	ldi	r25, 0x09	; 9
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <_ZN6ST77894initEv+0x126>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <_ZN6ST77894initEv+0x12c>
    118a:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    118c:	85 b3       	in	r24, 0x15	; 21
    118e:	8b 7f       	andi	r24, 0xFB	; 251
    1190:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1192:	8b e2       	ldi	r24, 0x2B	; 43
    1194:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1196:	77 9b       	sbis	0x0e, 7	; 14
    1198:	fe cf       	rjmp	.-4      	; 0x1196 <_ZN6ST77894initEv+0x138>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    119a:	85 b3       	in	r24, 0x15	; 21
    119c:	84 60       	ori	r24, 0x04	; 4
    119e:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11a0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    11a2:	77 9b       	sbis	0x0e, 7	; 14
    11a4:	fe cf       	rjmp	.-4      	; 0x11a2 <_ZN6ST77894initEv+0x144>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11a6:	85 b3       	in	r24, 0x15	; 21
    11a8:	84 60       	ori	r24, 0x04	; 4
    11aa:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11ac:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    11ae:	77 9b       	sbis	0x0e, 7	; 14
    11b0:	fe cf       	rjmp	.-4      	; 0x11ae <_ZN6ST77894initEv+0x150>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11b2:	85 b3       	in	r24, 0x15	; 21
    11b4:	84 60       	ori	r24, 0x04	; 4
    11b6:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11b8:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    11ba:	77 9b       	sbis	0x0e, 7	; 14
    11bc:	fe cf       	rjmp	.-4      	; 0x11ba <_ZN6ST77894initEv+0x15c>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    11be:	85 b3       	in	r24, 0x15	; 21
    11c0:	84 60       	ori	r24, 0x04	; 4
    11c2:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11c4:	80 ef       	ldi	r24, 0xF0	; 240
    11c6:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    11c8:	77 9b       	sbis	0x0e, 7	; 14
    11ca:	fe cf       	rjmp	.-4      	; 0x11c8 <_ZN6ST77894initEv+0x16a>
    11cc:	e3 ec       	ldi	r30, 0xC3	; 195
    11ce:	f9 e0       	ldi	r31, 0x09	; 9
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <_ZN6ST77894initEv+0x172>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <_ZN6ST77894initEv+0x178>
    11d6:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    11d8:	85 b3       	in	r24, 0x15	; 21
    11da:	8b 7f       	andi	r24, 0xFB	; 251
    11dc:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11de:	81 e2       	ldi	r24, 0x21	; 33
    11e0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    11e2:	77 9b       	sbis	0x0e, 7	; 14
    11e4:	fe cf       	rjmp	.-4      	; 0x11e2 <_ZN6ST77894initEv+0x184>
    11e6:	83 ec       	ldi	r24, 0xC3	; 195
    11e8:	99 e0       	ldi	r25, 0x09	; 9
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <_ZN6ST77894initEv+0x18c>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <_ZN6ST77894initEv+0x192>
    11f0:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    11f2:	85 b3       	in	r24, 0x15	; 21
    11f4:	8b 7f       	andi	r24, 0xFB	; 251
    11f6:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    11f8:	89 e2       	ldi	r24, 0x29	; 41
    11fa:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    11fc:	77 9b       	sbis	0x0e, 7	; 14
    11fe:	fe cf       	rjmp	.-4      	; 0x11fc <_ZN6ST77894initEv+0x19e>
    1200:	e3 ec       	ldi	r30, 0xC3	; 195
    1202:	f9 e0       	ldi	r31, 0x09	; 9
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <_ZN6ST77894initEv+0x1a6>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <_ZN6ST77894initEv+0x1ac>
    120a:	00 00       	nop
    120c:	08 95       	ret

0000120e <_ZN6ST778910fillScreenEccc>:
	//==============================================================================
	//							Функции экрана ST7789
	//==============================================================================
		
	void fillScreen(char red, char green, char blue)
	{
    120e:	26 2f       	mov	r18, r22
    1210:	34 2f       	mov	r19, r20
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1212:	95 b3       	in	r25, 0x15	; 21
    1214:	9b 7f       	andi	r25, 0xFB	; 251
    1216:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1218:	9a e2       	ldi	r25, 0x2A	; 42
    121a:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    121c:	77 9b       	sbis	0x0e, 7	; 14
    121e:	fe cf       	rjmp	.-4      	; 0x121c <_ZN6ST778910fillScreenEccc+0xe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1220:	95 b3       	in	r25, 0x15	; 21
    1222:	94 60       	ori	r25, 0x04	; 4
    1224:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1226:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1228:	77 9b       	sbis	0x0e, 7	; 14
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <_ZN6ST778910fillScreenEccc+0x1a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    122c:	95 b3       	in	r25, 0x15	; 21
    122e:	94 60       	ori	r25, 0x04	; 4
    1230:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1232:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1234:	77 9b       	sbis	0x0e, 7	; 14
    1236:	fe cf       	rjmp	.-4      	; 0x1234 <_ZN6ST778910fillScreenEccc+0x26>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1238:	95 b3       	in	r25, 0x15	; 21
    123a:	94 60       	ori	r25, 0x04	; 4
    123c:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    123e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1240:	77 9b       	sbis	0x0e, 7	; 14
    1242:	fe cf       	rjmp	.-4      	; 0x1240 <_ZN6ST778910fillScreenEccc+0x32>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1244:	95 b3       	in	r25, 0x15	; 21
    1246:	94 60       	ori	r25, 0x04	; 4
    1248:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    124a:	90 ef       	ldi	r25, 0xF0	; 240
    124c:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    124e:	77 9b       	sbis	0x0e, 7	; 14
    1250:	fe cf       	rjmp	.-4      	; 0x124e <_ZN6ST778910fillScreenEccc+0x40>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1252:	95 b3       	in	r25, 0x15	; 21
    1254:	9b 7f       	andi	r25, 0xFB	; 251
    1256:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1258:	9b e2       	ldi	r25, 0x2B	; 43
    125a:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    125c:	77 9b       	sbis	0x0e, 7	; 14
    125e:	fe cf       	rjmp	.-4      	; 0x125c <_ZN6ST778910fillScreenEccc+0x4e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1260:	95 b3       	in	r25, 0x15	; 21
    1262:	94 60       	ori	r25, 0x04	; 4
    1264:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1266:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1268:	77 9b       	sbis	0x0e, 7	; 14
    126a:	fe cf       	rjmp	.-4      	; 0x1268 <_ZN6ST778910fillScreenEccc+0x5a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    126c:	95 b3       	in	r25, 0x15	; 21
    126e:	94 60       	ori	r25, 0x04	; 4
    1270:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1272:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1274:	77 9b       	sbis	0x0e, 7	; 14
    1276:	fe cf       	rjmp	.-4      	; 0x1274 <_ZN6ST778910fillScreenEccc+0x66>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1278:	95 b3       	in	r25, 0x15	; 21
    127a:	94 60       	ori	r25, 0x04	; 4
    127c:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    127e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1280:	77 9b       	sbis	0x0e, 7	; 14
    1282:	fe cf       	rjmp	.-4      	; 0x1280 <_ZN6ST778910fillScreenEccc+0x72>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1284:	95 b3       	in	r25, 0x15	; 21
    1286:	94 60       	ori	r25, 0x04	; 4
    1288:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    128a:	90 ef       	ldi	r25, 0xF0	; 240
    128c:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    128e:	77 9b       	sbis	0x0e, 7	; 14
    1290:	fe cf       	rjmp	.-4      	; 0x128e <_ZN6ST778910fillScreenEccc+0x80>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1292:	95 b3       	in	r25, 0x15	; 21
    1294:	9b 7f       	andi	r25, 0xFB	; 251
    1296:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1298:	9c e2       	ldi	r25, 0x2C	; 44
    129a:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    129c:	77 9b       	sbis	0x0e, 7	; 14
    129e:	fe cf       	rjmp	.-4      	; 0x129c <_ZN6ST778910fillScreenEccc+0x8e>
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	ba 01       	movw	r22, r20
		sendData(240 >> 8);			// YE highpart	(Старшая часть конечного положения Ряда)
		sendData(240);				// YE highpart	(Младшая часть конечного положения Ряда)

		sendCommand(0x2C);			// НЕ ПОМНЮ ЧТО ЭТО?
		
		for(long int i = 0; i < 57600; i++)
    12a6:	41 15       	cp	r20, r1
    12a8:	91 ee       	ldi	r25, 0xE1	; 225
    12aa:	59 07       	cpc	r21, r25
    12ac:	61 05       	cpc	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	04 f5       	brge	.+64     	; 0x12f2 <_ZN6ST778910fillScreenEccc+0xe4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12b2:	95 b3       	in	r25, 0x15	; 21
    12b4:	94 60       	ori	r25, 0x04	; 4
    12b6:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    12b8:	98 2f       	mov	r25, r24
    12ba:	99 0f       	add	r25, r25
    12bc:	99 0f       	add	r25, r25
    12be:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    12c0:	77 9b       	sbis	0x0e, 7	; 14
    12c2:	fe cf       	rjmp	.-4      	; 0x12c0 <_ZN6ST778910fillScreenEccc+0xb2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12c4:	95 b3       	in	r25, 0x15	; 21
    12c6:	94 60       	ori	r25, 0x04	; 4
    12c8:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    12ca:	92 2f       	mov	r25, r18
    12cc:	99 0f       	add	r25, r25
    12ce:	99 0f       	add	r25, r25
    12d0:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    12d2:	77 9b       	sbis	0x0e, 7	; 14
    12d4:	fe cf       	rjmp	.-4      	; 0x12d2 <_ZN6ST778910fillScreenEccc+0xc4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    12d6:	95 b3       	in	r25, 0x15	; 21
    12d8:	94 60       	ori	r25, 0x04	; 4
    12da:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    12dc:	93 2f       	mov	r25, r19
    12de:	99 0f       	add	r25, r25
    12e0:	99 0f       	add	r25, r25
    12e2:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    12e4:	77 9b       	sbis	0x0e, 7	; 14
    12e6:	fe cf       	rjmp	.-4      	; 0x12e4 <_ZN6ST778910fillScreenEccc+0xd6>
    12e8:	4f 5f       	subi	r20, 0xFF	; 255
    12ea:	5f 4f       	sbci	r21, 0xFF	; 255
    12ec:	6f 4f       	sbci	r22, 0xFF	; 255
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	da cf       	rjmp	.-76     	; 0x12a6 <_ZN6ST778910fillScreenEccc+0x98>
    12f2:	08 95       	ret

000012f4 <_ZN6ST778911printStringEPcS0_S0_cccc>:
			sendData(blue << 2);
		}
	}

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
    12f4:	8f 92       	push	r8
    12f6:	9f 92       	push	r9
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	ef 92       	push	r14
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	5c 01       	movw	r10, r24
    130a:	eb 01       	movw	r28, r22
		char counter = 0;
    130c:	10 e0       	ldi	r17, 0x00	; 0
	
		while (string[counter] != '\0')
    130e:	f5 01       	movw	r30, r10
    1310:	e1 0f       	add	r30, r17
    1312:	f1 1d       	adc	r31, r1
    1314:	30 81       	ld	r19, Z
    1316:	33 23       	and	r19, r19
    1318:	09 f4       	brne	.+2      	; 0x131c <_ZN6ST778911printStringEPcS0_S0_cccc+0x28>
    131a:	50 c1       	rjmp	.+672    	; 0x15bc <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c8>
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	86 30       	cpi	r24, 0x06	; 6
    1320:	08 f0       	brcs	.+2      	; 0x1324 <_ZN6ST778911printStringEPcS0_S0_cccc+0x30>
    1322:	4a c1       	rjmp	.+660    	; 0x15b8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c4>
    1324:	90 e0       	ldi	r25, 0x00	; 0
		{
			char mask;
			for (char y = 0; y < 8; y++)
    1326:	98 30       	cpi	r25, 0x08	; 8
    1328:	08 f0       	brcs	.+2      	; 0x132c <_ZN6ST778911printStringEPcS0_S0_cccc+0x38>
    132a:	30 c1       	rjmp	.+608    	; 0x158c <_ZN6ST778911printStringEPcS0_S0_cccc+0x298>
			{
				mask = 1;
				if(monocraft[letter - 32][i] & (mask << (7 - y)))
    132c:	e3 2f       	mov	r30, r19
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	b0 97       	sbiw	r30, 0x20	; 32
    1332:	bf 01       	movw	r22, r30
    1334:	66 0f       	add	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	e6 0f       	add	r30, r22
    133a:	f7 1f       	adc	r31, r23
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	e5 56       	subi	r30, 0x65	; 101
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	e8 0f       	add	r30, r24
    1346:	f1 1d       	adc	r31, r1
    1348:	a0 81       	ld	r26, Z
    134a:	e7 e0       	ldi	r30, 0x07	; 7
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	e9 1b       	sub	r30, r25
    1350:	f1 09       	sbc	r31, r1
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	4b 01       	movw	r8, r22
    1358:	02 c0       	rjmp	.+4      	; 0x135e <_ZN6ST778911printStringEPcS0_S0_cccc+0x6a>
    135a:	88 0c       	add	r8, r8
    135c:	99 1c       	adc	r9, r9
    135e:	ea 95       	dec	r30
    1360:	e2 f7       	brpl	.-8      	; 0x135a <_ZN6ST778911printStringEPcS0_S0_cccc+0x66>
    1362:	6a 2f       	mov	r22, r26
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	68 21       	and	r22, r8
    1368:	79 21       	and	r23, r9
    136a:	67 2b       	or	r22, r23
    136c:	09 f4       	brne	.+2      	; 0x1370 <_ZN6ST778911printStringEPcS0_S0_cccc+0x7c>
    136e:	8a c0       	rjmp	.+276    	; 0x1484 <_ZN6ST778911printStringEPcS0_S0_cccc+0x190>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
    1370:	fa 01       	movw	r30, r20
    1372:	a0 81       	ld	r26, Z
    1374:	c9 9e       	mul	r12, r25
    1376:	a0 0d       	add	r26, r0
    1378:	11 24       	eor	r1, r1
    137a:	b8 81       	ld	r27, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    137c:	b1 3f       	cpi	r27, 0xF1	; 241
    137e:	08 f0       	brcs	.+2      	; 0x1382 <_ZN6ST778911printStringEPcS0_S0_cccc+0x8e>
    1380:	03 c1       	rjmp	.+518    	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    1382:	a1 3f       	cpi	r26, 0xF1	; 241
    1384:	08 f0       	brcs	.+2      	; 0x1388 <_ZN6ST778911printStringEPcS0_S0_cccc+0x94>
    1386:	00 c1       	rjmp	.+512    	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1388:	65 b3       	in	r22, 0x15	; 21
    138a:	6b 7f       	andi	r22, 0xFB	; 251
    138c:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    138e:	6a e2       	ldi	r22, 0x2A	; 42
    1390:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1392:	77 9b       	sbis	0x0e, 7	; 14
    1394:	fe cf       	rjmp	.-4      	; 0x1392 <_ZN6ST778911printStringEPcS0_S0_cccc+0x9e>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    1396:	eb 2f       	mov	r30, r27
    1398:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    139a:	65 b3       	in	r22, 0x15	; 21
    139c:	64 60       	ori	r22, 0x04	; 4
    139e:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    13a0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    13a2:	77 9b       	sbis	0x0e, 7	; 14
    13a4:	fe cf       	rjmp	.-4      	; 0x13a2 <_ZN6ST778911printStringEPcS0_S0_cccc+0xae>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13a6:	65 b3       	in	r22, 0x15	; 21
    13a8:	64 60       	ori	r22, 0x04	; 4
    13aa:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    13ac:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    13ae:	77 9b       	sbis	0x0e, 7	; 14
    13b0:	fe cf       	rjmp	.-4      	; 0x13ae <_ZN6ST778911printStringEPcS0_S0_cccc+0xba>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    13b2:	6c 2d       	mov	r22, r12
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	e6 0f       	add	r30, r22
    13b8:	f7 1f       	adc	r31, r23
    13ba:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13bc:	e5 b3       	in	r30, 0x15	; 21
    13be:	e4 60       	ori	r30, 0x04	; 4
    13c0:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    13c2:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    13c4:	77 9b       	sbis	0x0e, 7	; 14
    13c6:	fe cf       	rjmp	.-4      	; 0x13c4 <_ZN6ST778911printStringEPcS0_S0_cccc+0xd0>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    13c8:	bc 0d       	add	r27, r12
    13ca:	b1 50       	subi	r27, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13cc:	e5 b3       	in	r30, 0x15	; 21
    13ce:	e4 60       	ori	r30, 0x04	; 4
    13d0:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    13d2:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    13d4:	77 9b       	sbis	0x0e, 7	; 14
    13d6:	fe cf       	rjmp	.-4      	; 0x13d4 <_ZN6ST778911printStringEPcS0_S0_cccc+0xe0>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    13d8:	e5 b3       	in	r30, 0x15	; 21
    13da:	eb 7f       	andi	r30, 0xFB	; 251
    13dc:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    13de:	eb e2       	ldi	r30, 0x2B	; 43
    13e0:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    13e2:	77 9b       	sbis	0x0e, 7	; 14
    13e4:	fe cf       	rjmp	.-4      	; 0x13e2 <_ZN6ST778911printStringEPcS0_S0_cccc+0xee>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    13e6:	ea 2f       	mov	r30, r26
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13ea:	b5 b3       	in	r27, 0x15	; 21
    13ec:	b4 60       	ori	r27, 0x04	; 4
    13ee:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    13f0:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    13f2:	77 9b       	sbis	0x0e, 7	; 14
    13f4:	fe cf       	rjmp	.-4      	; 0x13f2 <_ZN6ST778911printStringEPcS0_S0_cccc+0xfe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13f6:	b5 b3       	in	r27, 0x15	; 21
    13f8:	b4 60       	ori	r27, 0x04	; 4
    13fa:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    13fc:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    13fe:	77 9b       	sbis	0x0e, 7	; 14
    1400:	fe cf       	rjmp	.-4      	; 0x13fe <_ZN6ST778911printStringEPcS0_S0_cccc+0x10a>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    1402:	e6 0f       	add	r30, r22
    1404:	f7 1f       	adc	r31, r23
    1406:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1408:	e5 b3       	in	r30, 0x15	; 21
    140a:	e4 60       	ori	r30, 0x04	; 4
    140c:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    140e:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    1410:	77 9b       	sbis	0x0e, 7	; 14
    1412:	fe cf       	rjmp	.-4      	; 0x1410 <_ZN6ST778911printStringEPcS0_S0_cccc+0x11c>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    1414:	ac 0d       	add	r26, r12
    1416:	a1 50       	subi	r26, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1418:	e5 b3       	in	r30, 0x15	; 21
    141a:	e4 60       	ori	r30, 0x04	; 4
    141c:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    141e:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    1420:	77 9b       	sbis	0x0e, 7	; 14
    1422:	fe cf       	rjmp	.-4      	; 0x1420 <_ZN6ST778911printStringEPcS0_S0_cccc+0x12c>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1424:	e5 b3       	in	r30, 0x15	; 21
    1426:	eb 7f       	andi	r30, 0xFB	; 251
    1428:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    142a:	ec e2       	ldi	r30, 0x2C	; 44
    142c:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    142e:	77 9b       	sbis	0x0e, 7	; 14
    1430:	fe cf       	rjmp	.-4      	; 0x142e <_ZN6ST778911printStringEPcS0_S0_cccc+0x13a>
    1432:	e0 e0       	ldi	r30, 0x00	; 0
    1434:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1436:	66 9f       	mul	r22, r22
    1438:	d0 01       	movw	r26, r0
    143a:	67 9f       	mul	r22, r23
    143c:	b0 0d       	add	r27, r0
    143e:	b0 0d       	add	r27, r0
    1440:	11 24       	eor	r1, r1
    1442:	ea 17       	cp	r30, r26
    1444:	fb 07       	cpc	r31, r27
    1446:	0c f0       	brlt	.+2      	; 0x144a <_ZN6ST778911printStringEPcS0_S0_cccc+0x156>
    1448:	9f c0       	rjmp	.+318    	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    144a:	a5 b3       	in	r26, 0x15	; 21
    144c:	a4 60       	ori	r26, 0x04	; 4
    144e:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1450:	a2 2f       	mov	r26, r18
    1452:	aa 0f       	add	r26, r26
    1454:	aa 0f       	add	r26, r26
    1456:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    1458:	77 9b       	sbis	0x0e, 7	; 14
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <_ZN6ST778911printStringEPcS0_S0_cccc+0x164>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    145c:	a5 b3       	in	r26, 0x15	; 21
    145e:	a4 60       	ori	r26, 0x04	; 4
    1460:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1462:	a0 2f       	mov	r26, r16
    1464:	aa 0f       	add	r26, r26
    1466:	aa 0f       	add	r26, r26
    1468:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    146a:	77 9b       	sbis	0x0e, 7	; 14
    146c:	fe cf       	rjmp	.-4      	; 0x146a <_ZN6ST778911printStringEPcS0_S0_cccc+0x176>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    146e:	a5 b3       	in	r26, 0x15	; 21
    1470:	a4 60       	ori	r26, 0x04	; 4
    1472:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1474:	ae 2d       	mov	r26, r14
    1476:	aa 0f       	add	r26, r26
    1478:	aa 0f       	add	r26, r26
    147a:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    147c:	77 9b       	sbis	0x0e, 7	; 14
    147e:	fe cf       	rjmp	.-4      	; 0x147c <_ZN6ST778911printStringEPcS0_S0_cccc+0x188>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1480:	31 96       	adiw	r30, 0x01	; 1
    1482:	d9 cf       	rjmp	.-78     	; 0x1436 <_ZN6ST778911printStringEPcS0_S0_cccc+0x142>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
				}
				else
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
    1484:	da 01       	movw	r26, r20
    1486:	ec 91       	ld	r30, X
    1488:	c9 9e       	mul	r12, r25
    148a:	e0 0d       	add	r30, r0
    148c:	11 24       	eor	r1, r1
    148e:	f8 81       	ld	r31, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    1490:	f1 3f       	cpi	r31, 0xF1	; 241
    1492:	08 f0       	brcs	.+2      	; 0x1496 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a2>
    1494:	79 c0       	rjmp	.+242    	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    1496:	e1 3f       	cpi	r30, 0xF1	; 241
    1498:	08 f0       	brcs	.+2      	; 0x149c <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a8>
    149a:	76 c0       	rjmp	.+236    	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    149c:	65 b3       	in	r22, 0x15	; 21
    149e:	6b 7f       	andi	r22, 0xFB	; 251
    14a0:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    14a2:	6a e2       	ldi	r22, 0x2A	; 42
    14a4:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    14a6:	77 9b       	sbis	0x0e, 7	; 14
    14a8:	fe cf       	rjmp	.-4      	; 0x14a6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1b2>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    14aa:	6f 2f       	mov	r22, r31
    14ac:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14ae:	a5 b3       	in	r26, 0x15	; 21
    14b0:	a4 60       	ori	r26, 0x04	; 4
    14b2:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    14b4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    14b6:	77 9b       	sbis	0x0e, 7	; 14
    14b8:	fe cf       	rjmp	.-4      	; 0x14b6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1c2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14ba:	a5 b3       	in	r26, 0x15	; 21
    14bc:	a4 60       	ori	r26, 0x04	; 4
    14be:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    14c0:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    14c2:	77 9b       	sbis	0x0e, 7	; 14
    14c4:	fe cf       	rjmp	.-4      	; 0x14c2 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1ce>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    14c6:	ac 2d       	mov	r26, r12
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	6a 0f       	add	r22, r26
    14cc:	7b 1f       	adc	r23, r27
    14ce:	61 50       	subi	r22, 0x01	; 1
    14d0:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14d2:	65 b3       	in	r22, 0x15	; 21
    14d4:	64 60       	ori	r22, 0x04	; 4
    14d6:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    14d8:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    14da:	77 9b       	sbis	0x0e, 7	; 14
    14dc:	fe cf       	rjmp	.-4      	; 0x14da <_ZN6ST778911printStringEPcS0_S0_cccc+0x1e6>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    14de:	fc 0d       	add	r31, r12
    14e0:	f1 50       	subi	r31, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14e2:	65 b3       	in	r22, 0x15	; 21
    14e4:	64 60       	ori	r22, 0x04	; 4
    14e6:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    14e8:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    14ea:	77 9b       	sbis	0x0e, 7	; 14
    14ec:	fe cf       	rjmp	.-4      	; 0x14ea <_ZN6ST778911printStringEPcS0_S0_cccc+0x1f6>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    14ee:	65 b3       	in	r22, 0x15	; 21
    14f0:	6b 7f       	andi	r22, 0xFB	; 251
    14f2:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    14f4:	6b e2       	ldi	r22, 0x2B	; 43
    14f6:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    14f8:	77 9b       	sbis	0x0e, 7	; 14
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x204>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    14fc:	6e 2f       	mov	r22, r30
    14fe:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1500:	f5 b3       	in	r31, 0x15	; 21
    1502:	f4 60       	ori	r31, 0x04	; 4
    1504:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    1506:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1508:	77 9b       	sbis	0x0e, 7	; 14
    150a:	fe cf       	rjmp	.-4      	; 0x1508 <_ZN6ST778911printStringEPcS0_S0_cccc+0x214>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    150c:	f5 b3       	in	r31, 0x15	; 21
    150e:	f4 60       	ori	r31, 0x04	; 4
    1510:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    1512:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    1514:	77 9b       	sbis	0x0e, 7	; 14
    1516:	fe cf       	rjmp	.-4      	; 0x1514 <_ZN6ST778911printStringEPcS0_S0_cccc+0x220>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    1518:	6a 0f       	add	r22, r26
    151a:	7b 1f       	adc	r23, r27
    151c:	61 50       	subi	r22, 0x01	; 1
    151e:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1520:	65 b3       	in	r22, 0x15	; 21
    1522:	64 60       	ori	r22, 0x04	; 4
    1524:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1526:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    1528:	77 9b       	sbis	0x0e, 7	; 14
    152a:	fe cf       	rjmp	.-4      	; 0x1528 <_ZN6ST778911printStringEPcS0_S0_cccc+0x234>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    152c:	ec 0d       	add	r30, r12
    152e:	e1 50       	subi	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1530:	65 b3       	in	r22, 0x15	; 21
    1532:	64 60       	ori	r22, 0x04	; 4
    1534:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1536:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    1538:	77 9b       	sbis	0x0e, 7	; 14
    153a:	fe cf       	rjmp	.-4      	; 0x1538 <_ZN6ST778911printStringEPcS0_S0_cccc+0x244>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    153c:	65 b3       	in	r22, 0x15	; 21
    153e:	6b 7f       	andi	r22, 0xFB	; 251
    1540:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1542:	6c e2       	ldi	r22, 0x2C	; 44
    1544:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1546:	77 9b       	sbis	0x0e, 7	; 14
    1548:	fe cf       	rjmp	.-4      	; 0x1546 <_ZN6ST778911printStringEPcS0_S0_cccc+0x252>
    154a:	e0 e0       	ldi	r30, 0x00	; 0
    154c:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    154e:	aa 9f       	mul	r26, r26
    1550:	b0 01       	movw	r22, r0
    1552:	ab 9f       	mul	r26, r27
    1554:	70 0d       	add	r23, r0
    1556:	70 0d       	add	r23, r0
    1558:	11 24       	eor	r1, r1
    155a:	e6 17       	cp	r30, r22
    155c:	f7 07       	cpc	r31, r23
    155e:	a4 f4       	brge	.+40     	; 0x1588 <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1560:	65 b3       	in	r22, 0x15	; 21
    1562:	64 60       	ori	r22, 0x04	; 4
    1564:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1566:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1568:	77 9b       	sbis	0x0e, 7	; 14
    156a:	fe cf       	rjmp	.-4      	; 0x1568 <_ZN6ST778911printStringEPcS0_S0_cccc+0x274>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    156c:	65 b3       	in	r22, 0x15	; 21
    156e:	64 60       	ori	r22, 0x04	; 4
    1570:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1572:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1574:	77 9b       	sbis	0x0e, 7	; 14
    1576:	fe cf       	rjmp	.-4      	; 0x1574 <_ZN6ST778911printStringEPcS0_S0_cccc+0x280>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1578:	65 b3       	in	r22, 0x15	; 21
    157a:	64 60       	ori	r22, 0x04	; 4
    157c:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    157e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1580:	77 9b       	sbis	0x0e, 7	; 14
    1582:	fe cf       	rjmp	.-4      	; 0x1580 <_ZN6ST778911printStringEPcS0_S0_cccc+0x28c>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1584:	31 96       	adiw	r30, 0x01	; 1
    1586:	e3 cf       	rjmp	.-58     	; 0x154e <_ZN6ST778911printStringEPcS0_S0_cccc+0x25a>
	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
		{
			char mask;
			for (char y = 0; y < 8; y++)
    1588:	9f 5f       	subi	r25, 0xFF	; 255
    158a:	cd ce       	rjmp	.-614    	; 0x1326 <_ZN6ST778911printStringEPcS0_S0_cccc+0x32>
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
				}
			}
					
			*xpos += size;
    158c:	98 81       	ld	r25, Y
    158e:	9c 0d       	add	r25, r12
    1590:	98 83       	st	Y, r25
					
			if (*xpos >= 240)
    1592:	90 3f       	cpi	r25, 0xF0	; 240
    1594:	48 f0       	brcs	.+18     	; 0x15a8 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2b4>
			{
				*xpos = 0;
    1596:	18 82       	st	Y, r1
				*ypos += 8 * size;
    1598:	fa 01       	movw	r30, r20
    159a:	60 81       	ld	r22, Z
    159c:	9c 2d       	mov	r25, r12
    159e:	99 0f       	add	r25, r25
    15a0:	99 0f       	add	r25, r25
    15a2:	99 0f       	add	r25, r25
    15a4:	96 0f       	add	r25, r22
    15a6:	90 83       	st	Z, r25
			}
					
			if (*ypos >= 240)
    15a8:	da 01       	movw	r26, r20
    15aa:	9c 91       	ld	r25, X
    15ac:	90 3f       	cpi	r25, 0xF0	; 240
    15ae:	10 f0       	brcs	.+4      	; 0x15b4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c0>
			{
				*xpos = 0;
    15b0:	18 82       	st	Y, r1
				*ypos = 0;
    15b2:	1c 92       	st	X, r1
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	b3 ce       	rjmp	.-666    	; 0x131e <_ZN6ST778911printStringEPcS0_S0_cccc+0x2a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
    15b8:	1f 5f       	subi	r17, 0xFF	; 255

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		char counter = 0;
	
		while (string[counter] != '\0')
    15ba:	a9 ce       	rjmp	.-686    	; 0x130e <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
		}
	}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ef 90       	pop	r14
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	9f 90       	pop	r9
    15ce:	8f 90       	pop	r8
    15d0:	08 95       	ret

000015d2 <__subsf3>:
    15d2:	50 58       	subi	r21, 0x80	; 128

000015d4 <__addsf3>:
    15d4:	bb 27       	eor	r27, r27
    15d6:	aa 27       	eor	r26, r26
    15d8:	0e 94 01 0b 	call	0x1602	; 0x1602 <__addsf3x>
    15dc:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_round>
    15e0:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_pscA>
    15e4:	38 f0       	brcs	.+14     	; 0x15f4 <__addsf3+0x20>
    15e6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscB>
    15ea:	20 f0       	brcs	.+8      	; 0x15f4 <__addsf3+0x20>
    15ec:	39 f4       	brne	.+14     	; 0x15fc <__addsf3+0x28>
    15ee:	9f 3f       	cpi	r25, 0xFF	; 255
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <__addsf3+0x24>
    15f2:	26 f4       	brtc	.+8      	; 0x15fc <__addsf3+0x28>
    15f4:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>
    15f8:	0e f4       	brtc	.+2      	; 0x15fc <__addsf3+0x28>
    15fa:	e0 95       	com	r30
    15fc:	e7 fb       	bst	r30, 7
    15fe:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>

00001602 <__addsf3x>:
    1602:	e9 2f       	mov	r30, r25
    1604:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__fp_split3>
    1608:	58 f3       	brcs	.-42     	; 0x15e0 <__addsf3+0xc>
    160a:	ba 17       	cp	r27, r26
    160c:	62 07       	cpc	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	84 07       	cpc	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	20 f0       	brcs	.+8      	; 0x161e <__addsf3x+0x1c>
    1616:	79 f4       	brne	.+30     	; 0x1636 <__addsf3x+0x34>
    1618:	a6 f5       	brtc	.+104    	; 0x1682 <__addsf3x+0x80>
    161a:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_zero>
    161e:	0e f4       	brtc	.+2      	; 0x1622 <__addsf3x+0x20>
    1620:	e0 95       	com	r30
    1622:	0b 2e       	mov	r0, r27
    1624:	ba 2f       	mov	r27, r26
    1626:	a0 2d       	mov	r26, r0
    1628:	0b 01       	movw	r0, r22
    162a:	b9 01       	movw	r22, r18
    162c:	90 01       	movw	r18, r0
    162e:	0c 01       	movw	r0, r24
    1630:	ca 01       	movw	r24, r20
    1632:	a0 01       	movw	r20, r0
    1634:	11 24       	eor	r1, r1
    1636:	ff 27       	eor	r31, r31
    1638:	59 1b       	sub	r21, r25
    163a:	99 f0       	breq	.+38     	; 0x1662 <__addsf3x+0x60>
    163c:	59 3f       	cpi	r21, 0xF9	; 249
    163e:	50 f4       	brcc	.+20     	; 0x1654 <__addsf3x+0x52>
    1640:	50 3e       	cpi	r21, 0xE0	; 224
    1642:	68 f1       	brcs	.+90     	; 0x169e <__addsf3x+0x9c>
    1644:	1a 16       	cp	r1, r26
    1646:	f0 40       	sbci	r31, 0x00	; 0
    1648:	a2 2f       	mov	r26, r18
    164a:	23 2f       	mov	r18, r19
    164c:	34 2f       	mov	r19, r20
    164e:	44 27       	eor	r20, r20
    1650:	58 5f       	subi	r21, 0xF8	; 248
    1652:	f3 cf       	rjmp	.-26     	; 0x163a <__addsf3x+0x38>
    1654:	46 95       	lsr	r20
    1656:	37 95       	ror	r19
    1658:	27 95       	ror	r18
    165a:	a7 95       	ror	r26
    165c:	f0 40       	sbci	r31, 0x00	; 0
    165e:	53 95       	inc	r21
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__addsf3x+0x52>
    1662:	7e f4       	brtc	.+30     	; 0x1682 <__addsf3x+0x80>
    1664:	1f 16       	cp	r1, r31
    1666:	ba 0b       	sbc	r27, r26
    1668:	62 0b       	sbc	r22, r18
    166a:	73 0b       	sbc	r23, r19
    166c:	84 0b       	sbc	r24, r20
    166e:	ba f0       	brmi	.+46     	; 0x169e <__addsf3x+0x9c>
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	a1 f0       	breq	.+40     	; 0x169c <__addsf3x+0x9a>
    1674:	ff 0f       	add	r31, r31
    1676:	bb 1f       	adc	r27, r27
    1678:	66 1f       	adc	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	c2 f7       	brpl	.-16     	; 0x1670 <__addsf3x+0x6e>
    1680:	0e c0       	rjmp	.+28     	; 0x169e <__addsf3x+0x9c>
    1682:	ba 0f       	add	r27, r26
    1684:	62 1f       	adc	r22, r18
    1686:	73 1f       	adc	r23, r19
    1688:	84 1f       	adc	r24, r20
    168a:	48 f4       	brcc	.+18     	; 0x169e <__addsf3x+0x9c>
    168c:	87 95       	ror	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	b7 95       	ror	r27
    1694:	f7 95       	ror	r31
    1696:	9e 3f       	cpi	r25, 0xFE	; 254
    1698:	08 f0       	brcs	.+2      	; 0x169c <__addsf3x+0x9a>
    169a:	b0 cf       	rjmp	.-160    	; 0x15fc <__addsf3+0x28>
    169c:	93 95       	inc	r25
    169e:	88 0f       	add	r24, r24
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__addsf3x+0xa2>
    16a2:	99 27       	eor	r25, r25
    16a4:	ee 0f       	add	r30, r30
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	08 95       	ret

000016ac <__cmpsf2>:
    16ac:	0e 94 40 0c 	call	0x1880	; 0x1880 <__fp_cmp>
    16b0:	08 f4       	brcc	.+2      	; 0x16b4 <__cmpsf2+0x8>
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	08 95       	ret

000016b6 <__divsf3>:
    16b6:	0e 94 6f 0b 	call	0x16de	; 0x16de <__divsf3x>
    16ba:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_round>
    16be:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscB>
    16c2:	58 f0       	brcs	.+22     	; 0x16da <__divsf3+0x24>
    16c4:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_pscA>
    16c8:	40 f0       	brcs	.+16     	; 0x16da <__divsf3+0x24>
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <__divsf3+0x20>
    16cc:	5f 3f       	cpi	r21, 0xFF	; 255
    16ce:	29 f0       	breq	.+10     	; 0x16da <__divsf3+0x24>
    16d0:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    16d4:	51 11       	cpse	r21, r1
    16d6:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>
    16da:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>

000016de <__divsf3x>:
    16de:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__fp_split3>
    16e2:	68 f3       	brcs	.-38     	; 0x16be <__divsf3+0x8>

000016e4 <__divsf3_pse>:
    16e4:	99 23       	and	r25, r25
    16e6:	b1 f3       	breq	.-20     	; 0x16d4 <__divsf3+0x1e>
    16e8:	55 23       	and	r21, r21
    16ea:	91 f3       	breq	.-28     	; 0x16d0 <__divsf3+0x1a>
    16ec:	95 1b       	sub	r25, r21
    16ee:	55 0b       	sbc	r21, r21
    16f0:	bb 27       	eor	r27, r27
    16f2:	aa 27       	eor	r26, r26
    16f4:	62 17       	cp	r22, r18
    16f6:	73 07       	cpc	r23, r19
    16f8:	84 07       	cpc	r24, r20
    16fa:	38 f0       	brcs	.+14     	; 0x170a <__divsf3_pse+0x26>
    16fc:	9f 5f       	subi	r25, 0xFF	; 255
    16fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	44 1f       	adc	r20, r20
    1706:	aa 1f       	adc	r26, r26
    1708:	a9 f3       	breq	.-22     	; 0x16f4 <__divsf3_pse+0x10>
    170a:	35 d0       	rcall	.+106    	; 0x1776 <__divsf3_pse+0x92>
    170c:	0e 2e       	mov	r0, r30
    170e:	3a f0       	brmi	.+14     	; 0x171e <__divsf3_pse+0x3a>
    1710:	e0 e8       	ldi	r30, 0x80	; 128
    1712:	32 d0       	rcall	.+100    	; 0x1778 <__divsf3_pse+0x94>
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	e6 95       	lsr	r30
    171a:	00 1c       	adc	r0, r0
    171c:	ca f7       	brpl	.-14     	; 0x1710 <__divsf3_pse+0x2c>
    171e:	2b d0       	rcall	.+86     	; 0x1776 <__divsf3_pse+0x92>
    1720:	fe 2f       	mov	r31, r30
    1722:	29 d0       	rcall	.+82     	; 0x1776 <__divsf3_pse+0x92>
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	88 1f       	adc	r24, r24
    172a:	bb 1f       	adc	r27, r27
    172c:	26 17       	cp	r18, r22
    172e:	37 07       	cpc	r19, r23
    1730:	48 07       	cpc	r20, r24
    1732:	ab 07       	cpc	r26, r27
    1734:	b0 e8       	ldi	r27, 0x80	; 128
    1736:	09 f0       	breq	.+2      	; 0x173a <__divsf3_pse+0x56>
    1738:	bb 0b       	sbc	r27, r27
    173a:	80 2d       	mov	r24, r0
    173c:	bf 01       	movw	r22, r30
    173e:	ff 27       	eor	r31, r31
    1740:	93 58       	subi	r25, 0x83	; 131
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	3a f0       	brmi	.+14     	; 0x1754 <__divsf3_pse+0x70>
    1746:	9e 3f       	cpi	r25, 0xFE	; 254
    1748:	51 05       	cpc	r21, r1
    174a:	78 f0       	brcs	.+30     	; 0x176a <__divsf3_pse+0x86>
    174c:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    1750:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>
    1754:	5f 3f       	cpi	r21, 0xFF	; 255
    1756:	e4 f3       	brlt	.-8      	; 0x1750 <__divsf3_pse+0x6c>
    1758:	98 3e       	cpi	r25, 0xE8	; 232
    175a:	d4 f3       	brlt	.-12     	; 0x1750 <__divsf3_pse+0x6c>
    175c:	86 95       	lsr	r24
    175e:	77 95       	ror	r23
    1760:	67 95       	ror	r22
    1762:	b7 95       	ror	r27
    1764:	f7 95       	ror	r31
    1766:	9f 5f       	subi	r25, 0xFF	; 255
    1768:	c9 f7       	brne	.-14     	; 0x175c <__divsf3_pse+0x78>
    176a:	88 0f       	add	r24, r24
    176c:	91 1d       	adc	r25, r1
    176e:	96 95       	lsr	r25
    1770:	87 95       	ror	r24
    1772:	97 f9       	bld	r25, 7
    1774:	08 95       	ret
    1776:	e1 e0       	ldi	r30, 0x01	; 1
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	bb 1f       	adc	r27, r27
    1780:	62 17       	cp	r22, r18
    1782:	73 07       	cpc	r23, r19
    1784:	84 07       	cpc	r24, r20
    1786:	ba 07       	cpc	r27, r26
    1788:	20 f0       	brcs	.+8      	; 0x1792 <__divsf3_pse+0xae>
    178a:	62 1b       	sub	r22, r18
    178c:	73 0b       	sbc	r23, r19
    178e:	84 0b       	sbc	r24, r20
    1790:	ba 0b       	sbc	r27, r26
    1792:	ee 1f       	adc	r30, r30
    1794:	88 f7       	brcc	.-30     	; 0x1778 <__divsf3_pse+0x94>
    1796:	e0 95       	com	r30
    1798:	08 95       	ret

0000179a <__fixsfsi>:
    179a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fixunssfsi>
    179e:	68 94       	set
    17a0:	b1 11       	cpse	r27, r1
    17a2:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>
    17a6:	08 95       	ret

000017a8 <__fixunssfsi>:
    17a8:	0e 94 94 0c 	call	0x1928	; 0x1928 <__fp_splitA>
    17ac:	88 f0       	brcs	.+34     	; 0x17d0 <__fixunssfsi+0x28>
    17ae:	9f 57       	subi	r25, 0x7F	; 127
    17b0:	98 f0       	brcs	.+38     	; 0x17d8 <__fixunssfsi+0x30>
    17b2:	b9 2f       	mov	r27, r25
    17b4:	99 27       	eor	r25, r25
    17b6:	b7 51       	subi	r27, 0x17	; 23
    17b8:	b0 f0       	brcs	.+44     	; 0x17e6 <__fixunssfsi+0x3e>
    17ba:	e1 f0       	breq	.+56     	; 0x17f4 <__fixunssfsi+0x4c>
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	1a f0       	brmi	.+6      	; 0x17cc <__fixunssfsi+0x24>
    17c6:	ba 95       	dec	r27
    17c8:	c9 f7       	brne	.-14     	; 0x17bc <__fixunssfsi+0x14>
    17ca:	14 c0       	rjmp	.+40     	; 0x17f4 <__fixunssfsi+0x4c>
    17cc:	b1 30       	cpi	r27, 0x01	; 1
    17ce:	91 f0       	breq	.+36     	; 0x17f4 <__fixunssfsi+0x4c>
    17d0:	0e 94 ae 0c 	call	0x195c	; 0x195c <__fp_zero>
    17d4:	b1 e0       	ldi	r27, 0x01	; 1
    17d6:	08 95       	ret
    17d8:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_zero>
    17dc:	67 2f       	mov	r22, r23
    17de:	78 2f       	mov	r23, r24
    17e0:	88 27       	eor	r24, r24
    17e2:	b8 5f       	subi	r27, 0xF8	; 248
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <__fixunssfsi+0x4c>
    17e6:	b9 3f       	cpi	r27, 0xF9	; 249
    17e8:	cc f3       	brlt	.-14     	; 0x17dc <__fixunssfsi+0x34>
    17ea:	86 95       	lsr	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b3 95       	inc	r27
    17f2:	d9 f7       	brne	.-10     	; 0x17ea <__fixunssfsi+0x42>
    17f4:	3e f4       	brtc	.+14     	; 0x1804 <__fixunssfsi+0x5c>
    17f6:	90 95       	com	r25
    17f8:	80 95       	com	r24
    17fa:	70 95       	com	r23
    17fc:	61 95       	neg	r22
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	08 95       	ret

00001806 <__floatunsisf>:
    1806:	e8 94       	clt
    1808:	09 c0       	rjmp	.+18     	; 0x181c <__floatsisf+0x12>

0000180a <__floatsisf>:
    180a:	97 fb       	bst	r25, 7
    180c:	3e f4       	brtc	.+14     	; 0x181c <__floatsisf+0x12>
    180e:	90 95       	com	r25
    1810:	80 95       	com	r24
    1812:	70 95       	com	r23
    1814:	61 95       	neg	r22
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	8f 4f       	sbci	r24, 0xFF	; 255
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	99 23       	and	r25, r25
    181e:	a9 f0       	breq	.+42     	; 0x184a <__floatsisf+0x40>
    1820:	f9 2f       	mov	r31, r25
    1822:	96 e9       	ldi	r25, 0x96	; 150
    1824:	bb 27       	eor	r27, r27
    1826:	93 95       	inc	r25
    1828:	f6 95       	lsr	r31
    182a:	87 95       	ror	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b7 95       	ror	r27
    1832:	f1 11       	cpse	r31, r1
    1834:	f8 cf       	rjmp	.-16     	; 0x1826 <__floatsisf+0x1c>
    1836:	fa f4       	brpl	.+62     	; 0x1876 <__floatsisf+0x6c>
    1838:	bb 0f       	add	r27, r27
    183a:	11 f4       	brne	.+4      	; 0x1840 <__floatsisf+0x36>
    183c:	60 ff       	sbrs	r22, 0
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <__floatsisf+0x6c>
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <__floatsisf+0x6c>
    184a:	88 23       	and	r24, r24
    184c:	11 f0       	breq	.+4      	; 0x1852 <__floatsisf+0x48>
    184e:	96 e9       	ldi	r25, 0x96	; 150
    1850:	11 c0       	rjmp	.+34     	; 0x1874 <__floatsisf+0x6a>
    1852:	77 23       	and	r23, r23
    1854:	21 f0       	breq	.+8      	; 0x185e <__floatsisf+0x54>
    1856:	9e e8       	ldi	r25, 0x8E	; 142
    1858:	87 2f       	mov	r24, r23
    185a:	76 2f       	mov	r23, r22
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <__floatsisf+0x5e>
    185e:	66 23       	and	r22, r22
    1860:	71 f0       	breq	.+28     	; 0x187e <__floatsisf+0x74>
    1862:	96 e8       	ldi	r25, 0x86	; 134
    1864:	86 2f       	mov	r24, r22
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	2a f0       	brmi	.+10     	; 0x1876 <__floatsisf+0x6c>
    186c:	9a 95       	dec	r25
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	da f7       	brpl	.-10     	; 0x186c <__floatsisf+0x62>
    1876:	88 0f       	add	r24, r24
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	97 f9       	bld	r25, 7
    187e:	08 95       	ret

00001880 <__fp_cmp>:
    1880:	99 0f       	add	r25, r25
    1882:	00 08       	sbc	r0, r0
    1884:	55 0f       	add	r21, r21
    1886:	aa 0b       	sbc	r26, r26
    1888:	e0 e8       	ldi	r30, 0x80	; 128
    188a:	fe ef       	ldi	r31, 0xFE	; 254
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	e8 07       	cpc	r30, r24
    1892:	f9 07       	cpc	r31, r25
    1894:	c0 f0       	brcs	.+48     	; 0x18c6 <__fp_cmp+0x46>
    1896:	12 16       	cp	r1, r18
    1898:	13 06       	cpc	r1, r19
    189a:	e4 07       	cpc	r30, r20
    189c:	f5 07       	cpc	r31, r21
    189e:	98 f0       	brcs	.+38     	; 0x18c6 <__fp_cmp+0x46>
    18a0:	62 1b       	sub	r22, r18
    18a2:	73 0b       	sbc	r23, r19
    18a4:	84 0b       	sbc	r24, r20
    18a6:	95 0b       	sbc	r25, r21
    18a8:	39 f4       	brne	.+14     	; 0x18b8 <__fp_cmp+0x38>
    18aa:	0a 26       	eor	r0, r26
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <__fp_cmp+0x46>
    18ae:	23 2b       	or	r18, r19
    18b0:	24 2b       	or	r18, r20
    18b2:	25 2b       	or	r18, r21
    18b4:	21 f4       	brne	.+8      	; 0x18be <__fp_cmp+0x3e>
    18b6:	08 95       	ret
    18b8:	0a 26       	eor	r0, r26
    18ba:	09 f4       	brne	.+2      	; 0x18be <__fp_cmp+0x3e>
    18bc:	a1 40       	sbci	r26, 0x01	; 1
    18be:	a6 95       	lsr	r26
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	81 1d       	adc	r24, r1
    18c4:	81 1d       	adc	r24, r1
    18c6:	08 95       	ret

000018c8 <__fp_inf>:
    18c8:	97 f9       	bld	r25, 7
    18ca:	9f 67       	ori	r25, 0x7F	; 127
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	08 95       	ret

000018d4 <__fp_nan>:
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	80 ec       	ldi	r24, 0xC0	; 192
    18d8:	08 95       	ret

000018da <__fp_pscA>:
    18da:	00 24       	eor	r0, r0
    18dc:	0a 94       	dec	r0
    18de:	16 16       	cp	r1, r22
    18e0:	17 06       	cpc	r1, r23
    18e2:	18 06       	cpc	r1, r24
    18e4:	09 06       	cpc	r0, r25
    18e6:	08 95       	ret

000018e8 <__fp_pscB>:
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	12 16       	cp	r1, r18
    18ee:	13 06       	cpc	r1, r19
    18f0:	14 06       	cpc	r1, r20
    18f2:	05 06       	cpc	r0, r21
    18f4:	08 95       	ret

000018f6 <__fp_round>:
    18f6:	09 2e       	mov	r0, r25
    18f8:	03 94       	inc	r0
    18fa:	00 0c       	add	r0, r0
    18fc:	11 f4       	brne	.+4      	; 0x1902 <__fp_round+0xc>
    18fe:	88 23       	and	r24, r24
    1900:	52 f0       	brmi	.+20     	; 0x1916 <__fp_round+0x20>
    1902:	bb 0f       	add	r27, r27
    1904:	40 f4       	brcc	.+16     	; 0x1916 <__fp_round+0x20>
    1906:	bf 2b       	or	r27, r31
    1908:	11 f4       	brne	.+4      	; 0x190e <__fp_round+0x18>
    190a:	60 ff       	sbrs	r22, 0
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__fp_round+0x20>
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	8f 4f       	sbci	r24, 0xFF	; 255
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	08 95       	ret

00001918 <__fp_split3>:
    1918:	57 fd       	sbrc	r21, 7
    191a:	90 58       	subi	r25, 0x80	; 128
    191c:	44 0f       	add	r20, r20
    191e:	55 1f       	adc	r21, r21
    1920:	59 f0       	breq	.+22     	; 0x1938 <__fp_splitA+0x10>
    1922:	5f 3f       	cpi	r21, 0xFF	; 255
    1924:	71 f0       	breq	.+28     	; 0x1942 <__fp_splitA+0x1a>
    1926:	47 95       	ror	r20

00001928 <__fp_splitA>:
    1928:	88 0f       	add	r24, r24
    192a:	97 fb       	bst	r25, 7
    192c:	99 1f       	adc	r25, r25
    192e:	61 f0       	breq	.+24     	; 0x1948 <__fp_splitA+0x20>
    1930:	9f 3f       	cpi	r25, 0xFF	; 255
    1932:	79 f0       	breq	.+30     	; 0x1952 <__fp_splitA+0x2a>
    1934:	87 95       	ror	r24
    1936:	08 95       	ret
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	14 06       	cpc	r1, r20
    193e:	55 1f       	adc	r21, r21
    1940:	f2 cf       	rjmp	.-28     	; 0x1926 <__fp_split3+0xe>
    1942:	46 95       	lsr	r20
    1944:	f1 df       	rcall	.-30     	; 0x1928 <__fp_splitA>
    1946:	08 c0       	rjmp	.+16     	; 0x1958 <__fp_splitA+0x30>
    1948:	16 16       	cp	r1, r22
    194a:	17 06       	cpc	r1, r23
    194c:	18 06       	cpc	r1, r24
    194e:	99 1f       	adc	r25, r25
    1950:	f1 cf       	rjmp	.-30     	; 0x1934 <__fp_splitA+0xc>
    1952:	86 95       	lsr	r24
    1954:	71 05       	cpc	r23, r1
    1956:	61 05       	cpc	r22, r1
    1958:	08 94       	sec
    195a:	08 95       	ret

0000195c <__fp_zero>:
    195c:	e8 94       	clt

0000195e <__fp_szero>:
    195e:	bb 27       	eor	r27, r27
    1960:	66 27       	eor	r22, r22
    1962:	77 27       	eor	r23, r23
    1964:	cb 01       	movw	r24, r22
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret

0000196a <__mulsf3>:
    196a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__mulsf3x>
    196e:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_round>
    1972:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fp_pscA>
    1976:	38 f0       	brcs	.+14     	; 0x1986 <__mulsf3+0x1c>
    1978:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_pscB>
    197c:	20 f0       	brcs	.+8      	; 0x1986 <__mulsf3+0x1c>
    197e:	95 23       	and	r25, r21
    1980:	11 f0       	breq	.+4      	; 0x1986 <__mulsf3+0x1c>
    1982:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    1986:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>
    198a:	11 24       	eor	r1, r1
    198c:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>

00001990 <__mulsf3x>:
    1990:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__fp_split3>
    1994:	70 f3       	brcs	.-36     	; 0x1972 <__mulsf3+0x8>

00001996 <__mulsf3_pse>:
    1996:	95 9f       	mul	r25, r21
    1998:	c1 f3       	breq	.-16     	; 0x198a <__mulsf3+0x20>
    199a:	95 0f       	add	r25, r21
    199c:	50 e0       	ldi	r21, 0x00	; 0
    199e:	55 1f       	adc	r21, r21
    19a0:	62 9f       	mul	r22, r18
    19a2:	f0 01       	movw	r30, r0
    19a4:	72 9f       	mul	r23, r18
    19a6:	bb 27       	eor	r27, r27
    19a8:	f0 0d       	add	r31, r0
    19aa:	b1 1d       	adc	r27, r1
    19ac:	63 9f       	mul	r22, r19
    19ae:	aa 27       	eor	r26, r26
    19b0:	f0 0d       	add	r31, r0
    19b2:	b1 1d       	adc	r27, r1
    19b4:	aa 1f       	adc	r26, r26
    19b6:	64 9f       	mul	r22, r20
    19b8:	66 27       	eor	r22, r22
    19ba:	b0 0d       	add	r27, r0
    19bc:	a1 1d       	adc	r26, r1
    19be:	66 1f       	adc	r22, r22
    19c0:	82 9f       	mul	r24, r18
    19c2:	22 27       	eor	r18, r18
    19c4:	b0 0d       	add	r27, r0
    19c6:	a1 1d       	adc	r26, r1
    19c8:	62 1f       	adc	r22, r18
    19ca:	73 9f       	mul	r23, r19
    19cc:	b0 0d       	add	r27, r0
    19ce:	a1 1d       	adc	r26, r1
    19d0:	62 1f       	adc	r22, r18
    19d2:	83 9f       	mul	r24, r19
    19d4:	a0 0d       	add	r26, r0
    19d6:	61 1d       	adc	r22, r1
    19d8:	22 1f       	adc	r18, r18
    19da:	74 9f       	mul	r23, r20
    19dc:	33 27       	eor	r19, r19
    19de:	a0 0d       	add	r26, r0
    19e0:	61 1d       	adc	r22, r1
    19e2:	23 1f       	adc	r18, r19
    19e4:	84 9f       	mul	r24, r20
    19e6:	60 0d       	add	r22, r0
    19e8:	21 1d       	adc	r18, r1
    19ea:	82 2f       	mov	r24, r18
    19ec:	76 2f       	mov	r23, r22
    19ee:	6a 2f       	mov	r22, r26
    19f0:	11 24       	eor	r1, r1
    19f2:	9f 57       	subi	r25, 0x7F	; 127
    19f4:	50 40       	sbci	r21, 0x00	; 0
    19f6:	9a f0       	brmi	.+38     	; 0x1a1e <__mulsf3_pse+0x88>
    19f8:	f1 f0       	breq	.+60     	; 0x1a36 <__mulsf3_pse+0xa0>
    19fa:	88 23       	and	r24, r24
    19fc:	4a f0       	brmi	.+18     	; 0x1a10 <__mulsf3_pse+0x7a>
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	bb 1f       	adc	r27, r27
    1a04:	66 1f       	adc	r22, r22
    1a06:	77 1f       	adc	r23, r23
    1a08:	88 1f       	adc	r24, r24
    1a0a:	91 50       	subi	r25, 0x01	; 1
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	a9 f7       	brne	.-22     	; 0x19fa <__mulsf3_pse+0x64>
    1a10:	9e 3f       	cpi	r25, 0xFE	; 254
    1a12:	51 05       	cpc	r21, r1
    1a14:	80 f0       	brcs	.+32     	; 0x1a36 <__mulsf3_pse+0xa0>
    1a16:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    1a1a:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>
    1a1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a20:	e4 f3       	brlt	.-8      	; 0x1a1a <__mulsf3_pse+0x84>
    1a22:	98 3e       	cpi	r25, 0xE8	; 232
    1a24:	d4 f3       	brlt	.-12     	; 0x1a1a <__mulsf3_pse+0x84>
    1a26:	86 95       	lsr	r24
    1a28:	77 95       	ror	r23
    1a2a:	67 95       	ror	r22
    1a2c:	b7 95       	ror	r27
    1a2e:	f7 95       	ror	r31
    1a30:	e7 95       	ror	r30
    1a32:	9f 5f       	subi	r25, 0xFF	; 255
    1a34:	c1 f7       	brne	.-16     	; 0x1a26 <__mulsf3_pse+0x90>
    1a36:	fe 2b       	or	r31, r30
    1a38:	88 0f       	add	r24, r24
    1a3a:	91 1d       	adc	r25, r1
    1a3c:	96 95       	lsr	r25
    1a3e:	87 95       	ror	r24
    1a40:	97 f9       	bld	r25, 7
    1a42:	08 95       	ret

00001a44 <pow>:
    1a44:	fa 01       	movw	r30, r20
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	30 96       	adiw	r30, 0x00	; 0
    1a4c:	21 05       	cpc	r18, r1
    1a4e:	31 05       	cpc	r19, r1
    1a50:	a1 f1       	breq	.+104    	; 0x1aba <pow+0x76>
    1a52:	61 15       	cp	r22, r1
    1a54:	71 05       	cpc	r23, r1
    1a56:	61 f4       	brne	.+24     	; 0x1a70 <pow+0x2c>
    1a58:	80 38       	cpi	r24, 0x80	; 128
    1a5a:	bf e3       	ldi	r27, 0x3F	; 63
    1a5c:	9b 07       	cpc	r25, r27
    1a5e:	49 f1       	breq	.+82     	; 0x1ab2 <pow+0x6e>
    1a60:	68 94       	set
    1a62:	90 38       	cpi	r25, 0x80	; 128
    1a64:	81 05       	cpc	r24, r1
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <pow+0x3c>
    1a68:	80 38       	cpi	r24, 0x80	; 128
    1a6a:	bf ef       	ldi	r27, 0xFF	; 255
    1a6c:	9b 07       	cpc	r25, r27
    1a6e:	41 f0       	breq	.+16     	; 0x1a80 <pow+0x3c>
    1a70:	99 23       	and	r25, r25
    1a72:	4a f5       	brpl	.+82     	; 0x1ac6 <pow+0x82>
    1a74:	ff 3f       	cpi	r31, 0xFF	; 255
    1a76:	e1 05       	cpc	r30, r1
    1a78:	31 05       	cpc	r19, r1
    1a7a:	21 05       	cpc	r18, r1
    1a7c:	19 f1       	breq	.+70     	; 0x1ac4 <pow+0x80>
    1a7e:	e8 94       	clt
    1a80:	08 94       	sec
    1a82:	e7 95       	ror	r30
    1a84:	d9 01       	movw	r26, r18
    1a86:	aa 23       	and	r26, r26
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <pow+0x50>
    1a8a:	ab 2f       	mov	r26, r27
    1a8c:	be 2f       	mov	r27, r30
    1a8e:	f8 5f       	subi	r31, 0xF8	; 248
    1a90:	d0 f3       	brcs	.-12     	; 0x1a86 <pow+0x42>
    1a92:	10 c0       	rjmp	.+32     	; 0x1ab4 <pow+0x70>
    1a94:	ff 5f       	subi	r31, 0xFF	; 255
    1a96:	70 f4       	brcc	.+28     	; 0x1ab4 <pow+0x70>
    1a98:	a6 95       	lsr	r26
    1a9a:	e0 f7       	brcc	.-8      	; 0x1a94 <pow+0x50>
    1a9c:	f7 39       	cpi	r31, 0x97	; 151
    1a9e:	50 f0       	brcs	.+20     	; 0x1ab4 <pow+0x70>
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <pow+0x64>
    1aa2:	ff 3a       	cpi	r31, 0xAF	; 175
    1aa4:	38 f4       	brcc	.+14     	; 0x1ab4 <pow+0x70>
    1aa6:	9f 77       	andi	r25, 0x7F	; 127
    1aa8:	9f 93       	push	r25
    1aaa:	0d d0       	rcall	.+26     	; 0x1ac6 <pow+0x82>
    1aac:	0f 90       	pop	r0
    1aae:	07 fc       	sbrc	r0, 7
    1ab0:	90 58       	subi	r25, 0x80	; 128
    1ab2:	08 95       	ret
    1ab4:	46 f0       	brts	.+16     	; 0x1ac6 <pow+0x82>
    1ab6:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	80 e8       	ldi	r24, 0x80	; 128
    1ac0:	9f e3       	ldi	r25, 0x3F	; 63
    1ac2:	08 95       	ret
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	9f 77       	andi	r25, 0x7F	; 127
    1ac8:	5f 93       	push	r21
    1aca:	4f 93       	push	r20
    1acc:	3f 93       	push	r19
    1ace:	2f 93       	push	r18
    1ad0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <log>
    1ad4:	2f 91       	pop	r18
    1ad6:	3f 91       	pop	r19
    1ad8:	4f 91       	pop	r20
    1ada:	5f 91       	pop	r21
    1adc:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3>
    1ae0:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <exp>
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <pow+0xac>
    1ae6:	16 f0       	brts	.+4      	; 0x1aec <pow+0xa8>
    1ae8:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    1aec:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__fp_zero>
    1af0:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>

00001af4 <exp>:
    1af4:	0e 94 94 0c 	call	0x1928	; 0x1928 <__fp_splitA>
    1af8:	a8 f3       	brcs	.-22     	; 0x1ae4 <pow+0xa0>
    1afa:	96 38       	cpi	r25, 0x86	; 134
    1afc:	a0 f7       	brcc	.-24     	; 0x1ae6 <pow+0xa2>
    1afe:	07 f8       	bld	r0, 7
    1b00:	0f 92       	push	r0
    1b02:	e8 94       	clt
    1b04:	2b e3       	ldi	r18, 0x3B	; 59
    1b06:	3a ea       	ldi	r19, 0xAA	; 170
    1b08:	48 eb       	ldi	r20, 0xB8	; 184
    1b0a:	5f e7       	ldi	r21, 0x7F	; 127
    1b0c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__mulsf3_pse>
    1b10:	0f 92       	push	r0
    1b12:	0f 92       	push	r0
    1b14:	0f 92       	push	r0
    1b16:	4d b7       	in	r20, 0x3d	; 61
    1b18:	5e b7       	in	r21, 0x3e	; 62
    1b1a:	0f 92       	push	r0
    1b1c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <modf>
    1b20:	e4 e5       	ldi	r30, 0x54	; 84
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__fp_powser>
    1b28:	4f 91       	pop	r20
    1b2a:	5f 91       	pop	r21
    1b2c:	ef 91       	pop	r30
    1b2e:	ff 91       	pop	r31
    1b30:	e5 95       	asr	r30
    1b32:	ee 1f       	adc	r30, r30
    1b34:	ff 1f       	adc	r31, r31
    1b36:	49 f0       	breq	.+18     	; 0x1b4a <exp+0x56>
    1b38:	fe 57       	subi	r31, 0x7E	; 126
    1b3a:	e0 68       	ori	r30, 0x80	; 128
    1b3c:	44 27       	eor	r20, r20
    1b3e:	ee 0f       	add	r30, r30
    1b40:	44 1f       	adc	r20, r20
    1b42:	fa 95       	dec	r31
    1b44:	e1 f7       	brne	.-8      	; 0x1b3e <exp+0x4a>
    1b46:	41 95       	neg	r20
    1b48:	55 0b       	sbc	r21, r21
    1b4a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <ldexp>
    1b4e:	0f 90       	pop	r0
    1b50:	07 fe       	sbrs	r0, 7
    1b52:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <inverse>
    1b56:	08 95       	ret

00001b58 <__fp_powser>:
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	1f 93       	push	r17
    1b5e:	0f 93       	push	r16
    1b60:	ff 92       	push	r15
    1b62:	ef 92       	push	r14
    1b64:	df 92       	push	r13
    1b66:	7b 01       	movw	r14, r22
    1b68:	8c 01       	movw	r16, r24
    1b6a:	68 94       	set
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <__fp_powser+0x22>
    1b6e:	da 2e       	mov	r13, r26
    1b70:	ef 01       	movw	r28, r30
    1b72:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__mulsf3x>
    1b76:	fe 01       	movw	r30, r28
    1b78:	e8 94       	clt
    1b7a:	a5 91       	lpm	r26, Z+
    1b7c:	25 91       	lpm	r18, Z+
    1b7e:	35 91       	lpm	r19, Z+
    1b80:	45 91       	lpm	r20, Z+
    1b82:	55 91       	lpm	r21, Z+
    1b84:	a6 f3       	brts	.-24     	; 0x1b6e <__fp_powser+0x16>
    1b86:	ef 01       	movw	r28, r30
    1b88:	0e 94 01 0b 	call	0x1602	; 0x1602 <__addsf3x>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	97 01       	movw	r18, r14
    1b90:	a8 01       	movw	r20, r16
    1b92:	da 94       	dec	r13
    1b94:	69 f7       	brne	.-38     	; 0x1b70 <__fp_powser+0x18>
    1b96:	df 90       	pop	r13
    1b98:	ef 90       	pop	r14
    1b9a:	ff 90       	pop	r15
    1b9c:	0f 91       	pop	r16
    1b9e:	1f 91       	pop	r17
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <inverse>:
    1ba6:	9b 01       	movw	r18, r22
    1ba8:	ac 01       	movw	r20, r24
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e8       	ldi	r24, 0x80	; 128
    1bb0:	9f e3       	ldi	r25, 0x3F	; 63
    1bb2:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__divsf3>
    1bb6:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>
    1bba:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>

00001bbe <ldexp>:
    1bbe:	0e 94 94 0c 	call	0x1928	; 0x1928 <__fp_splitA>
    1bc2:	d8 f3       	brcs	.-10     	; 0x1bba <inverse+0x14>
    1bc4:	99 23       	and	r25, r25
    1bc6:	c9 f3       	breq	.-14     	; 0x1bba <inverse+0x14>
    1bc8:	94 0f       	add	r25, r20
    1bca:	51 1d       	adc	r21, r1
    1bcc:	a3 f3       	brvs	.-24     	; 0x1bb6 <inverse+0x10>
    1bce:	91 50       	subi	r25, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	94 f0       	brlt	.+36     	; 0x1bf8 <ldexp+0x3a>
    1bd4:	59 f0       	breq	.+22     	; 0x1bec <ldexp+0x2e>
    1bd6:	88 23       	and	r24, r24
    1bd8:	32 f0       	brmi	.+12     	; 0x1be6 <ldexp+0x28>
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	91 50       	subi	r25, 0x01	; 1
    1be2:	50 40       	sbci	r21, 0x00	; 0
    1be4:	c1 f7       	brne	.-16     	; 0x1bd6 <ldexp+0x18>
    1be6:	9e 3f       	cpi	r25, 0xFE	; 254
    1be8:	51 05       	cpc	r21, r1
    1bea:	2c f7       	brge	.-54     	; 0x1bb6 <inverse+0x10>
    1bec:	88 0f       	add	r24, r24
    1bee:	91 1d       	adc	r25, r1
    1bf0:	96 95       	lsr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	97 f9       	bld	r25, 7
    1bf6:	08 95       	ret
    1bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfa:	ac f0       	brlt	.+42     	; 0x1c26 <ldexp+0x68>
    1bfc:	98 3e       	cpi	r25, 0xE8	; 232
    1bfe:	9c f0       	brlt	.+38     	; 0x1c26 <ldexp+0x68>
    1c00:	bb 27       	eor	r27, r27
    1c02:	86 95       	lsr	r24
    1c04:	77 95       	ror	r23
    1c06:	67 95       	ror	r22
    1c08:	b7 95       	ror	r27
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <ldexp+0x50>
    1c0c:	b1 60       	ori	r27, 0x01	; 1
    1c0e:	93 95       	inc	r25
    1c10:	c1 f7       	brne	.-16     	; 0x1c02 <ldexp+0x44>
    1c12:	bb 0f       	add	r27, r27
    1c14:	58 f7       	brcc	.-42     	; 0x1bec <ldexp+0x2e>
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <ldexp+0x5e>
    1c18:	60 ff       	sbrs	r22, 0
    1c1a:	e8 cf       	rjmp	.-48     	; 0x1bec <ldexp+0x2e>
    1c1c:	6f 5f       	subi	r22, 0xFF	; 255
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	e3 cf       	rjmp	.-58     	; 0x1bec <ldexp+0x2e>
    1c26:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__fp_szero>
    1c2a:	16 f0       	brts	.+4      	; 0x1c30 <ldexp+0x72>
    1c2c:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__fp_mpack>
    1c30:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_nan>
    1c34:	68 94       	set
    1c36:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_inf>

00001c3a <log>:
    1c3a:	0e 94 94 0c 	call	0x1928	; 0x1928 <__fp_splitA>
    1c3e:	a8 f3       	brcs	.-22     	; 0x1c2a <ldexp+0x6c>
    1c40:	99 23       	and	r25, r25
    1c42:	c1 f3       	breq	.-16     	; 0x1c34 <ldexp+0x76>
    1c44:	ae f3       	brts	.-22     	; 0x1c30 <ldexp+0x72>
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	1f 93       	push	r17
    1c4c:	0f 93       	push	r16
    1c4e:	ff 92       	push	r15
    1c50:	c9 2f       	mov	r28, r25
    1c52:	dd 27       	eor	r29, r29
    1c54:	88 23       	and	r24, r24
    1c56:	2a f0       	brmi	.+10     	; 0x1c62 <log+0x28>
    1c58:	21 97       	sbiw	r28, 0x01	; 1
    1c5a:	66 0f       	add	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	da f7       	brpl	.-10     	; 0x1c58 <log+0x1e>
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f eb       	ldi	r21, 0xBF	; 191
    1c6a:	9f e3       	ldi	r25, 0x3F	; 63
    1c6c:	88 39       	cpi	r24, 0x98	; 152
    1c6e:	20 f0       	brcs	.+8      	; 0x1c78 <log+0x3e>
    1c70:	80 3e       	cpi	r24, 0xE0	; 224
    1c72:	38 f0       	brcs	.+14     	; 0x1c82 <log+0x48>
    1c74:	21 96       	adiw	r28, 0x01	; 1
    1c76:	8f 77       	andi	r24, 0x7F	; 127
    1c78:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
    1c7c:	ec e7       	ldi	r30, 0x7C	; 124
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <log+0x50>
    1c82:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
    1c86:	e9 ea       	ldi	r30, 0xA9	; 169
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__fp_powser>
    1c8e:	8b 01       	movw	r16, r22
    1c90:	be 01       	movw	r22, r28
    1c92:	ec 01       	movw	r28, r24
    1c94:	fb 2e       	mov	r15, r27
    1c96:	6f 57       	subi	r22, 0x7F	; 127
    1c98:	71 09       	sbc	r23, r1
    1c9a:	75 95       	asr	r23
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 0b       	sbc	r24, r24
    1ca0:	99 0b       	sbc	r25, r25
    1ca2:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatsisf>
    1ca6:	28 e1       	ldi	r18, 0x18	; 24
    1ca8:	32 e7       	ldi	r19, 0x72	; 114
    1caa:	41 e3       	ldi	r20, 0x31	; 49
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__mulsf3x>
    1cb2:	af 2d       	mov	r26, r15
    1cb4:	98 01       	movw	r18, r16
    1cb6:	ae 01       	movw	r20, r28
    1cb8:	ff 90       	pop	r15
    1cba:	0f 91       	pop	r16
    1cbc:	1f 91       	pop	r17
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	0e 94 01 0b 	call	0x1602	; 0x1602 <__addsf3x>
    1cc6:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__fp_round>

00001cca <modf>:
    1cca:	fa 01       	movw	r30, r20
    1ccc:	dc 01       	movw	r26, r24
    1cce:	aa 0f       	add	r26, r26
    1cd0:	bb 1f       	adc	r27, r27
    1cd2:	9b 01       	movw	r18, r22
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	bf 57       	subi	r27, 0x7F	; 127
    1cd8:	28 f4       	brcc	.+10     	; 0x1ce4 <modf+0x1a>
    1cda:	22 27       	eor	r18, r18
    1cdc:	33 27       	eor	r19, r19
    1cde:	44 27       	eor	r20, r20
    1ce0:	50 78       	andi	r21, 0x80	; 128
    1ce2:	20 c0       	rjmp	.+64     	; 0x1d24 <modf+0x5a>
    1ce4:	b7 51       	subi	r27, 0x17	; 23
    1ce6:	90 f4       	brcc	.+36     	; 0x1d0c <modf+0x42>
    1ce8:	ab 2f       	mov	r26, r27
    1cea:	00 24       	eor	r0, r0
    1cec:	46 95       	lsr	r20
    1cee:	37 95       	ror	r19
    1cf0:	27 95       	ror	r18
    1cf2:	01 1c       	adc	r0, r1
    1cf4:	a3 95       	inc	r26
    1cf6:	d2 f3       	brmi	.-12     	; 0x1cec <modf+0x22>
    1cf8:	00 20       	and	r0, r0
    1cfa:	71 f0       	breq	.+28     	; 0x1d18 <modf+0x4e>
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	44 1f       	adc	r20, r20
    1d02:	b3 95       	inc	r27
    1d04:	da f3       	brmi	.-10     	; 0x1cfc <modf+0x32>
    1d06:	0e d0       	rcall	.+28     	; 0x1d24 <modf+0x5a>
    1d08:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__subsf3>
    1d0c:	61 30       	cpi	r22, 0x01	; 1
    1d0e:	71 05       	cpc	r23, r1
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	8a 07       	cpc	r24, r26
    1d14:	b9 46       	sbci	r27, 0x69	; 105
    1d16:	30 f4       	brcc	.+12     	; 0x1d24 <modf+0x5a>
    1d18:	9b 01       	movw	r18, r22
    1d1a:	ac 01       	movw	r20, r24
    1d1c:	66 27       	eor	r22, r22
    1d1e:	77 27       	eor	r23, r23
    1d20:	88 27       	eor	r24, r24
    1d22:	90 78       	andi	r25, 0x80	; 128
    1d24:	30 96       	adiw	r30, 0x00	; 0
    1d26:	21 f0       	breq	.+8      	; 0x1d30 <modf+0x66>
    1d28:	20 83       	st	Z, r18
    1d2a:	31 83       	std	Z+1, r19	; 0x01
    1d2c:	42 83       	std	Z+2, r20	; 0x02
    1d2e:	53 83       	std	Z+3, r21	; 0x03
    1d30:	08 95       	ret

00001d32 <__fp_mpack>:
    1d32:	9f 3f       	cpi	r25, 0xFF	; 255
    1d34:	31 f0       	breq	.+12     	; 0x1d42 <__fp_mpack_finite+0xc>

00001d36 <__fp_mpack_finite>:
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	20 f4       	brcc	.+8      	; 0x1d42 <__fp_mpack_finite+0xc>
    1d3a:	87 95       	ror	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	88 0f       	add	r24, r24
    1d44:	91 1d       	adc	r25, r1
    1d46:	96 95       	lsr	r25
    1d48:	87 95       	ror	r24
    1d4a:	97 f9       	bld	r25, 7
    1d4c:	08 95       	ret

00001d4e <__divmodhi4>:
    1d4e:	97 fb       	bst	r25, 7
    1d50:	07 2e       	mov	r0, r23
    1d52:	16 f4       	brtc	.+4      	; 0x1d58 <__divmodhi4+0xa>
    1d54:	00 94       	com	r0
    1d56:	07 d0       	rcall	.+14     	; 0x1d66 <__divmodhi4_neg1>
    1d58:	77 fd       	sbrc	r23, 7
    1d5a:	09 d0       	rcall	.+18     	; 0x1d6e <__divmodhi4_neg2>
    1d5c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__udivmodhi4>
    1d60:	07 fc       	sbrc	r0, 7
    1d62:	05 d0       	rcall	.+10     	; 0x1d6e <__divmodhi4_neg2>
    1d64:	3e f4       	brtc	.+14     	; 0x1d74 <__divmodhi4_exit>

00001d66 <__divmodhi4_neg1>:
    1d66:	90 95       	com	r25
    1d68:	81 95       	neg	r24
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	08 95       	ret

00001d6e <__divmodhi4_neg2>:
    1d6e:	70 95       	com	r23
    1d70:	61 95       	neg	r22
    1d72:	7f 4f       	sbci	r23, 0xFF	; 255

00001d74 <__divmodhi4_exit>:
    1d74:	08 95       	ret

00001d76 <__udivmodhi4>:
    1d76:	aa 1b       	sub	r26, r26
    1d78:	bb 1b       	sub	r27, r27
    1d7a:	51 e1       	ldi	r21, 0x11	; 17
    1d7c:	07 c0       	rjmp	.+14     	; 0x1d8c <__udivmodhi4_ep>

00001d7e <__udivmodhi4_loop>:
    1d7e:	aa 1f       	adc	r26, r26
    1d80:	bb 1f       	adc	r27, r27
    1d82:	a6 17       	cp	r26, r22
    1d84:	b7 07       	cpc	r27, r23
    1d86:	10 f0       	brcs	.+4      	; 0x1d8c <__udivmodhi4_ep>
    1d88:	a6 1b       	sub	r26, r22
    1d8a:	b7 0b       	sbc	r27, r23

00001d8c <__udivmodhi4_ep>:
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	5a 95       	dec	r21
    1d92:	a9 f7       	brne	.-22     	; 0x1d7e <__udivmodhi4_loop>
    1d94:	80 95       	com	r24
    1d96:	90 95       	com	r25
    1d98:	bc 01       	movw	r22, r24
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	08 95       	ret

00001d9e <__tablejump2__>:
    1d9e:	ee 0f       	add	r30, r30
    1da0:	ff 1f       	adc	r31, r31
    1da2:	05 90       	lpm	r0, Z+
    1da4:	f4 91       	lpm	r31, Z
    1da6:	e0 2d       	mov	r30, r0
    1da8:	09 94       	ijmp

00001daa <__itoa_ncheck>:
    1daa:	bb 27       	eor	r27, r27
    1dac:	4a 30       	cpi	r20, 0x0A	; 10
    1dae:	31 f4       	brne	.+12     	; 0x1dbc <__itoa_ncheck+0x12>
    1db0:	99 23       	and	r25, r25
    1db2:	22 f4       	brpl	.+8      	; 0x1dbc <__itoa_ncheck+0x12>
    1db4:	bd e2       	ldi	r27, 0x2D	; 45
    1db6:	90 95       	com	r25
    1db8:	81 95       	neg	r24
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__utoa_common>

00001dc0 <__utoa_ncheck>:
    1dc0:	bb 27       	eor	r27, r27

00001dc2 <__utoa_common>:
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	55 27       	eor	r21, r21
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	a4 17       	cp	r26, r20
    1dd0:	10 f0       	brcs	.+4      	; 0x1dd6 <__utoa_common+0x14>
    1dd2:	a4 1b       	sub	r26, r20
    1dd4:	83 95       	inc	r24
    1dd6:	50 51       	subi	r21, 0x10	; 16
    1dd8:	b9 f7       	brne	.-18     	; 0x1dc8 <__utoa_common+0x6>
    1dda:	a0 5d       	subi	r26, 0xD0	; 208
    1ddc:	aa 33       	cpi	r26, 0x3A	; 58
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <__utoa_common+0x20>
    1de0:	a9 5d       	subi	r26, 0xD9	; 217
    1de2:	a1 93       	st	Z+, r26
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	79 f7       	brne	.-34     	; 0x1dc6 <__utoa_common+0x4>
    1de8:	b1 11       	cpse	r27, r1
    1dea:	b1 93       	st	Z+, r27
    1dec:	11 92       	st	Z+, r1
    1dee:	cb 01       	movw	r24, r22
    1df0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <strrev>

00001df4 <strrev>:
    1df4:	dc 01       	movw	r26, r24
    1df6:	fc 01       	movw	r30, r24
    1df8:	67 2f       	mov	r22, r23
    1dfa:	71 91       	ld	r23, Z+
    1dfc:	77 23       	and	r23, r23
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <strrev+0x4>
    1e00:	32 97       	sbiw	r30, 0x02	; 2
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <strrev+0x18>
    1e04:	7c 91       	ld	r23, X
    1e06:	6d 93       	st	X+, r22
    1e08:	70 83       	st	Z, r23
    1e0a:	62 91       	ld	r22, -Z
    1e0c:	ae 17       	cp	r26, r30
    1e0e:	bf 07       	cpc	r27, r31
    1e10:	c8 f3       	brcs	.-14     	; 0x1e04 <strrev+0x10>
    1e12:	08 95       	ret

00001e14 <_exit>:
    1e14:	f8 94       	cli

00001e16 <__stop_program>:
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <__stop_program>
