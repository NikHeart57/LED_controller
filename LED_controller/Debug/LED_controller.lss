
LED_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000582  00800060  000020ce  00002162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008005e2  008005e2  000026e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003fa2  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b94  00000000  00000000  000067ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000142f  00000000  00000000  0000734e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00008780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000858  00000000  00000000  00008a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000185d  00000000  00000000  000092d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000ab31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_1>
       8:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_2>
       c:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_3>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_7>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_start>:
      d6:	83 09       	sbc	r24, r3

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d8 e0       	ldi	r29, 0x08	; 8
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	15 e0       	ldi	r17, 0x05	; 5
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	ee ec       	ldi	r30, 0xCE	; 206
      ec:	f0 e2       	ldi	r31, 0x20	; 32
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a2 3e       	cpi	r26, 0xE2	; 226
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	26 e0       	ldi	r18, 0x06	; 6
      fc:	a2 ee       	ldi	r26, 0xE2	; 226
      fe:	b5 e0       	ldi	r27, 0x05	; 5
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a9 30       	cpi	r26, 0x09	; 9
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 2a 10 	call	0x2054	; 0x2054 <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
     124:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN6DS13079writeTimeEPc>:
	//==============================================================================
	// Адрес часов слейв на запись W	0b11010000
	// Адрес часов слейв на чтение R	0b11010001
	
	void writeTime(char time[])
	{
     12c:	fc 01       	movw	r30, r24
		
	//  Функции мастера трансмиттера  //
		
	inline void I2CMTinit(void)
	{
		TWBR = 40;										// Задает скорость соединения. Чем больше тем медленнее; 255 -> 28кбит/с; 66 -> 100кбит/с; 11 -> 388кбит/с
     12e:	88 e2       	ldi	r24, 0x28	; 40
     130:	80 b9       	out	0x00, r24	; 0
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
     132:	81 b1       	in	r24, 0x01	; 1
     134:	81 b9       	out	0x01, r24	; 1
	}

	inline void I2CMTstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     136:	84 ea       	ldi	r24, 0xA4	; 164
     138:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     13a:	06 b6       	in	r0, 0x36	; 54
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <_ZN6DS13079writeTimeEPc+0xe>
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     140:	80 ed       	ldi	r24, 0xD0	; 208
     142:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     144:	84 e8       	ldi	r24, 0x84	; 132
     146:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     148:	06 b6       	in	r0, 0x36	; 54
     14a:	07 fe       	sbrs	r0, 7
     14c:	fd cf       	rjmp	.-6      	; 0x148 <_ZN6DS13079writeTimeEPc+0x1c>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     14e:	13 b8       	out	0x03, r1	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     150:	84 e8       	ldi	r24, 0x84	; 132
     152:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     154:	06 b6       	in	r0, 0x36	; 54
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <_ZN6DS13079writeTimeEPc+0x28>
		I2CMTstart();							// Задание стартового условия мастером				// 00001 = 0x08 - A START condition has been transmitted
		I2CMTsend(DS1307_WRITE_ADRESS);			// Передача адреса									// 00011 = 0x18 - SLA+W has been transmitted;		ACK has been received
		I2CMTsend(0x00);						// Передача данных(адреса записи в памяти DS1307)	// 00101 = 0x28 - Data byte has been transmitted;	ACK has been received
		
		// Передача данных DATA					// 00101 = 0x28 - Data byte has been transmitted;	ACK has been received
		I2CMTsend(DecToBin(time[0]));			// 0x00	7-CH	6-10Sec		5-10Sec		4-10Sec		3-Sec	2-Sec	1-Sec	0-Sec	(CH-0 - вкл осцилятор, CH-1 - вЫкл осцилятор)
     15a:	90 81       	ld	r25, Z
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     15c:	8d ec       	ldi	r24, 0xCD	; 205
     15e:	98 9f       	mul	r25, r24
     160:	81 2d       	mov	r24, r1
     162:	11 24       	eor	r1, r1
     164:	86 95       	lsr	r24
     166:	86 95       	lsr	r24
     168:	86 95       	lsr	r24
     16a:	40 e1       	ldi	r20, 0x10	; 16
     16c:	84 9f       	mul	r24, r20
     16e:	90 01       	movw	r18, r0
     170:	11 24       	eor	r1, r1
     172:	88 0f       	add	r24, r24
     174:	38 2f       	mov	r19, r24
     176:	33 0f       	add	r19, r19
     178:	33 0f       	add	r19, r19
     17a:	83 0f       	add	r24, r19
     17c:	98 1b       	sub	r25, r24
     17e:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     180:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     182:	84 e8       	ldi	r24, 0x84	; 132
     184:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     186:	06 b6       	in	r0, 0x36	; 54
     188:	07 fe       	sbrs	r0, 7
     18a:	fd cf       	rjmp	.-6      	; 0x186 <_ZN6DS13079writeTimeEPc+0x5a>
		I2CMTsend(DecToBin(time[1]));			// 0x01	7-0		6-10Min		5-10Min		4-10Min		3-Min	2-Min	1-Min	0-Min
     18c:	91 81       	ldd	r25, Z+1	; 0x01
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     18e:	8d ec       	ldi	r24, 0xCD	; 205
     190:	98 9f       	mul	r25, r24
     192:	81 2d       	mov	r24, r1
     194:	11 24       	eor	r1, r1
     196:	86 95       	lsr	r24
     198:	86 95       	lsr	r24
     19a:	86 95       	lsr	r24
     19c:	40 e1       	ldi	r20, 0x10	; 16
     19e:	84 9f       	mul	r24, r20
     1a0:	90 01       	movw	r18, r0
     1a2:	11 24       	eor	r1, r1
     1a4:	88 0f       	add	r24, r24
     1a6:	38 2f       	mov	r19, r24
     1a8:	33 0f       	add	r19, r19
     1aa:	33 0f       	add	r19, r19
     1ac:	83 0f       	add	r24, r19
     1ae:	98 1b       	sub	r25, r24
     1b0:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     1b2:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_ZN6DS13079writeTimeEPc+0x8c>
		I2CMTsend(DecToBin(time[2]));			// 0x02	7-0		6-12/24		5-10H/AMPM	4-10Hour	3-Hour	2-Hour	1-Hour	0-Hour
     1be:	82 81       	ldd	r24, Z+2	; 0x02
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     1c0:	9d ec       	ldi	r25, 0xCD	; 205
     1c2:	89 9f       	mul	r24, r25
     1c4:	91 2d       	mov	r25, r1
     1c6:	11 24       	eor	r1, r1
     1c8:	96 95       	lsr	r25
     1ca:	96 95       	lsr	r25
     1cc:	96 95       	lsr	r25
     1ce:	40 e1       	ldi	r20, 0x10	; 16
     1d0:	94 9f       	mul	r25, r20
     1d2:	90 01       	movw	r18, r0
     1d4:	11 24       	eor	r1, r1
     1d6:	99 0f       	add	r25, r25
     1d8:	39 2f       	mov	r19, r25
     1da:	33 0f       	add	r19, r19
     1dc:	33 0f       	add	r19, r19
     1de:	93 0f       	add	r25, r19
     1e0:	89 1b       	sub	r24, r25
     1e2:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     1e4:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     1e6:	84 e8       	ldi	r24, 0x84	; 132
     1e8:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     1ea:	06 b6       	in	r0, 0x36	; 54
     1ec:	07 fe       	sbrs	r0, 7
     1ee:	fd cf       	rjmp	.-6      	; 0x1ea <_ZN6DS13079writeTimeEPc+0xbe>
		I2CMTsend(DecToBin(time[3]));			// 0x03	7-0		6-0			5-0			4-0			3-0		2-Day	1-Day	0-Day	(День недели)
     1f0:	83 81       	ldd	r24, Z+3	; 0x03
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     1f2:	9d ec       	ldi	r25, 0xCD	; 205
     1f4:	89 9f       	mul	r24, r25
     1f6:	91 2d       	mov	r25, r1
     1f8:	11 24       	eor	r1, r1
     1fa:	96 95       	lsr	r25
     1fc:	96 95       	lsr	r25
     1fe:	96 95       	lsr	r25
     200:	40 e1       	ldi	r20, 0x10	; 16
     202:	94 9f       	mul	r25, r20
     204:	90 01       	movw	r18, r0
     206:	11 24       	eor	r1, r1
     208:	99 0f       	add	r25, r25
     20a:	39 2f       	mov	r19, r25
     20c:	33 0f       	add	r19, r19
     20e:	33 0f       	add	r19, r19
     210:	93 0f       	add	r25, r19
     212:	89 1b       	sub	r24, r25
     214:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     216:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     218:	84 e8       	ldi	r24, 0x84	; 132
     21a:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     21c:	06 b6       	in	r0, 0x36	; 54
     21e:	07 fe       	sbrs	r0, 7
     220:	fd cf       	rjmp	.-6      	; 0x21c <_ZN6DS13079writeTimeEPc+0xf0>
		I2CMTsend(DecToBin(time[4]));			// 0x04	7-0		6-0			5-10Date	4-10Date	3-Date	2-Date	1-Date	0-Date	(День месяца)
     222:	84 81       	ldd	r24, Z+4	; 0x04
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     224:	9d ec       	ldi	r25, 0xCD	; 205
     226:	89 9f       	mul	r24, r25
     228:	91 2d       	mov	r25, r1
     22a:	11 24       	eor	r1, r1
     22c:	96 95       	lsr	r25
     22e:	96 95       	lsr	r25
     230:	96 95       	lsr	r25
     232:	40 e1       	ldi	r20, 0x10	; 16
     234:	94 9f       	mul	r25, r20
     236:	90 01       	movw	r18, r0
     238:	11 24       	eor	r1, r1
     23a:	99 0f       	add	r25, r25
     23c:	39 2f       	mov	r19, r25
     23e:	33 0f       	add	r19, r19
     240:	33 0f       	add	r19, r19
     242:	93 0f       	add	r25, r19
     244:	89 1b       	sub	r24, r25
     246:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     248:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     24e:	06 b6       	in	r0, 0x36	; 54
     250:	07 fe       	sbrs	r0, 7
     252:	fd cf       	rjmp	.-6      	; 0x24e <_ZN6DS13079writeTimeEPc+0x122>
		I2CMTsend(DecToBin(time[5]));			// 0x05	7-0		6-0			5-0			4-10Month	3-Month	2-Month	1-Month	0-Month
     254:	85 81       	ldd	r24, Z+5	; 0x05
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     256:	9d ec       	ldi	r25, 0xCD	; 205
     258:	89 9f       	mul	r24, r25
     25a:	91 2d       	mov	r25, r1
     25c:	11 24       	eor	r1, r1
     25e:	96 95       	lsr	r25
     260:	96 95       	lsr	r25
     262:	96 95       	lsr	r25
     264:	40 e1       	ldi	r20, 0x10	; 16
     266:	94 9f       	mul	r25, r20
     268:	90 01       	movw	r18, r0
     26a:	11 24       	eor	r1, r1
     26c:	99 0f       	add	r25, r25
     26e:	39 2f       	mov	r19, r25
     270:	33 0f       	add	r19, r19
     272:	33 0f       	add	r19, r19
     274:	93 0f       	add	r25, r19
     276:	89 1b       	sub	r24, r25
     278:	82 2b       	or	r24, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     27a:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     27c:	84 e8       	ldi	r24, 0x84	; 132
     27e:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     280:	06 b6       	in	r0, 0x36	; 54
     282:	07 fe       	sbrs	r0, 7
     284:	fd cf       	rjmp	.-6      	; 0x280 <_ZN6DS13079writeTimeEPc+0x154>
		I2CMTsend(DecToBin(time[6]));			// 0x06	7-10Y	6-10Y		5-10Y		4-10Y		3-Y		2-Y		1-Y		0-Y
     286:	96 81       	ldd	r25, Z+6	; 0x06
		return ch;
	}

	inline char DecToBin(char c)					// Перевод десятичного числа в двоично-десятичное
	{
		unsigned char ch = ((c / 10) << 4)|(c % 10);
     288:	8d ec       	ldi	r24, 0xCD	; 205
     28a:	98 9f       	mul	r25, r24
     28c:	81 2d       	mov	r24, r1
     28e:	11 24       	eor	r1, r1
     290:	86 95       	lsr	r24
     292:	86 95       	lsr	r24
     294:	86 95       	lsr	r24
     296:	40 e1       	ldi	r20, 0x10	; 16
     298:	84 9f       	mul	r24, r20
     29a:	90 01       	movw	r18, r0
     29c:	11 24       	eor	r1, r1
     29e:	88 0f       	add	r24, r24
     2a0:	38 2f       	mov	r19, r24
     2a2:	33 0f       	add	r19, r19
     2a4:	33 0f       	add	r19, r19
     2a6:	83 0f       	add	r24, r19
     2a8:	98 1b       	sub	r25, r24
     2aa:	92 2b       	or	r25, r18
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2ac:	93 b9       	out	0x03, r25	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2ae:	84 e8       	ldi	r24, 0x84	; 132
     2b0:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     2b2:	06 b6       	in	r0, 0x36	; 54
     2b4:	07 fe       	sbrs	r0, 7
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <_ZN6DS13079writeTimeEPc+0x186>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMTsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2bc:	84 e8       	ldi	r24, 0x84	; 132
     2be:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// ожидание завершения операции
     2c0:	06 b6       	in	r0, 0x36	; 54
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <_ZN6DS13079writeTimeEPc+0x194>
	}

	inline void I2CMTstop(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
     2c6:	84 e9       	ldi	r24, 0x94	; 148
     2c8:	86 bf       	out	0x36, r24	; 54
     2ca:	08 95       	ret

000002cc <_ZN6DS13078readTimeEPc>:
		I2CMTsend(0b00010000);					// 0x07	7-OUT	6-0			5-0			4-SQWE		3-0		2-0		1-RS1	0-RS0	(OUT - логика на выходе; SQWE - генератор на выходе; RS1..0 - прескелереры частоты генератора SQWE)
		I2CMTstop();							// Стоп от мастера									// 11111 = 0xf8 - No relevant state information	available; TWINT = “0”
	}

	void readTime(char time[])
	{
     2cc:	fc 01       	movw	r30, r24
		
	//  Функции мастера рессивера  //
		
	inline void I2CMRinit(void)
	{
		TWBR = 66;										// Задает скорость соединения. Чем больше тем медленнее; 255 -> 28кбит/с; 66 -> 100кбит/с
     2ce:	82 e4       	ldi	r24, 0x42	; 66
     2d0:	80 b9       	out	0x00, r24	; 0
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
     2d2:	81 b1       	in	r24, 0x01	; 1
     2d4:	81 b9       	out	0x01, r24	; 1
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     2d6:	84 ea       	ldi	r24, 0xA4	; 164
     2d8:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     2da:	06 b6       	in	r0, 0x36	; 54
     2dc:	07 fe       	sbrs	r0, 7
     2de:	fd cf       	rjmp	.-6      	; 0x2da <_ZN6DS13078readTimeEPc+0xe>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2e0:	80 ed       	ldi	r24, 0xD0	; 208
     2e2:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2e4:	84 e8       	ldi	r24, 0x84	; 132
     2e6:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     2e8:	06 b6       	in	r0, 0x36	; 54
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <_ZN6DS13078readTimeEPc+0x1c>
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     2ee:	13 b8       	out	0x03, r1	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     2f0:	84 e8       	ldi	r24, 0x84	; 132
     2f2:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     2f4:	06 b6       	in	r0, 0x36	; 54
     2f6:	07 fe       	sbrs	r0, 7
     2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <_ZN6DS13078readTimeEPc+0x28>
		TWSR |= (0 << TWPS1)|(0 << TWPS0);				// Аналогично (00 - 11)
	}
		
	inline void I2CMRstart(void)
	{
		TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);	// Send START condition
     2fa:	84 ea       	ldi	r24, 0xA4	; 164
     2fc:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Wait for TWINT Flag set. This indicates that the START condition has been transmitted
     2fe:	06 b6       	in	r0, 0x36	; 54
     300:	07 fe       	sbrs	r0, 7
     302:	fd cf       	rjmp	.-6      	; 0x2fe <_ZN6DS13078readTimeEPc+0x32>
	}

	inline void I2CMRsend(char data)
	{
		TWDR = data;									// Load data into TWDR Register.
     304:	81 ed       	ldi	r24, 0xD1	; 209
     306:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT)|(1 << TWEN);				// Clear TWINT bit in TWCR to start transmission of data
     308:	84 e8       	ldi	r24, 0x84	; 132
     30a:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
     30c:	06 b6       	in	r0, 0x36	; 54
     30e:	07 fe       	sbrs	r0, 7
     310:	fd cf       	rjmp	.-6      	; 0x30c <_ZN6DS13078readTimeEPc+0x40>
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     312:	84 ec       	ldi	r24, 0xC4	; 196
     314:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     316:	06 b6       	in	r0, 0x36	; 54
     318:	07 fe       	sbrs	r0, 7
     31a:	fd cf       	rjmp	.-6      	; 0x316 <_ZN6DS13078readTimeEPc+0x4a>
		return TWDR;									// Читаем регистр данных
     31c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     31e:	28 2f       	mov	r18, r24
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	35 95       	asr	r19
     324:	27 95       	ror	r18
     326:	35 95       	asr	r19
     328:	27 95       	ror	r18
     32a:	35 95       	asr	r19
     32c:	27 95       	ror	r18
     32e:	35 95       	asr	r19
     330:	27 95       	ror	r18
     332:	22 0f       	add	r18, r18
     334:	92 2f       	mov	r25, r18
     336:	99 0f       	add	r25, r25
     338:	99 0f       	add	r25, r25
     33a:	29 0f       	add	r18, r25
     33c:	8f 70       	andi	r24, 0x0F	; 15
     33e:	82 0f       	add	r24, r18
		I2CMRsend(DS1307_WRITE_ADRESS);			// Передача адреса слэйва
		I2CMRsend(0x00);						// Передача адреса ячейки
		
		I2CMRstart();							// Повторный старт
		I2CMRsend(DS1307_READ_ADRESS);			// Отправка адреса слэйва							// 01000 = 0x40 - SLA+R has been transmitted;	ACK has been received
		time[0] = BinToDec(I2CMRread());		// Чтение данных   ACK								// 01010 = Data byte has been received;			ACK has been returned
     340:	80 83       	st	Z, r24
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     342:	84 ec       	ldi	r24, 0xC4	; 196
     344:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     346:	06 b6       	in	r0, 0x36	; 54
     348:	07 fe       	sbrs	r0, 7
     34a:	fd cf       	rjmp	.-6      	; 0x346 <_ZN6DS13078readTimeEPc+0x7a>
		return TWDR;									// Читаем регистр данных
     34c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	35 95       	asr	r19
     354:	27 95       	ror	r18
     356:	35 95       	asr	r19
     358:	27 95       	ror	r18
     35a:	35 95       	asr	r19
     35c:	27 95       	ror	r18
     35e:	35 95       	asr	r19
     360:	27 95       	ror	r18
     362:	22 0f       	add	r18, r18
     364:	92 2f       	mov	r25, r18
     366:	99 0f       	add	r25, r25
     368:	99 0f       	add	r25, r25
     36a:	29 0f       	add	r18, r25
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	82 0f       	add	r24, r18
		time[1] =  BinToDec(I2CMRread());
     370:	81 83       	std	Z+1, r24	; 0x01
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     372:	84 ec       	ldi	r24, 0xC4	; 196
     374:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     376:	06 b6       	in	r0, 0x36	; 54
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <_ZN6DS13078readTimeEPc+0xaa>
		return TWDR;									// Читаем регистр данных
     37c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	35 95       	asr	r19
     384:	27 95       	ror	r18
     386:	35 95       	asr	r19
     388:	27 95       	ror	r18
     38a:	35 95       	asr	r19
     38c:	27 95       	ror	r18
     38e:	35 95       	asr	r19
     390:	27 95       	ror	r18
     392:	22 0f       	add	r18, r18
     394:	92 2f       	mov	r25, r18
     396:	99 0f       	add	r25, r25
     398:	99 0f       	add	r25, r25
     39a:	29 0f       	add	r18, r25
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	82 0f       	add	r24, r18
		time[2] = BinToDec(I2CMRread());
     3a0:	82 83       	std	Z+2, r24	; 0x02
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     3a2:	84 ec       	ldi	r24, 0xC4	; 196
     3a4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     3a6:	06 b6       	in	r0, 0x36	; 54
     3a8:	07 fe       	sbrs	r0, 7
     3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <_ZN6DS13078readTimeEPc+0xda>
		return TWDR;									// Читаем регистр данных
     3ac:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	35 95       	asr	r19
     3b4:	27 95       	ror	r18
     3b6:	35 95       	asr	r19
     3b8:	27 95       	ror	r18
     3ba:	35 95       	asr	r19
     3bc:	27 95       	ror	r18
     3be:	35 95       	asr	r19
     3c0:	27 95       	ror	r18
     3c2:	22 0f       	add	r18, r18
     3c4:	92 2f       	mov	r25, r18
     3c6:	99 0f       	add	r25, r25
     3c8:	99 0f       	add	r25, r25
     3ca:	29 0f       	add	r18, r25
     3cc:	8f 70       	andi	r24, 0x0F	; 15
     3ce:	82 0f       	add	r24, r18
		time[3] = BinToDec(I2CMRread());
     3d0:	83 83       	std	Z+3, r24	; 0x03
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     3d2:	84 ec       	ldi	r24, 0xC4	; 196
     3d4:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <_ZN6DS13078readTimeEPc+0x10a>
		return TWDR;									// Читаем регистр данных
     3dc:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	35 95       	asr	r19
     3e4:	27 95       	ror	r18
     3e6:	35 95       	asr	r19
     3e8:	27 95       	ror	r18
     3ea:	35 95       	asr	r19
     3ec:	27 95       	ror	r18
     3ee:	35 95       	asr	r19
     3f0:	27 95       	ror	r18
     3f2:	22 0f       	add	r18, r18
     3f4:	92 2f       	mov	r25, r18
     3f6:	99 0f       	add	r25, r25
     3f8:	99 0f       	add	r25, r25
     3fa:	29 0f       	add	r18, r25
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	82 0f       	add	r24, r18
		time[4] = BinToDec(I2CMRread());
     400:	84 83       	std	Z+4, r24	; 0x04
		while (!(TWCR & (1 << TWINT)));					// Ожидание завершения операции
	}
		
	inline char I2CMRread(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWEA);
     402:	84 ec       	ldi	r24, 0xC4	; 196
     404:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					// Ожидание установки бита TWIN
     406:	06 b6       	in	r0, 0x36	; 54
     408:	07 fe       	sbrs	r0, 7
     40a:	fd cf       	rjmp	.-6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		return TWDR;									// Читаем регистр данных
     40c:	83 b1       	in	r24, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	35 95       	asr	r19
     414:	27 95       	ror	r18
     416:	35 95       	asr	r19
     418:	27 95       	ror	r18
     41a:	35 95       	asr	r19
     41c:	27 95       	ror	r18
     41e:	35 95       	asr	r19
     420:	27 95       	ror	r18
     422:	22 0f       	add	r18, r18
     424:	92 2f       	mov	r25, r18
     426:	99 0f       	add	r25, r25
     428:	99 0f       	add	r25, r25
     42a:	29 0f       	add	r18, r25
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	82 0f       	add	r24, r18
		time[5] = BinToDec(I2CMRread());
     430:	85 83       	std	Z+5, r24	; 0x05
		return TWDR;									// Читаем регистр данных
	}
	
	inline char I2CMRreadLast(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN);
     432:	84 e8       	ldi	r24, 0x84	; 132
     434:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1 << TWINT)));					//ожидание установки бита TWIN
     436:	06 b6       	in	r0, 0x36	; 54
     438:	07 fe       	sbrs	r0, 7
     43a:	fd cf       	rjmp	.-6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		return TWDR;									//читаем регистр данных
     43c:	23 b1       	in	r18, 0x03	; 3
	//	INLINE	Функции конвертации из десятичного числа в двоично-десятичное
	//==============================================================================
		
	inline char BinToDec(char c)					// Перевод двоично-десятичного числа в десятичное
	{
		unsigned char ch = ((c >> 4) * 10 + (0b00001111 & c));
     43e:	82 2f       	mov	r24, r18
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	95 95       	asr	r25
     444:	87 95       	ror	r24
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	95 95       	asr	r25
     44c:	87 95       	ror	r24
     44e:	95 95       	asr	r25
     450:	87 95       	ror	r24
     452:	2f 70       	andi	r18, 0x0F	; 15
     454:	88 0f       	add	r24, r24
     456:	98 2f       	mov	r25, r24
     458:	99 0f       	add	r25, r25
     45a:	99 0f       	add	r25, r25
     45c:	89 0f       	add	r24, r25
     45e:	82 0f       	add	r24, r18
		time[6] = BinToDec(I2CMRreadLast());	// Чтение данных NOACK								// 01011 = 0x58 - Data byte has been received;	NOT ACK has been returned
     460:	86 83       	std	Z+6, r24	; 0x06
		return TWDR;									//читаем регистр данных
	}
		
	inline void I2CMRstop(void)
	{
		TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);	// Transmit STOP condition
     462:	84 e9       	ldi	r24, 0x94	; 148
     464:	86 bf       	out	0x36, r24	; 54
     466:	08 95       	ret

00000468 <_Z41__static_initialization_and_destruction_0ii>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	09 f0       	breq	.+2      	; 0x47e <_Z41__static_initialization_and_destruction_0ii+0x16>
     47c:	bd c0       	rjmp	.+378    	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii+0x190>
     47e:	6f 3f       	cpi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	09 f0       	breq	.+2      	; 0x486 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     484:	b9 c0       	rjmp	.+370    	; 0x5f8 <_Z41__static_initialization_and_destruction_0ii+0x190>


// Переменные времени
char time[7] = {0, 8, 15, 4, 23, 5, 24};											// sec, min, hour, day, date, month, year
char timesetting[7];
float timeDec = (float)time[0] + (float)time[1] / 60.0 + (float)time[2] / 3600.0;	// Реальное время в десятичном виде
     486:	c8 e8       	ldi	r28, 0x88	; 136
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	18 81       	ld	r17, Y
     48c:	69 81       	ldd	r22, Y+1	; 0x01
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e7       	ldi	r20, 0x70	; 112
     49e:	52 e4       	ldi	r21, 0x42	; 66
     4a0:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     4a4:	6b 01       	movw	r12, r22
     4a6:	7c 01       	movw	r14, r24
     4a8:	61 2f       	mov	r22, r17
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     4b4:	a7 01       	movw	r20, r14
     4b6:	96 01       	movw	r18, r12
     4b8:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
     4bc:	6b 01       	movw	r12, r22
     4be:	7c 01       	movw	r14, r24
     4c0:	6a 81       	ldd	r22, Y+2	; 0x02
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	41 e6       	ldi	r20, 0x61	; 97
     4d2:	55 e4       	ldi	r21, 0x45	; 69
     4d4:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
     4e4:	60 93 f3 05 	sts	0x05F3, r22	; 0x8005f3 <timeDec>
     4e8:	70 93 f4 05 	sts	0x05F4, r23	; 0x8005f4 <timeDec+0x1>
     4ec:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <timeDec+0x2>
     4f0:	90 93 f6 05 	sts	0x05F6, r25	; 0x8005f6 <timeDec+0x3>
char timecomp = time[0];															// Секунда сравнения
     4f4:	10 93 f2 05 	sts	0x05F2, r17	; 0x8005f2 <timecomp>
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     4f8:	c0 e8       	ldi	r28, 0x80	; 128
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
     4fc:	68 81       	ld	r22, Y
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     508:	6b 01       	movw	r12, r22
     50a:	7c 01       	movw	r14, r24
	{22, 00},
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
     50c:	69 81       	ldd	r22, Y+1	; 0x01
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e7       	ldi	r20, 0x70	; 112
     51e:	52 e4       	ldi	r21, 0x42	; 66
     520:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	c7 01       	movw	r24, r14
     52a:	b6 01       	movw	r22, r12
     52c:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     530:	02 ee       	ldi	r16, 0xE2	; 226
     532:	15 e0       	ldi	r17, 0x05	; 5
     534:	f8 01       	movw	r30, r16
     536:	60 83       	st	Z, r22
     538:	71 83       	std	Z+1, r23	; 0x01
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	93 83       	std	Z+3, r25	; 0x03
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     53e:	6a 81       	ldd	r22, Y+2	; 0x02
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     54a:	6b 01       	movw	r12, r22
     54c:	7c 01       	movw	r14, r24
};

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
     54e:	6b 81       	ldd	r22, Y+3	; 0x03
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e7       	ldi	r20, 0x70	; 112
     560:	52 e4       	ldi	r21, 0x42	; 66
     562:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     566:	9b 01       	movw	r18, r22
     568:	ac 01       	movw	r20, r24
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     572:	f8 01       	movw	r30, r16
     574:	64 83       	std	Z+4, r22	; 0x04
     576:	75 83       	std	Z+5, r23	; 0x05
     578:	86 83       	std	Z+6, r24	; 0x06
     57a:	97 83       	std	Z+7, r25	; 0x07

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     57c:	6c 81       	ldd	r22, Y+4	; 0x04
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     588:	6b 01       	movw	r12, r22
     58a:	7c 01       	movw	r14, r24

float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
     58c:	6d 81       	ldd	r22, Y+5	; 0x05
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e7       	ldi	r20, 0x70	; 112
     59e:	52 e4       	ldi	r21, 0x42	; 66
     5a0:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	c7 01       	movw	r24, r14
     5aa:	b6 01       	movw	r22, r12
     5ac:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
};
     5b0:	f8 01       	movw	r30, r16
     5b2:	60 87       	std	Z+8, r22	; 0x08
     5b4:	71 87       	std	Z+9, r23	; 0x09
     5b6:	82 87       	std	Z+10, r24	; 0x0a
     5b8:	93 87       	std	Z+11, r25	; 0x0b
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     5ba:	6e 81       	ldd	r22, Y+6	; 0x06
};
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     5c6:	6b 01       	movw	r12, r22
     5c8:	7c 01       	movw	r14, r24
float timescheduleDec[4]=
{
	(float)timeschedule[0][0] + (float)timeschedule[0][1] / 60.0,
	(float)timeschedule[1][0] + (float)timeschedule[1][1] / 60.0,
	(float)timeschedule[2][0] + (float)timeschedule[2][1] / 60.0,
	(float)timeschedule[3][0] + (float)timeschedule[3][1] / 60.0,
     5ca:	6f 81       	ldd	r22, Y+7	; 0x07
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e7       	ldi	r20, 0x70	; 112
     5dc:	52 e4       	ldi	r21, 0x42	; 66
     5de:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     5e2:	9b 01       	movw	r18, r22
     5e4:	ac 01       	movw	r20, r24
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
};
     5ee:	f8 01       	movw	r30, r16
     5f0:	64 87       	std	Z+12, r22	; 0x0c
     5f2:	75 87       	std	Z+13, r23	; 0x0d
     5f4:	86 87       	std	Z+14, r24	; 0x0e
     5f6:	97 87       	std	Z+15, r25	; 0x0f
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	08 95       	ret

0000060a <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
     60a:	1f 92       	push	r1
     60c:	0f 92       	push	r0
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	0f 92       	push	r0
     612:	11 24       	eor	r1, r1
     614:	2f 93       	push	r18
     616:	3f 93       	push	r19
     618:	4f 93       	push	r20
     61a:	5f 93       	push	r21
     61c:	6f 93       	push	r22
     61e:	7f 93       	push	r23
     620:	8f 93       	push	r24
     622:	9f 93       	push	r25
     624:	af 93       	push	r26
     626:	bf 93       	push	r27
     628:	ef 93       	push	r30
     62a:	ff 93       	push	r31
	cli();
     62c:	f8 94       	cli
	time[0]++;						// Инкремент секунды
     62e:	e8 e8       	ldi	r30, 0x88	; 136
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 83       	st	Z, r24
	
	if (time[0] >= 60)
     638:	8c 33       	cpi	r24, 0x3C	; 60
     63a:	20 f0       	brcs	.+8      	; 0x644 <__vector_7+0x3a>
	{
		time[1]++;					// Инкремент минуты
     63c:	81 81       	ldd	r24, Z+1	; 0x01
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	81 83       	std	Z+1, r24	; 0x01
		time[0] = 0;
     642:	10 82       	st	Z, r1
	}
	
	if (time[1] >= 60)
     644:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     648:	8c 33       	cpi	r24, 0x3C	; 60
     64a:	30 f0       	brcs	.+12     	; 0x658 <__vector_7+0x4e>
	{
		time[2]++;
     64c:	e8 e8       	ldi	r30, 0x88	; 136
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	82 81       	ldd	r24, Z+2	; 0x02
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	82 83       	std	Z+2, r24	; 0x02
		time[1] = 0;				// Инкремент часа
     656:	11 82       	std	Z+1, r1	; 0x01
	}
	
	if (time[2] >= 24)				// Сутки
     658:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     65c:	88 31       	cpi	r24, 0x18	; 24
     65e:	28 f0       	brcs	.+10     	; 0x66a <__vector_7+0x60>
	{
		time[0] = 0;
     660:	e8 e8       	ldi	r30, 0x88	; 136
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	10 82       	st	Z, r1
		time[1] = 0;
     666:	11 82       	std	Z+1, r1	; 0x01
		time[2] = 0;
     668:	12 82       	std	Z+2, r1	; 0x02
	}	
	
	
	// Синхронизация с DS1307 в полночь
	if (time[0] == 0 && time[1] == 0 && time[2] == 0 && flagsync == 1)
     66a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     66e:	81 11       	cpse	r24, r1
     670:	12 c0       	rjmp	.+36     	; 0x696 <__vector_7+0x8c>
     672:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     676:	81 11       	cpse	r24, r1
     678:	0e c0       	rjmp	.+28     	; 0x696 <__vector_7+0x8c>
     67a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     67e:	81 11       	cpse	r24, r1
     680:	0a c0       	rjmp	.+20     	; 0x696 <__vector_7+0x8c>
     682:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <flagsync>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	31 f4       	brne	.+12     	; 0x696 <__vector_7+0x8c>
	{
		DS1307::readTime(time);
     68a:	88 e8       	ldi	r24, 0x88	; 136
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN6DS13078readTimeEPc>
		flagsync = 0;
     692:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <flagsync>
	}
	
	if (time[0] == 0 && time[1] == 1 && time[2] == 0)
     696:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     69a:	81 11       	cpse	r24, r1
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <__vector_7+0xaa>
     69e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <time+0x1>
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	39 f4       	brne	.+14     	; 0x6b4 <__vector_7+0xaa>
     6a6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <time+0x2>
     6aa:	81 11       	cpse	r24, r1
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <__vector_7+0xaa>
	{
		flagsync = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <flagsync>
	}
	
	
	sei();
     6b4:	78 94       	sei
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti

000006d8 <__vector_1>:

ISR(INT0_vect)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
	cli();
     6ec:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	26 e6       	ldi	r18, 0x66	; 102
     6f0:	86 ee       	ldi	r24, 0xE6	; 230
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	80 40       	sbci	r24, 0x00	; 0
     6f8:	90 40       	sbci	r25, 0x00	; 0
     6fa:	e1 f7       	brne	.-8      	; 0x6f4 <__vector_1+0x1c>
	
	_delay_ms(20);
	if (PIND & (1 << PIND2))		// Если высокий уровень
     6fc:	82 99       	sbic	0x10, 2	; 16
     6fe:	30 c0       	rjmp	.+96     	; 0x760 <__vector_1+0x88>
	{
		return;
	}
		
	if (flagsetting == 0)
     700:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     704:	81 11       	cpse	r24, r1
     706:	09 c0       	rjmp	.+18     	; 0x71a <__vector_1+0x42>
	{
		timesetting[0]++;
     708:	e7 ef       	ldi	r30, 0xF7	; 247
     70a:	f5 e0       	ldi	r31, 0x05	; 5
     70c:	90 81       	ld	r25, Z
     70e:	9f 5f       	subi	r25, 0xFF	; 255
     710:	90 83       	st	Z, r25
		if (timesetting[0] >= 60)
     712:	9c 33       	cpi	r25, 0x3C	; 60
     714:	10 f0       	brcs	.+4      	; 0x71a <__vector_1+0x42>
		{
			timesetting[0] = 0;
     716:	10 92 f7 05 	sts	0x05F7, r1	; 0x8005f7 <timesetting>
		}
	}
	
	if (flagsetting == 1)
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	49 f4       	brne	.+18     	; 0x730 <__vector_1+0x58>
	{
		timesetting[1]++;
     71e:	e7 ef       	ldi	r30, 0xF7	; 247
     720:	f5 e0       	ldi	r31, 0x05	; 5
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	9f 5f       	subi	r25, 0xFF	; 255
     726:	91 83       	std	Z+1, r25	; 0x01
		if (timesetting[1] >= 60)
     728:	9c 33       	cpi	r25, 0x3C	; 60
     72a:	10 f0       	brcs	.+4      	; 0x730 <__vector_1+0x58>
		{
			timesetting[1] = 0;
     72c:	10 92 f8 05 	sts	0x05F8, r1	; 0x8005f8 <timesetting+0x1>
		}
	}
	
	if (flagsetting == 2)
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	49 f4       	brne	.+18     	; 0x746 <__vector_1+0x6e>
	{
		timesetting[2]++;
     734:	e7 ef       	ldi	r30, 0xF7	; 247
     736:	f5 e0       	ldi	r31, 0x05	; 5
     738:	92 81       	ldd	r25, Z+2	; 0x02
     73a:	9f 5f       	subi	r25, 0xFF	; 255
     73c:	92 83       	std	Z+2, r25	; 0x02
		if (timesetting[2] >= 24)
     73e:	98 31       	cpi	r25, 0x18	; 24
     740:	10 f0       	brcs	.+4      	; 0x746 <__vector_1+0x6e>
		{
			timesetting[2] = 0;
     742:	10 92 f9 05 	sts	0x05F9, r1	; 0x8005f9 <timesetting+0x2>
		}
	}
	
	if (flagsetting == 3)
     746:	83 30       	cpi	r24, 0x03	; 3
     748:	59 f0       	breq	.+22     	; 0x760 <__vector_1+0x88>
	{
		return;
	}
	
	PORTA = 1;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8b bb       	out	0x1b, r24	; 27
     74e:	26 e6       	ldi	r18, 0x66	; 102
     750:	86 ee       	ldi	r24, 0xE6	; 230
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	21 50       	subi	r18, 0x01	; 1
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <__vector_1+0x7c>
	_delay_ms(20);
	PORTA = 0;
     75c:	1b ba       	out	0x1b, r1	; 27
	
	sei();
     75e:	78 94       	sei
}
     760:	ff 91       	pop	r31
     762:	ef 91       	pop	r30
     764:	9f 91       	pop	r25
     766:	8f 91       	pop	r24
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_2>:

ISR(INT1_vect)
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	8f 93       	push	r24
     782:	9f 93       	push	r25
     784:	ef 93       	push	r30
     786:	ff 93       	push	r31
	cli();
     788:	f8 94       	cli
     78a:	26 e6       	ldi	r18, 0x66	; 102
     78c:	86 ee       	ldi	r24, 0xE6	; 230
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	21 50       	subi	r18, 0x01	; 1
     792:	80 40       	sbci	r24, 0x00	; 0
     794:	90 40       	sbci	r25, 0x00	; 0
     796:	e1 f7       	brne	.-8      	; 0x790 <__vector_2+0x1c>
	
	_delay_ms(20);
	if (PIND & (1 << PIND3))		// Если высокий уровень
     798:	83 99       	sbic	0x10, 3	; 16
     79a:	33 c0       	rjmp	.+102    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		return;
	}
	
	
	if (flagsetting == 0)
     79c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     7a0:	81 11       	cpse	r24, r1
     7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <__vector_2+0x44>
	{
		timesetting[0]--;
     7a4:	e7 ef       	ldi	r30, 0xF7	; 247
     7a6:	f5 e0       	ldi	r31, 0x05	; 5
     7a8:	90 81       	ld	r25, Z
     7aa:	91 50       	subi	r25, 0x01	; 1
     7ac:	90 83       	st	Z, r25
		
		if (timesetting[0] >= 60)			// потому что 255
     7ae:	9c 33       	cpi	r25, 0x3C	; 60
     7b0:	18 f0       	brcs	.+6      	; 0x7b8 <__vector_2+0x44>
		{
			timesetting[0] = 59;
     7b2:	9b e3       	ldi	r25, 0x3B	; 59
     7b4:	90 93 f7 05 	sts	0x05F7, r25	; 0x8005f7 <timesetting>
		}
	}
	
	if (flagsetting == 1)
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	51 f4       	brne	.+20     	; 0x7d0 <__vector_2+0x5c>
	{
		timesetting[1]--;
     7bc:	e7 ef       	ldi	r30, 0xF7	; 247
     7be:	f5 e0       	ldi	r31, 0x05	; 5
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	91 50       	subi	r25, 0x01	; 1
     7c4:	91 83       	std	Z+1, r25	; 0x01
		
		if (timesetting[1] >= 60)
     7c6:	9c 33       	cpi	r25, 0x3C	; 60
     7c8:	18 f0       	brcs	.+6      	; 0x7d0 <__vector_2+0x5c>
		{
			timesetting[1] = 59;
     7ca:	9b e3       	ldi	r25, 0x3B	; 59
     7cc:	90 93 f8 05 	sts	0x05F8, r25	; 0x8005f8 <timesetting+0x1>
		}
	}
	
	if (flagsetting == 2)
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	51 f4       	brne	.+20     	; 0x7e8 <__vector_2+0x74>
	{
		timesetting[2]--;
     7d4:	e7 ef       	ldi	r30, 0xF7	; 247
     7d6:	f5 e0       	ldi	r31, 0x05	; 5
     7d8:	92 81       	ldd	r25, Z+2	; 0x02
     7da:	91 50       	subi	r25, 0x01	; 1
     7dc:	92 83       	std	Z+2, r25	; 0x02
		
		if (timesetting[2] >= 24)
     7de:	98 31       	cpi	r25, 0x18	; 24
     7e0:	18 f0       	brcs	.+6      	; 0x7e8 <__vector_2+0x74>
		{
			timesetting[2] = 23;
     7e2:	97 e1       	ldi	r25, 0x17	; 23
     7e4:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timesetting+0x2>
		}
	}
	
	if (flagsetting == 3)
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	59 f0       	breq	.+22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		return;
	}
	
	
	
	PORTA = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	8b bb       	out	0x1b, r24	; 27
     7f0:	26 e6       	ldi	r18, 0x66	; 102
     7f2:	86 ee       	ldi	r24, 0xE6	; 230
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <__vector_2+0x82>
	_delay_ms(20);
	PORTA = 0;
     7fe:	1b ba       	out	0x1b, r1	; 27
	
	sei();
     800:	78 94       	sei
}
     802:	ff 91       	pop	r31
     804:	ef 91       	pop	r30
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <__vector_3>:

ISR(INT2_vect)
{	
     816:	1f 92       	push	r1
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	0f 92       	push	r0
     81e:	11 24       	eor	r1, r1
     820:	2f 93       	push	r18
     822:	3f 93       	push	r19
     824:	4f 93       	push	r20
     826:	5f 93       	push	r21
     828:	6f 93       	push	r22
     82a:	7f 93       	push	r23
     82c:	8f 93       	push	r24
     82e:	9f 93       	push	r25
     830:	af 93       	push	r26
     832:	bf 93       	push	r27
     834:	ef 93       	push	r30
     836:	ff 93       	push	r31
	cli();
     838:	f8 94       	cli
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	8f e3       	ldi	r24, 0x3F	; 63
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <__vector_3+0x2a>
     848:	00 c0       	rjmp	.+0      	; 0x84a <__vector_3+0x34>
     84a:	00 00       	nop
	
	_delay_ms(50);
	if (PINB & (1 << PINB2))		// Если высокий уровень
     84c:	b2 99       	sbic	0x16, 2	; 22
     84e:	3c c0       	rjmp	.+120    	; 0x8c8 <__stack+0x69>
	{
		return;
	}
		
	flagsetting++;
     850:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <flagsetting>
	if (flagsetting >= 4)
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	10 f0       	brcs	.+4      	; 0x862 <__stack+0x3>
	{
		flagsetting = 0;
     85e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <flagsetting>
	}
	
	
	if (flagsetting == 0)					// При начале настройки загрузить текущее время в буффер
     862:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <flagsetting>
     866:	31 11       	cpse	r19, r1
     868:	0f c0       	rjmp	.+30     	; 0x888 <__stack+0x29>
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i = 0; i < 7; i++)
     86e:	87 30       	cpi	r24, 0x07	; 7
     870:	91 05       	cpc	r25, r1
     872:	54 f4       	brge	.+20     	; 0x888 <__stack+0x29>
		{
			timesetting[i] = time[i];
     874:	fc 01       	movw	r30, r24
     876:	e8 57       	subi	r30, 0x78	; 120
     878:	ff 4f       	sbci	r31, 0xFF	; 255
     87a:	20 81       	ld	r18, Z
     87c:	fc 01       	movw	r30, r24
     87e:	e9 50       	subi	r30, 0x09	; 9
     880:	fa 4f       	sbci	r31, 0xFA	; 250
     882:	20 83       	st	Z, r18
	}
	
	
	if (flagsetting == 0)					// При начале настройки загрузить текущее время в буффер
	{
		for(int i = 0; i < 7; i++)
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	f3 cf       	rjmp	.-26     	; 0x86e <__stack+0xf>
			timesetting[i] = time[i];
		}
	}
	
	
	if (flagsetting == 3)					// При окончании настройки выгрузить время из буффера
     888:	33 30       	cpi	r19, 0x03	; 3
     88a:	99 f4       	brne	.+38     	; 0x8b2 <__stack+0x53>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(int i = 0; i < 7; i++)
     890:	87 30       	cpi	r24, 0x07	; 7
     892:	91 05       	cpc	r25, r1
     894:	54 f4       	brge	.+20     	; 0x8aa <__stack+0x4b>
		{
			time[i] = timesetting[i];
     896:	fc 01       	movw	r30, r24
     898:	e9 50       	subi	r30, 0x09	; 9
     89a:	fa 4f       	sbci	r31, 0xFA	; 250
     89c:	20 81       	ld	r18, Z
     89e:	fc 01       	movw	r30, r24
     8a0:	e8 57       	subi	r30, 0x78	; 120
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	20 83       	st	Z, r18
	}
	
	
	if (flagsetting == 3)					// При окончании настройки выгрузить время из буффера
	{
		for(int i = 0; i < 7; i++)
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	f3 cf       	rjmp	.-26     	; 0x890 <__stack+0x31>
		{
			time[i] = timesetting[i];
		}
		DS1307::writeTime(time);
     8aa:	88 e8       	ldi	r24, 0x88	; 136
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6DS13079writeTimeEPc>
	}

	
	PORTA = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	8b bb       	out	0x1b, r24	; 27
     8b6:	26 e6       	ldi	r18, 0x66	; 102
     8b8:	86 ee       	ldi	r24, 0xE6	; 230
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	80 40       	sbci	r24, 0x00	; 0
     8c0:	90 40       	sbci	r25, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <__stack+0x5d>
	_delay_ms(20);
	PORTA = 0;
     8c4:	1b ba       	out	0x1b, r1	; 27
	
	sei();
     8c6:	78 94       	sei
}
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <_Z5setupv>:


void setup(void)
{
	sei();
     8ea:	78 94       	sei
	
	////////////// Внешние прерывания //////////////
	GICR |= (1 << INT1)|(1 << INT0)|(1 << INT2);						// General Interrupt Control Register - Установка битов INT1, INT0 или INT2 разрешает прерывания при возникновении события на соответствующем выводе микроконтроллера AVR, а сброс — запрещает.
     8ec:	8b b7       	in	r24, 0x3b	; 59
     8ee:	80 6e       	ori	r24, 0xE0	; 224
     8f0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11)|(0 << ISC10)|(1 << ISC01)|(0 << ISC00);		// 10	- Перывание по спадающему фронту INT0, INT1
     8f2:	85 b7       	in	r24, 0x35	; 53
     8f4:	8a 60       	ori	r24, 0x0A	; 10
     8f6:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (0 << ISC2);												// 0	- Перывание по спадающему фронту INT2
     8f8:	84 b7       	in	r24, 0x34	; 52
     8fa:	84 bf       	out	0x34, r24	; 52
		
	DDRA = 0xff;
     8fc:	8f ef       	ldi	r24, 0xFF	; 255
     8fe:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
     900:	1b ba       	out	0x1b, r1	; 27
	
	
	//////////// Таймер 1 (16 бит) Часы ////////////
	OCR1A   = 14398;	// Запись значения прерывания CTC производится до инициализации таймера
     902:	8e e3       	ldi	r24, 0x3E	; 62
     904:	98 e3       	ldi	r25, 0x38	; 56
     906:	9b bd       	out	0x2b, r25	; 43
     908:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(0 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);	// COM - порты, FOC - ?, WGM - режим CTC, CS - прескелер
     90a:	8f b5       	in	r24, 0x2f	; 47
     90c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (0 <<  ICNC1)|(0 <<  ICES1)|(0 <<  WGM13)|(1 <<  WGM12)|(1 <<  CS12)|(0 <<  CS11)|(1 <<  CS10);				// IC - настройки пина ICP1 (PD6)
     90e:	8e b5       	in	r24, 0x2e	; 46
     910:	8d 60       	ori	r24, 0x0D	; 13
     912:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= (0 << TICIE1)|(1 << OCIE1A)|(0 << OCIE1B)|(0 << TOIE1);														// OCIE1A - Прерывание по совпадению разрешено
     914:	89 b7       	in	r24, 0x39	; 57
     916:	80 61       	ori	r24, 0x10	; 16
     918:	89 bf       	out	0x39, r24	; 57
	

	//////////// Таймер 0 (8 бит) PWM ////////////
	OCR0  |= 0;			// Скважность - Значение сравнения f = fcpu/(N*256) = 7372800/256 = 28800 || = 14745600/256 = 57600 | 248 -> 97.1% | 249 -> 97.5% | 250 -> 97.9% | 251 -> 98.3% | 252 -> 98.7%  | *по расчету надо 97,5 - 98,6%
     91a:	8c b7       	in	r24, 0x3c	; 60
     91c:	8c bf       	out	0x3c, r24	; 60
	TCCR0 |= (0 << FOC0)|(1  << WGM01)|(1 << WGM00)|(1 << COM01)|(0 << COM00)|(0 << CS02)|(0 << CS01)|(1 << CS00);	// WGM - fast PWM, COM - clear on compare, CS - прескелер, FOC - ?
     91e:	83 b7       	in	r24, 0x33	; 51
     920:	89 66       	ori	r24, 0x69	; 105
     922:	83 bf       	out	0x33, r24	; 51
		
	DDRB |= 0b00001000;		// Вывод ШИМ - PB3(OC0)
     924:	87 b3       	in	r24, 0x17	; 23
     926:	88 60       	ori	r24, 0x08	; 8
     928:	87 bb       	out	0x17, r24	; 23
	
	ST7789::init();
     92a:	0e 94 8a 09 	call	0x1314	; 0x1314 <_ZN6ST77894initEv>
     92e:	08 95       	ret

00000930 <_Z10printClockPc>:
}

void printClock(char time[])
{
     930:	cf 92       	push	r12
     932:	ef 92       	push	r14
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
	
	
	if (flagsetting == 2)
     93e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	51 f5       	brne	.+84     	; 0x99a <_Z10printClockPc+0x6a>
	{
		if (time[2] < 10)
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	8a 30       	cpi	r24, 0x0A	; 10
     94a:	80 f4       	brcc	.+32     	; 0x96c <_Z10printClockPc+0x3c>
		{
			ST7789::printString("0", &xpos, &ypos, red, 0, 0, 5);
     94c:	0f 2e       	mov	r0, r31
     94e:	f5 e0       	ldi	r31, 0x05	; 5
     950:	cf 2e       	mov	r12, r31
     952:	f0 2d       	mov	r31, r0
     954:	e1 2c       	mov	r14, r1
     956:	00 e0       	ldi	r16, 0x00	; 0
     958:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     95c:	47 e0       	ldi	r20, 0x07	; 7
     95e:	56 e0       	ldi	r21, 0x06	; 6
     960:	68 e0       	ldi	r22, 0x08	; 8
     962:	76 e0       	ldi	r23, 0x06	; 6
     964:	84 e9       	ldi	r24, 0x94	; 148
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[2], buffer, 10), &xpos, &ypos, red, 0, 0, 5);
     96c:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     970:	8a 81       	ldd	r24, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     972:	4a e0       	ldi	r20, 0x0A	; 10
     974:	6e ef       	ldi	r22, 0xFE	; 254
     976:	75 e0       	ldi	r23, 0x05	; 5
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     97e:	0f 2e       	mov	r0, r31
     980:	f5 e0       	ldi	r31, 0x05	; 5
     982:	cf 2e       	mov	r12, r31
     984:	f0 2d       	mov	r31, r0
     986:	e1 2c       	mov	r14, r1
     988:	00 e0       	ldi	r16, 0x00	; 0
     98a:	21 2f       	mov	r18, r17
     98c:	47 e0       	ldi	r20, 0x07	; 7
     98e:	56 e0       	ldi	r21, 0x06	; 6
     990:	68 e0       	ldi	r22, 0x08	; 8
     992:	76 e0       	ldi	r23, 0x06	; 6
     994:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
     998:	2d c0       	rjmp	.+90     	; 0x9f4 <_Z10printClockPc+0xc4>
	}
	else
	{
		if (time[2] < 10)
     99a:	8a 81       	ldd	r24, Y+2	; 0x02
     99c:	8a 30       	cpi	r24, 0x0A	; 10
     99e:	90 f4       	brcc	.+36     	; 0x9c4 <_Z10printClockPc+0x94>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f5 e0       	ldi	r31, 0x05	; 5
     9a4:	cf 2e       	mov	r12, r31
     9a6:	f0 2d       	mov	r31, r0
     9a8:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     9ac:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     9b0:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     9b4:	47 e0       	ldi	r20, 0x07	; 7
     9b6:	56 e0       	ldi	r21, 0x06	; 6
     9b8:	68 e0       	ldi	r22, 0x08	; 8
     9ba:	76 e0       	ldi	r23, 0x06	; 6
     9bc:	84 e9       	ldi	r24, 0x94	; 148
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[2], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     9c4:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     9c8:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     9cc:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     9d0:	8a 81       	ldd	r24, Y+2	; 0x02
     9d2:	4a e0       	ldi	r20, 0x0A	; 10
     9d4:	6e ef       	ldi	r22, 0xFE	; 254
     9d6:	75 e0       	ldi	r23, 0x05	; 5
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     9de:	0f 2e       	mov	r0, r31
     9e0:	f5 e0       	ldi	r31, 0x05	; 5
     9e2:	cf 2e       	mov	r12, r31
     9e4:	f0 2d       	mov	r31, r0
     9e6:	21 2f       	mov	r18, r17
     9e8:	47 e0       	ldi	r20, 0x07	; 7
     9ea:	56 e0       	ldi	r21, 0x06	; 6
     9ec:	68 e0       	ldi	r22, 0x08	; 8
     9ee:	76 e0       	ldi	r23, 0x06	; 6
     9f0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	
	
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f5 e0       	ldi	r31, 0x05	; 5
     9f8:	cf 2e       	mov	r12, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     a00:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     a04:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     a08:	47 e0       	ldi	r20, 0x07	; 7
     a0a:	56 e0       	ldi	r21, 0x06	; 6
     a0c:	68 e0       	ldi	r22, 0x08	; 8
     a0e:	76 e0       	ldi	r23, 0x06	; 6
     a10:	86 e9       	ldi	r24, 0x96	; 150
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	
	if (flagsetting == 1)
     a18:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	31 f5       	brne	.+76     	; 0xa6c <_Z10printClockPc+0x13c>
	{
		if (time[1] < 10)
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	8a 30       	cpi	r24, 0x0A	; 10
     a24:	60 f4       	brcc	.+24     	; 0xa3e <_Z10printClockPc+0x10e>
		{
			ST7789::printString("0", &xpos, &ypos, red, 0, 0, 5);
     a26:	e1 2c       	mov	r14, r1
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     a2e:	47 e0       	ldi	r20, 0x07	; 7
     a30:	56 e0       	ldi	r21, 0x06	; 6
     a32:	68 e0       	ldi	r22, 0x08	; 8
     a34:	76 e0       	ldi	r23, 0x06	; 6
     a36:	84 e9       	ldi	r24, 0x94	; 148
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[1], buffer, 10), &xpos, &ypos, red, 0, 0, 5);
     a3e:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	4a e0       	ldi	r20, 0x0A	; 10
     a46:	6e ef       	ldi	r22, 0xFE	; 254
     a48:	75 e0       	ldi	r23, 0x05	; 5
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     a50:	0f 2e       	mov	r0, r31
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	cf 2e       	mov	r12, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	e1 2c       	mov	r14, r1
     a5a:	00 e0       	ldi	r16, 0x00	; 0
     a5c:	21 2f       	mov	r18, r17
     a5e:	47 e0       	ldi	r20, 0x07	; 7
     a60:	56 e0       	ldi	r21, 0x06	; 6
     a62:	68 e0       	ldi	r22, 0x08	; 8
     a64:	76 e0       	ldi	r23, 0x06	; 6
     a66:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
     a6a:	2d c0       	rjmp	.+90     	; 0xac6 <_Z10printClockPc+0x196>
	}
	else
	{
		if (time[1] < 10)
     a6c:	89 81       	ldd	r24, Y+1	; 0x01
     a6e:	8a 30       	cpi	r24, 0x0A	; 10
     a70:	90 f4       	brcc	.+36     	; 0xa96 <_Z10printClockPc+0x166>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     a72:	0f 2e       	mov	r0, r31
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	cf 2e       	mov	r12, r31
     a78:	f0 2d       	mov	r31, r0
     a7a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     a7e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     a82:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     a86:	47 e0       	ldi	r20, 0x07	; 7
     a88:	56 e0       	ldi	r21, 0x06	; 6
     a8a:	68 e0       	ldi	r22, 0x08	; 8
     a8c:	76 e0       	ldi	r23, 0x06	; 6
     a8e:	84 e9       	ldi	r24, 0x94	; 148
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[1], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     a96:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     a9a:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     a9e:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	4a e0       	ldi	r20, 0x0A	; 10
     aa6:	6e ef       	ldi	r22, 0xFE	; 254
     aa8:	75 e0       	ldi	r23, 0x05	; 5
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     ab0:	0f 2e       	mov	r0, r31
     ab2:	f5 e0       	ldi	r31, 0x05	; 5
     ab4:	cf 2e       	mov	r12, r31
     ab6:	f0 2d       	mov	r31, r0
     ab8:	21 2f       	mov	r18, r17
     aba:	47 e0       	ldi	r20, 0x07	; 7
     abc:	56 e0       	ldi	r21, 0x06	; 6
     abe:	68 e0       	ldi	r22, 0x08	; 8
     ac0:	76 e0       	ldi	r23, 0x06	; 6
     ac2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		
	}
	
	ST7789::printString(":", &xpos, &ypos, red, green, blue, 5);
     ac6:	0f 2e       	mov	r0, r31
     ac8:	f5 e0       	ldi	r31, 0x05	; 5
     aca:	cf 2e       	mov	r12, r31
     acc:	f0 2d       	mov	r31, r0
     ace:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     ad2:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     ad6:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     ada:	47 e0       	ldi	r20, 0x07	; 7
     adc:	56 e0       	ldi	r21, 0x06	; 6
     ade:	68 e0       	ldi	r22, 0x08	; 8
     ae0:	76 e0       	ldi	r23, 0x06	; 6
     ae2:	86 e9       	ldi	r24, 0x96	; 150
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
	
	if (flagsetting == 0)
     aea:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     aee:	81 11       	cpse	r24, r1
     af0:	26 c0       	rjmp	.+76     	; 0xb3e <_Z10printClockPc+0x20e>
	{
		if (time[0] < 10)
     af2:	88 81       	ld	r24, Y
     af4:	8a 30       	cpi	r24, 0x0A	; 10
     af6:	60 f4       	brcc	.+24     	; 0xb10 <_Z10printClockPc+0x1e0>
		{
			ST7789::printString("0", &xpos, &ypos, red, 0, 0, 5);
     af8:	e1 2c       	mov	r14, r1
     afa:	00 e0       	ldi	r16, 0x00	; 0
     afc:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     b00:	47 e0       	ldi	r20, 0x07	; 7
     b02:	56 e0       	ldi	r21, 0x06	; 6
     b04:	68 e0       	ldi	r22, 0x08	; 8
     b06:	76 e0       	ldi	r23, 0x06	; 6
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[0], buffer, 10), &xpos, &ypos, red, 0, 0, 5);
     b10:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     b14:	88 81       	ld	r24, Y
     b16:	4a e0       	ldi	r20, 0x0A	; 10
     b18:	6e ef       	ldi	r22, 0xFE	; 254
     b1a:	75 e0       	ldi	r23, 0x05	; 5
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     b22:	0f 2e       	mov	r0, r31
     b24:	f5 e0       	ldi	r31, 0x05	; 5
     b26:	cf 2e       	mov	r12, r31
     b28:	f0 2d       	mov	r31, r0
     b2a:	e1 2c       	mov	r14, r1
     b2c:	00 e0       	ldi	r16, 0x00	; 0
     b2e:	21 2f       	mov	r18, r17
     b30:	47 e0       	ldi	r20, 0x07	; 7
     b32:	56 e0       	ldi	r21, 0x06	; 6
     b34:	68 e0       	ldi	r22, 0x08	; 8
     b36:	76 e0       	ldi	r23, 0x06	; 6
     b38:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
     b3c:	2d c0       	rjmp	.+90     	; 0xb98 <_Z10printClockPc+0x268>
	}
	else
	{
		if (time[0] < 10)
     b3e:	88 81       	ld	r24, Y
     b40:	8a 30       	cpi	r24, 0x0A	; 10
     b42:	90 f4       	brcc	.+36     	; 0xb68 <_Z10printClockPc+0x238>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 5);
     b44:	0f 2e       	mov	r0, r31
     b46:	f5 e0       	ldi	r31, 0x05	; 5
     b48:	cf 2e       	mov	r12, r31
     b4a:	f0 2d       	mov	r31, r0
     b4c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     b50:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     b54:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     b58:	47 e0       	ldi	r20, 0x07	; 7
     b5a:	56 e0       	ldi	r21, 0x06	; 6
     b5c:	68 e0       	ldi	r22, 0x08	; 8
     b5e:	76 e0       	ldi	r23, 0x06	; 6
     b60:	84 e9       	ldi	r24, 0x94	; 148
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(time[0], buffer, 10), &xpos, &ypos, red, green, blue, 5);
     b68:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     b6c:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     b70:	10 91 91 00 	lds	r17, 0x0091	; 0x800091 <red>
     b74:	88 81       	ld	r24, Y
     b76:	4a e0       	ldi	r20, 0x0A	; 10
     b78:	6e ef       	ldi	r22, 0xFE	; 254
     b7a:	75 e0       	ldi	r23, 0x05	; 5
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     b82:	0f 2e       	mov	r0, r31
     b84:	f5 e0       	ldi	r31, 0x05	; 5
     b86:	cf 2e       	mov	r12, r31
     b88:	f0 2d       	mov	r31, r0
     b8a:	21 2f       	mov	r18, r17
     b8c:	47 e0       	ldi	r20, 0x07	; 7
     b8e:	56 e0       	ldi	r21, 0x06	; 6
     b90:	68 e0       	ldi	r22, 0x08	; 8
     b92:	76 e0       	ldi	r23, 0x06	; 6
     b94:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
	}
	
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ef 90       	pop	r14
     ba2:	cf 90       	pop	r12
     ba4:	08 95       	ret

00000ba6 <_Z13printSchedulev>:



void printSchedule(void)
{
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	for(char i = 0; i < 4; i++)
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	14 30       	cpi	r17, 0x04	; 4
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <_Z13printSchedulev+0x1a>
     bbe:	a5 c0       	rjmp	.+330    	; 0xd0a <_Z13printSchedulev+0x164>
	{
		// Первое число
		if (timeschedule[i][0] < 10)
     bc0:	c1 2f       	mov	r28, r17
     bc2:	d0 e0       	ldi	r29, 0x00	; 0
     bc4:	fe 01       	movw	r30, r28
     bc6:	ee 0f       	add	r30, r30
     bc8:	ff 1f       	adc	r31, r31
     bca:	e0 58       	subi	r30, 0x80	; 128
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	80 81       	ld	r24, Z
     bd0:	8a 30       	cpi	r24, 0x0A	; 10
     bd2:	90 f4       	brcc	.+36     	; 0xbf8 <_Z13printSchedulev+0x52>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     bd4:	0f 2e       	mov	r0, r31
     bd6:	f3 e0       	ldi	r31, 0x03	; 3
     bd8:	cf 2e       	mov	r12, r31
     bda:	f0 2d       	mov	r31, r0
     bdc:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     be0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     be4:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     be8:	47 e0       	ldi	r20, 0x07	; 7
     bea:	56 e0       	ldi	r21, 0x06	; 6
     bec:	68 e0       	ldi	r22, 0x08	; 8
     bee:	76 e0       	ldi	r23, 0x06	; 6
     bf0:	84 e9       	ldi	r24, 0x94	; 148
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][0], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     bf8:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     bfc:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     c00:	f0 90 91 00 	lds	r15, 0x0091	; 0x800091 <red>
     c04:	ce 01       	movw	r24, r28
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	9c 01       	movw	r18, r24
     c0c:	20 58       	subi	r18, 0x80	; 128
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	59 01       	movw	r10, r18
     c12:	f9 01       	movw	r30, r18
     c14:	80 81       	ld	r24, Z
     c16:	4a e0       	ldi	r20, 0x0A	; 10
     c18:	6e ef       	ldi	r22, 0xFE	; 254
     c1a:	75 e0       	ldi	r23, 0x05	; 5
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     c22:	0f 2e       	mov	r0, r31
     c24:	f3 e0       	ldi	r31, 0x03	; 3
     c26:	cf 2e       	mov	r12, r31
     c28:	f0 2d       	mov	r31, r0
     c2a:	2f 2d       	mov	r18, r15
     c2c:	47 e0       	ldi	r20, 0x07	; 7
     c2e:	56 e0       	ldi	r21, 0x06	; 6
     c30:	68 e0       	ldi	r22, 0x08	; 8
     c32:	76 e0       	ldi	r23, 0x06	; 6
     c34:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(":", &xpos, &ypos, red, green, blue, 3);
     c38:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     c3c:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     c40:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     c44:	47 e0       	ldi	r20, 0x07	; 7
     c46:	56 e0       	ldi	r21, 0x06	; 6
     c48:	68 e0       	ldi	r22, 0x08	; 8
     c4a:	76 e0       	ldi	r23, 0x06	; 6
     c4c:	86 e9       	ldi	r24, 0x96	; 150
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		
		// Второе число
		if (timeschedule[i][1] < 10)
     c54:	f5 01       	movw	r30, r10
     c56:	81 81       	ldd	r24, Z+1	; 0x01
     c58:	8a 30       	cpi	r24, 0x0A	; 10
     c5a:	70 f4       	brcc	.+28     	; 0xc78 <_Z13printSchedulev+0xd2>
		{
			ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
     c5c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     c60:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     c64:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     c68:	47 e0       	ldi	r20, 0x07	; 7
     c6a:	56 e0       	ldi	r21, 0x06	; 6
     c6c:	68 e0       	ldi	r22, 0x08	; 8
     c6e:	76 e0       	ldi	r23, 0x06	; 6
     c70:	84 e9       	ldi	r24, 0x94	; 148
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		}
		ST7789::printString(itoa(timeschedule[i][1], buffer, 10), &xpos, &ypos, red, green, blue, 3);
     c78:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     c7c:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     c80:	b0 90 91 00 	lds	r11, 0x0091	; 0x800091 <red>
     c84:	fe 01       	movw	r30, r28
     c86:	ee 0f       	add	r30, r30
     c88:	ff 1f       	adc	r31, r31
     c8a:	e0 58       	subi	r30, 0x80	; 128
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	81 81       	ldd	r24, Z+1	; 0x01
     c90:	4a e0       	ldi	r20, 0x0A	; 10
     c92:	6e ef       	ldi	r22, 0xFE	; 254
     c94:	75 e0       	ldi	r23, 0x05	; 5
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
     c9c:	0f 2e       	mov	r0, r31
     c9e:	f3 e0       	ldi	r31, 0x03	; 3
     ca0:	cf 2e       	mov	r12, r31
     ca2:	f0 2d       	mov	r31, r0
     ca4:	2b 2d       	mov	r18, r11
     ca6:	47 e0       	ldi	r20, 0x07	; 7
     ca8:	56 e0       	ldi	r21, 0x06	; 6
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	76 e0       	ldi	r23, 0x06	; 6
     cae:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		ST7789::printString(" ", &xpos, &ypos, red, green, blue, 3);
     cb2:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     cb6:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     cba:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     cbe:	47 e0       	ldi	r20, 0x07	; 7
     cc0:	56 e0       	ldi	r21, 0x06	; 6
     cc2:	68 e0       	ldi	r22, 0x08	; 8
     cc4:	76 e0       	ldi	r23, 0x06	; 6
     cc6:	8f e9       	ldi	r24, 0x9F	; 159
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		// Слово
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
     cce:	ce 01       	movw	r24, r28
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
     ce0:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
     ce4:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
     ce8:	47 e0       	ldi	r20, 0x07	; 7
     cea:	56 e0       	ldi	r21, 0x06	; 6
     cec:	68 e0       	ldi	r22, 0x08	; 8
     cee:	76 e0       	ldi	r23, 0x06	; 6
     cf0:	80 5a       	subi	r24, 0xA0	; 160
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
			
		xpos = 0;
     cf8:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <xpos>
		ypos += 26;
     cfc:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <ypos>
     d00:	86 5e       	subi	r24, 0xE6	; 230
     d02:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <ypos>



void printSchedule(void)
{
	for(char i = 0; i < 4; i++)
     d06:	1f 5f       	subi	r17, 0xFF	; 255
     d08:	58 cf       	rjmp	.-336    	; 0xbba <_Z13printSchedulev+0x14>
		ST7789::printString(wordschedule[i], &xpos, &ypos, red, green, blue, 3);
			
		xpos = 0;
		ypos += 26;
	}
	ypos -= 26;
     d0a:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <ypos>
     d0e:	8a 51       	subi	r24, 0x1A	; 26
     d10:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <ypos>
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	08 95       	ret

00000d28 <_Z4ftoafPci>:
	return i;
}

// Converts a floating-point/double number to a string.
char* ftoa(float n, char* res, int afterpoint)
{
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	4b 01       	movw	r8, r22
     d42:	5c 01       	movw	r10, r24
     d44:	7a 01       	movw	r14, r20
     d46:	69 01       	movw	r12, r18
	// Extract integer part
	int ipart = (int)n;
     d48:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
     d4c:	8b 01       	movw	r16, r22
	
	// Extract floating part
	float fpart = n - (float)ipart;
     d4e:	07 2e       	mov	r0, r23
     d50:	00 0c       	add	r0, r0
     d52:	88 0b       	sbc	r24, r24
     d54:	99 0b       	sbc	r25, r25
     d56:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__floatsisf>
     d5a:	9b 01       	movw	r18, r22
     d5c:	ac 01       	movw	r20, r24
     d5e:	c5 01       	movw	r24, r10
     d60:	b4 01       	movw	r22, r8
     d62:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
     d66:	4b 01       	movw	r8, r22
     d68:	5c 01       	movw	r10, r24
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     d6a:	c0 e0       	ldi	r28, 0x00	; 0
     d6c:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
     d6e:	01 15       	cp	r16, r1
     d70:	11 05       	cpc	r17, r1
     d72:	71 f0       	breq	.+28     	; 0xd90 <_Z4ftoafPci+0x68>
		str[i++] = (x % 10) + '0';
     d74:	f7 01       	movw	r30, r14
     d76:	ec 0f       	add	r30, r28
     d78:	fd 1f       	adc	r31, r29
     d7a:	c8 01       	movw	r24, r16
     d7c:	6a e0       	ldi	r22, 0x0A	; 10
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	0e 94 02 10 	call	0x2004	; 0x2004 <__divmodhi4>
     d84:	80 5d       	subi	r24, 0xD0	; 208
     d86:	80 83       	st	Z, r24
		x = x / 10;
     d88:	06 2f       	mov	r16, r22
     d8a:	17 2f       	mov	r17, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     d8c:	21 96       	adiw	r28, 0x01	; 1
     d8e:	ef cf       	rjmp	.-34     	; 0xd6e <_Z4ftoafPci+0x46>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     d90:	dd 23       	and	r29, r29
     d92:	3c f4       	brge	.+14     	; 0xda2 <_Z4ftoafPci+0x7a>
	str[i++] = '0';
     d94:	f7 01       	movw	r30, r14
     d96:	ec 0f       	add	r30, r28
     d98:	fd 1f       	adc	r31, r29
     d9a:	80 e3       	ldi	r24, 0x30	; 48
     d9c:	80 83       	st	Z, r24
     d9e:	21 96       	adiw	r28, 0x01	; 1
     da0:	f7 cf       	rjmp	.-18     	; 0xd90 <_Z4ftoafPci+0x68>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     da2:	9e 01       	movw	r18, r28
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	31 09       	sbc	r19, r1
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	74 f4       	brge	.+28     	; 0xdce <_Z4ftoafPci+0xa6>
		temp = str[i];
     db2:	d7 01       	movw	r26, r14
     db4:	a8 0f       	add	r26, r24
     db6:	b9 1f       	adc	r27, r25
     db8:	4c 91       	ld	r20, X
		str[i] = str[j];
     dba:	f7 01       	movw	r30, r14
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 1f       	adc	r31, r19
     dc0:	50 81       	ld	r21, Z
     dc2:	5c 93       	st	X, r21
		str[j] = temp;
     dc4:	40 83       	st	Z, r20
		i++;
     dc6:	01 96       	adiw	r24, 0x01	; 1
		j--;
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	31 09       	sbc	r19, r1
     dcc:	ef cf       	rjmp	.-34     	; 0xdac <_Z4ftoafPci+0x84>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     dce:	f7 01       	movw	r30, r14
     dd0:	ec 0f       	add	r30, r28
     dd2:	fd 1f       	adc	r31, r29
     dd4:	10 82       	st	Z, r1
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
	
	// check for display option after point
	if (afterpoint != 0) {
     dd6:	c1 14       	cp	r12, r1
     dd8:	d1 04       	cpc	r13, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <_Z4ftoafPci+0xb6>
     ddc:	56 c0       	rjmp	.+172    	; 0xe8a <_Z4ftoafPci+0x162>
		res[i] = '.'; // add dot
     dde:	f7 01       	movw	r30, r14
     de0:	ec 0f       	add	r30, r28
     de2:	fd 1f       	adc	r31, r29
     de4:	8e e2       	ldi	r24, 0x2E	; 46
     de6:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     de8:	b6 01       	movw	r22, r12
     dea:	0d 2c       	mov	r0, r13
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__floatsisf>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	91 e4       	ldi	r25, 0x41	; 65
     e02:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <pow>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	ce 0d       	add	r28, r14
     e16:	df 1d       	adc	r29, r15
     e18:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fixsfsi>
     e1c:	cb 01       	movw	r24, r22
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
	while (x) {
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	71 f0       	breq	.+28     	; 0xe42 <_Z4ftoafPci+0x11a>
		str[i++] = (x % 10) + '0';
     e26:	fe 01       	movw	r30, r28
     e28:	e2 0f       	add	r30, r18
     e2a:	f3 1f       	adc	r31, r19
     e2c:	6a e0       	ldi	r22, 0x0A	; 10
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 02 10 	call	0x2004	; 0x2004 <__divmodhi4>
     e34:	80 5d       	subi	r24, 0xD0	; 208
     e36:	80 83       	st	Z, r24
		x = x / 10;
     e38:	86 2f       	mov	r24, r22
     e3a:	97 2f       	mov	r25, r23
// then 0s are added at the beginning.
inline int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
		str[i++] = (x % 10) + '0';
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	f0 cf       	rjmp	.-32     	; 0xe22 <_Z4ftoafPci+0xfa>
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     e42:	2c 15       	cp	r18, r12
     e44:	3d 05       	cpc	r19, r13
     e46:	44 f4       	brge	.+16     	; 0xe58 <_Z4ftoafPci+0x130>
	str[i++] = '0';
     e48:	fe 01       	movw	r30, r28
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	80 e3       	ldi	r24, 0x30	; 48
     e50:	80 83       	st	Z, r24
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	f5 cf       	rjmp	.-22     	; 0xe42 <_Z4ftoafPci+0x11a>


// Reverses a string 'str' of length 'len'
inline void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     e58:	a9 01       	movw	r20, r18
     e5a:	41 50       	subi	r20, 0x01	; 1
     e5c:	51 09       	sbc	r21, r1
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
     e62:	84 17       	cp	r24, r20
     e64:	95 07       	cpc	r25, r21
     e66:	74 f4       	brge	.+28     	; 0xe84 <_Z4ftoafPci+0x15c>
		temp = str[i];
     e68:	de 01       	movw	r26, r28
     e6a:	a8 0f       	add	r26, r24
     e6c:	b9 1f       	adc	r27, r25
     e6e:	6c 91       	ld	r22, X
		str[i] = str[j];
     e70:	fe 01       	movw	r30, r28
     e72:	e4 0f       	add	r30, r20
     e74:	f5 1f       	adc	r31, r21
     e76:	70 81       	ld	r23, Z
     e78:	7c 93       	st	X, r23
		str[j] = temp;
     e7a:	60 83       	st	Z, r22
		i++;
     e7c:	01 96       	adiw	r24, 0x01	; 1
		j--;
     e7e:	41 50       	subi	r20, 0x01	; 1
     e80:	51 09       	sbc	r21, r1
     e82:	ef cf       	rjmp	.-34     	; 0xe62 <_Z4ftoafPci+0x13a>
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
	str[i] = '\0';
     e84:	c2 0f       	add	r28, r18
     e86:	d3 1f       	adc	r29, r19
     e88:	18 82       	st	Y, r1
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
     e8a:	c7 01       	movw	r24, r14
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	bf 90       	pop	r11
     e9e:	af 90       	pop	r10
     ea0:	9f 90       	pop	r9
     ea2:	8f 90       	pop	r8
     ea4:	08 95       	ret

00000ea6 <main>:
     ea6:	2f ef       	ldi	r18, 0xFF	; 255
     ea8:	8f e7       	ldi	r24, 0x7F	; 127
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	80 40       	sbci	r24, 0x00	; 0
     eb0:	90 40       	sbci	r25, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <main+0x6>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <main+0x10>
     eb6:	00 00       	nop
char* ftoa(float n, char* res, int afterpoint);

int main(void)
{
	_delay_ms(100);
	setup();
     eb8:	0e 94 75 04 	call	0x8ea	; 0x8ea <_Z5setupv>
	ST7789::fillScreen(0, 0, 0);
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN6ST778910fillScreenEccc>
	DS1307::writeTime(time);
	_delay_ms(50);
	*/
	
	
	DS1307::readTime(time);
     ec6:	88 e8       	ldi	r24, 0x88	; 136
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 66 01 	call	0x2cc	; 0x2cc <_ZN6DS13078readTimeEPc>
		
		
		
	while (1) 
    {
		while (time[0] == timecomp && flagsetting == 3){}					// Установка обьновления экрана - без задержки или каждую секунду
     ece:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <time>
     ed2:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <timecomp>
     ed6:	89 13       	cpse	r24, r25
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <main+0x3c>
     eda:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <flagsetting>
     ede:	93 30       	cpi	r25, 0x03	; 3
     ee0:	b1 f3       	breq	.-20     	; 0xece <main+0x28>
		timecomp = time[0];	
     ee2:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <timecomp>
		
		
		//==============================================================================
		//									Блок времени
		//==============================================================================		
		xpos = 0;
     ee6:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <xpos>
		ypos = 0;
     eea:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <ypos>
		
		if (flagsetting == 3)
     eee:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	29 f4       	brne	.+10     	; 0xf00 <main+0x5a>
		{
			printClock(time);
     ef6:	88 e8       	ldi	r24, 0x88	; 136
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 98 04 	call	0x930	; 0x930 <_Z10printClockPc>
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <main+0x62>
		}
		else
		{
			printClock(timesetting);
     f00:	87 ef       	ldi	r24, 0xF7	; 247
     f02:	95 e0       	ldi	r25, 0x05	; 5
     f04:	0e 94 98 04 	call	0x930	; 0x930 <_Z10printClockPc>
		
		
		//==============================================================================
		//								Блок времени суток
		//==============================================================================
		xpos = 0;
     f08:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <xpos>
		ypos = 40;
     f0c:	88 e2       	ldi	r24, 0x28	; 40
     f0e:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <ypos>
		
		if (flagsetting == 3)
     f12:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
     f16:	83 30       	cpi	r24, 0x03	; 3
     f18:	09 f0       	breq	.+2      	; 0xf1c <main+0x76>
     f1a:	65 c1       	rjmp	.+714    	; 0x11e6 <main+0x340>
		{
			// Расчеты времён
			timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
     f1c:	c8 e8       	ldi	r28, 0x88	; 136
     f1e:	d0 e0       	ldi	r29, 0x00	; 0
     f20:	1a 81       	ldd	r17, Y+2	; 0x02
     f22:	69 81       	ldd	r22, Y+1	; 0x01
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e7       	ldi	r20, 0x70	; 112
     f34:	52 e4       	ldi	r21, 0x42	; 66
     f36:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     f3a:	4b 01       	movw	r8, r22
     f3c:	5c 01       	movw	r10, r24
     f3e:	61 2f       	mov	r22, r17
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     f4a:	a5 01       	movw	r20, r10
     f4c:	94 01       	movw	r18, r8
     f4e:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
     f52:	4b 01       	movw	r8, r22
     f54:	5c 01       	movw	r10, r24
     f56:	68 81       	ld	r22, Y
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	41 e6       	ldi	r20, 0x61	; 97
     f68:	55 e4       	ldi	r21, 0x45	; 69
     f6a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	c5 01       	movw	r24, r10
     f74:	b4 01       	movw	r22, r8
     f76:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
     f7a:	4b 01       	movw	r8, r22
     f7c:	5c 01       	movw	r10, r24
     f7e:	60 93 f3 05 	sts	0x05F3, r22	; 0x8005f3 <timeDec>
     f82:	70 93 f4 05 	sts	0x05F4, r23	; 0x8005f4 <timeDec+0x1>
     f86:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <timeDec+0x2>
     f8a:	90 93 f6 05 	sts	0x05F6, r25	; 0x8005f6 <timeDec+0x3>
					
			for(char i = 0; i < 4; i++)
     f8e:	f1 2c       	mov	r15, r1
     f90:	e3 e0       	ldi	r30, 0x03	; 3
     f92:	ef 15       	cp	r30, r15
     f94:	78 f1       	brcs	.+94     	; 0xff4 <main+0x14e>
			{
				timescheduleDec[i] = (float)timeschedule[i][0] + (float)timeschedule[i][1] / 60.0;
     f96:	cf 2d       	mov	r28, r15
     f98:	d0 e0       	ldi	r29, 0x00	; 0
     f9a:	8e 01       	movw	r16, r28
     f9c:	00 0f       	add	r16, r16
     f9e:	11 1f       	adc	r17, r17
     fa0:	00 58       	subi	r16, 0x80	; 128
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	f8 01       	movw	r30, r16
     fa6:	60 81       	ld	r22, Z
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     fb2:	2b 01       	movw	r4, r22
     fb4:	3c 01       	movw	r6, r24
     fb6:	f8 01       	movw	r30, r16
     fb8:	61 81       	ldd	r22, Z+1	; 0x01
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e7       	ldi	r20, 0x70	; 112
     fca:	52 e4       	ldi	r21, 0x42	; 66
     fcc:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	c3 01       	movw	r24, r6
     fd6:	b2 01       	movw	r22, r4
     fd8:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
     fdc:	cc 0f       	add	r28, r28
     fde:	dd 1f       	adc	r29, r29
     fe0:	cc 0f       	add	r28, r28
     fe2:	dd 1f       	adc	r29, r29
     fe4:	ce 51       	subi	r28, 0x1E	; 30
     fe6:	da 4f       	sbci	r29, 0xFA	; 250
     fe8:	68 83       	st	Y, r22
     fea:	79 83       	std	Y+1, r23	; 0x01
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	9b 83       	std	Y+3, r25	; 0x03
		if (flagsetting == 3)
		{
			// Расчеты времён
			timeDec = (float)time[2] + (float)time[1] / 60.0 + (float)time[0] / 3600.0;
					
			for(char i = 0; i < 4; i++)
     ff0:	f3 94       	inc	r15
     ff2:	ce cf       	rjmp	.-100    	; 0xf90 <main+0xea>
			{
				timescheduleDec[i] = (float)timeschedule[i][0] + (float)timeschedule[i][1] / 60.0;
			}
					
			// Определение слова и скважности
			if (timeDec < timescheduleDec[0])													// Время меньше чем время рассвета = ночь - 3
     ff4:	20 91 e2 05 	lds	r18, 0x05E2	; 0x8005e2 <__data_end>
     ff8:	30 91 e3 05 	lds	r19, 0x05E3	; 0x8005e3 <__data_end+0x1>
     ffc:	40 91 e4 05 	lds	r20, 0x05E4	; 0x8005e4 <__data_end+0x2>
    1000:	50 91 e5 05 	lds	r21, 0x05E5	; 0x8005e5 <__data_end+0x3>
    1004:	c5 01       	movw	r24, r10
    1006:	b4 01       	movw	r22, r8
    1008:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__cmpsf2>
    100c:	88 23       	and	r24, r24
    100e:	a4 f4       	brge	.+40     	; 0x1038 <main+0x192>
			{
				ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
    1010:	0f 2e       	mov	r0, r31
    1012:	f5 e0       	ldi	r31, 0x05	; 5
    1014:	cf 2e       	mov	r12, r31
    1016:	f0 2d       	mov	r31, r0
    1018:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    101c:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1020:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1024:	47 e0       	ldi	r20, 0x07	; 7
    1026:	56 e0       	ldi	r21, 0x06	; 6
    1028:	68 e0       	ldi	r22, 0x08	; 8
    102a:	76 e0       	ldi	r23, 0x06	; 6
    102c:	88 e7       	ldi	r24, 0x78	; 120
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
				OCR0 = 0;
    1034:	1c be       	out	0x3c, r1	; 60
    1036:	d7 c0       	rjmp	.+430    	; 0x11e6 <main+0x340>
			}
			else if (timeDec < timescheduleDec[1])												// Время меньше чем время начала дня = рассвет - 0
    1038:	20 91 e6 05 	lds	r18, 0x05E6	; 0x8005e6 <__data_end+0x4>
    103c:	30 91 e7 05 	lds	r19, 0x05E7	; 0x8005e7 <__data_end+0x5>
    1040:	40 91 e8 05 	lds	r20, 0x05E8	; 0x8005e8 <__data_end+0x6>
    1044:	50 91 e9 05 	lds	r21, 0x05E9	; 0x8005e9 <__data_end+0x7>
    1048:	c5 01       	movw	r24, r10
    104a:	b4 01       	movw	r22, r8
    104c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__cmpsf2>
    1050:	88 23       	and	r24, r24
    1052:	f4 f5       	brge	.+124    	; 0x10d0 <main+0x22a>
			{
				ST7789::printString(wordschedule[0], &xpos, &ypos, red, green, blue, 5);
    1054:	0f 2e       	mov	r0, r31
    1056:	f5 e0       	ldi	r31, 0x05	; 5
    1058:	cf 2e       	mov	r12, r31
    105a:	f0 2d       	mov	r31, r0
    105c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    1060:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1064:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1068:	47 e0       	ldi	r20, 0x07	; 7
    106a:	56 e0       	ldi	r21, 0x06	; 6
    106c:	68 e0       	ldi	r22, 0x08	; 8
    106e:	76 e0       	ldi	r23, 0x06	; 6
    1070:	80 e6       	ldi	r24, 0x60	; 96
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
				OCR0 = (char)(((timeDec - timescheduleDec[0])/(timescheduleDec[1] - timescheduleDec[0])) * 255.0);
    1078:	c2 ee       	ldi	r28, 0xE2	; 226
    107a:	d5 e0       	ldi	r29, 0x05	; 5
    107c:	88 80       	ld	r8, Y
    107e:	99 80       	ldd	r9, Y+1	; 0x01
    1080:	aa 80       	ldd	r10, Y+2	; 0x02
    1082:	bb 80       	ldd	r11, Y+3	; 0x03
    1084:	a5 01       	movw	r20, r10
    1086:	94 01       	movw	r18, r8
    1088:	60 91 f3 05 	lds	r22, 0x05F3	; 0x8005f3 <timeDec>
    108c:	70 91 f4 05 	lds	r23, 0x05F4	; 0x8005f4 <timeDec+0x1>
    1090:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <timeDec+0x2>
    1094:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <timeDec+0x3>
    1098:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
    109c:	2b 01       	movw	r4, r22
    109e:	3c 01       	movw	r6, r24
    10a0:	6c 81       	ldd	r22, Y+4	; 0x04
    10a2:	7d 81       	ldd	r23, Y+5	; 0x05
    10a4:	8e 81       	ldd	r24, Y+6	; 0x06
    10a6:	9f 81       	ldd	r25, Y+7	; 0x07
    10a8:	a5 01       	movw	r20, r10
    10aa:	94 01       	movw	r18, r8
    10ac:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	c3 01       	movw	r24, r6
    10b6:	b2 01       	movw	r22, r4
    10b8:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	53 e4       	ldi	r21, 0x43	; 67
    10c4:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3>
    10c8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fixunssfsi>
    10cc:	6c bf       	out	0x3c, r22	; 60
    10ce:	8b c0       	rjmp	.+278    	; 0x11e6 <main+0x340>
			}
			else if (timeDec < timescheduleDec[2])												// Время меньше чем время конца дня = день - 1
    10d0:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <__data_end+0x8>
    10d4:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <__data_end+0x9>
    10d8:	40 91 ec 05 	lds	r20, 0x05EC	; 0x8005ec <__data_end+0xa>
    10dc:	50 91 ed 05 	lds	r21, 0x05ED	; 0x8005ed <__data_end+0xb>
    10e0:	c5 01       	movw	r24, r10
    10e2:	b4 01       	movw	r22, r8
    10e4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__cmpsf2>
    10e8:	88 23       	and	r24, r24
    10ea:	ac f4       	brge	.+42     	; 0x1116 <main+0x270>
			{
				ST7789::printString(wordschedule[1], &xpos, &ypos, red, green, blue, 5);
    10ec:	0f 2e       	mov	r0, r31
    10ee:	f5 e0       	ldi	r31, 0x05	; 5
    10f0:	cf 2e       	mov	r12, r31
    10f2:	f0 2d       	mov	r31, r0
    10f4:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    10f8:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    10fc:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1100:	47 e0       	ldi	r20, 0x07	; 7
    1102:	56 e0       	ldi	r21, 0x06	; 6
    1104:	68 e0       	ldi	r22, 0x08	; 8
    1106:	76 e0       	ldi	r23, 0x06	; 6
    1108:	88 e6       	ldi	r24, 0x68	; 104
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
				OCR0 = 255;
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	8c bf       	out	0x3c, r24	; 60
    1114:	68 c0       	rjmp	.+208    	; 0x11e6 <main+0x340>
			}
			else if (timeDec < timescheduleDec[3])												// Время меньше чем время конца заката = закат - 2
    1116:	20 91 ee 05 	lds	r18, 0x05EE	; 0x8005ee <__data_end+0xc>
    111a:	30 91 ef 05 	lds	r19, 0x05EF	; 0x8005ef <__data_end+0xd>
    111e:	40 91 f0 05 	lds	r20, 0x05F0	; 0x8005f0 <__data_end+0xe>
    1122:	50 91 f1 05 	lds	r21, 0x05F1	; 0x8005f1 <__data_end+0xf>
    1126:	c5 01       	movw	r24, r10
    1128:	b4 01       	movw	r22, r8
    112a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__cmpsf2>
    112e:	88 23       	and	r24, r24
    1130:	0c f0       	brlt	.+2      	; 0x1134 <main+0x28e>
    1132:	46 c0       	rjmp	.+140    	; 0x11c0 <main+0x31a>
			{
				ST7789::printString(wordschedule[2], &xpos, &ypos, red, green, blue, 5);
    1134:	0f 2e       	mov	r0, r31
    1136:	f5 e0       	ldi	r31, 0x05	; 5
    1138:	cf 2e       	mov	r12, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    1140:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1144:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1148:	47 e0       	ldi	r20, 0x07	; 7
    114a:	56 e0       	ldi	r21, 0x06	; 6
    114c:	68 e0       	ldi	r22, 0x08	; 8
    114e:	76 e0       	ldi	r23, 0x06	; 6
    1150:	80 e7       	ldi	r24, 0x70	; 112
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
				OCR0 = (char)((1.0 - ((timeDec - timescheduleDec[2])/(timescheduleDec[3] - timescheduleDec[2]))) * 255.0);
    1158:	c2 ee       	ldi	r28, 0xE2	; 226
    115a:	d5 e0       	ldi	r29, 0x05	; 5
    115c:	88 84       	ldd	r8, Y+8	; 0x08
    115e:	99 84       	ldd	r9, Y+9	; 0x09
    1160:	aa 84       	ldd	r10, Y+10	; 0x0a
    1162:	bb 84       	ldd	r11, Y+11	; 0x0b
    1164:	a5 01       	movw	r20, r10
    1166:	94 01       	movw	r18, r8
    1168:	60 91 f3 05 	lds	r22, 0x05F3	; 0x8005f3 <timeDec>
    116c:	70 91 f4 05 	lds	r23, 0x05F4	; 0x8005f4 <timeDec+0x1>
    1170:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <timeDec+0x2>
    1174:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <timeDec+0x3>
    1178:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
    117c:	2b 01       	movw	r4, r22
    117e:	3c 01       	movw	r6, r24
    1180:	6c 85       	ldd	r22, Y+12	; 0x0c
    1182:	7d 85       	ldd	r23, Y+13	; 0x0d
    1184:	8e 85       	ldd	r24, Y+14	; 0x0e
    1186:	9f 85       	ldd	r25, Y+15	; 0x0f
    1188:	a5 01       	movw	r20, r10
    118a:	94 01       	movw	r18, r8
    118c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
    1190:	9b 01       	movw	r18, r22
    1192:	ac 01       	movw	r20, r24
    1194:	c3 01       	movw	r24, r6
    1196:	b2 01       	movw	r22, r4
    1198:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	80 e8       	ldi	r24, 0x80	; 128
    11a6:	9f e3       	ldi	r25, 0x3F	; 63
    11a8:	0e 94 44 0c 	call	0x1888	; 0x1888 <__subsf3>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	4f e7       	ldi	r20, 0x7F	; 127
    11b2:	53 e4       	ldi	r21, 0x43	; 67
    11b4:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3>
    11b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fixunssfsi>
    11bc:	6c bf       	out	0x3c, r22	; 60
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <main+0x340>
			}
			else																				// В остальных случаях ночь - 3
			{
				ST7789::printString(wordschedule[3], &xpos, &ypos, red, green, blue, 5);
    11c0:	0f 2e       	mov	r0, r31
    11c2:	f5 e0       	ldi	r31, 0x05	; 5
    11c4:	cf 2e       	mov	r12, r31
    11c6:	f0 2d       	mov	r31, r0
    11c8:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    11cc:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    11d0:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    11d4:	47 e0       	ldi	r20, 0x07	; 7
    11d6:	56 e0       	ldi	r21, 0x06	; 6
    11d8:	68 e0       	ldi	r22, 0x08	; 8
    11da:	76 e0       	ldi	r23, 0x06	; 6
    11dc:	88 e7       	ldi	r24, 0x78	; 120
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
				OCR0 = 0;
    11e4:	1c be       	out	0x3c, r1	; 60
		
		
		//==============================================================================
		//								Блок скважности
		//==============================================================================
		xpos = 0;
    11e6:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <xpos>
		ypos = 85;
    11ea:	85 e5       	ldi	r24, 0x55	; 85
    11ec:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <ypos>
		
		if (flagsetting == 3)
    11f0:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	09 f0       	breq	.+2      	; 0x11fa <main+0x354>
    11f8:	79 c0       	rjmp	.+242    	; 0x12ec <main+0x446>
		{
			ST7789::printString(itoa(OCR0, buffer, 10), &xpos, &ypos, red, green, blue, 3);		// Печать OCR0
    11fa:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    11fe:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1202:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
    1206:	8c b7       	in	r24, 0x3c	; 60
    1208:	4a e0       	ldi	r20, 0x0A	; 10
    120a:	6e ef       	ldi	r22, 0xFE	; 254
    120c:	75 e0       	ldi	r23, 0x05	; 5
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 30 10 	call	0x2060	; 0x2060 <__itoa_ncheck>
    1214:	0f 2e       	mov	r0, r31
    1216:	f3 e0       	ldi	r31, 0x03	; 3
    1218:	cf 2e       	mov	r12, r31
    121a:	f0 2d       	mov	r31, r0
    121c:	2c 2f       	mov	r18, r28
    121e:	47 e0       	ldi	r20, 0x07	; 7
    1220:	56 e0       	ldi	r21, 0x06	; 6
    1222:	68 e0       	ldi	r22, 0x08	; 8
    1224:	76 e0       	ldi	r23, 0x06	; 6
    1226:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
					
			ST7789::printString("осв.", &xpos, &ypos, red, green, blue, 3);						// Печать осв.	
    122a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    122e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1232:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    1236:	47 e0       	ldi	r20, 0x07	; 7
    1238:	56 e0       	ldi	r21, 0x06	; 6
    123a:	68 e0       	ldi	r22, 0x08	; 8
    123c:	76 e0       	ldi	r23, 0x06	; 6
    123e:	88 e9       	ldi	r24, 0x98	; 152
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
					
			if ((float)OCR0/2.55 < 10)															// Печать процента
    1246:	6c b7       	in	r22, 0x3c	; 60
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
    1252:	23 e3       	ldi	r18, 0x33	; 51
    1254:	33 e3       	ldi	r19, 0x33	; 51
    1256:	43 e2       	ldi	r20, 0x23	; 35
    1258:	50 e4       	ldi	r21, 0x40	; 64
    125a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__cmpsf2>
    126a:	88 23       	and	r24, r24
    126c:	74 f4       	brge	.+28     	; 0x128a <main+0x3e4>
			{
				ST7789::printString("0", &xpos, &ypos, red, green, blue, 3);
    126e:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    1272:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1276:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    127a:	47 e0       	ldi	r20, 0x07	; 7
    127c:	56 e0       	ldi	r21, 0x06	; 6
    127e:	68 e0       	ldi	r22, 0x08	; 8
    1280:	76 e0       	ldi	r23, 0x06	; 6
    1282:	84 e9       	ldi	r24, 0x94	; 148
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
			}
					
			ST7789::printString(ftoa(((float)OCR0/2.55), buffer, 2), &xpos, &ypos, red, green, blue, 3);
    128a:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    128e:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    1292:	c0 91 91 00 	lds	r28, 0x0091	; 0x800091 <red>
    1296:	6c b7       	in	r22, 0x3c	; 60
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__floatunsisf>
    12a2:	23 e3       	ldi	r18, 0x33	; 51
    12a4:	33 e3       	ldi	r19, 0x33	; 51
    12a6:	43 e2       	ldi	r20, 0x23	; 35
    12a8:	50 e4       	ldi	r21, 0x40	; 64
    12aa:	0e 94 b6 0c 	call	0x196c	; 0x196c <__divsf3>
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4e ef       	ldi	r20, 0xFE	; 254
    12b4:	55 e0       	ldi	r21, 0x05	; 5
    12b6:	0e 94 94 06 	call	0xd28	; 0xd28 <_Z4ftoafPci>
    12ba:	0f 2e       	mov	r0, r31
    12bc:	f3 e0       	ldi	r31, 0x03	; 3
    12be:	cf 2e       	mov	r12, r31
    12c0:	f0 2d       	mov	r31, r0
    12c2:	2c 2f       	mov	r18, r28
    12c4:	47 e0       	ldi	r20, 0x07	; 7
    12c6:	56 e0       	ldi	r21, 0x06	; 6
    12c8:	68 e0       	ldi	r22, 0x08	; 8
    12ca:	76 e0       	ldi	r23, 0x06	; 6
    12cc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
			ST7789::printString("%  ", &xpos, &ypos, red, green, blue, 3);
    12d0:	e0 90 8f 00 	lds	r14, 0x008F	; 0x80008f <blue>
    12d4:	00 91 90 00 	lds	r16, 0x0090	; 0x800090 <green>
    12d8:	20 91 91 00 	lds	r18, 0x0091	; 0x800091 <red>
    12dc:	47 e0       	ldi	r20, 0x07	; 7
    12de:	56 e0       	ldi	r21, 0x06	; 6
    12e0:	68 e0       	ldi	r22, 0x08	; 8
    12e2:	76 e0       	ldi	r23, 0x06	; 6
    12e4:	8d e9       	ldi	r24, 0x9D	; 157
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN6ST778911printStringEPcS0_S0_cccc>
		
		
		//==============================================================================
		//								Блок расписания
		//==============================================================================
		xpos = 0;
    12ec:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <xpos>
		ypos = 130;
    12f0:	82 e8       	ldi	r24, 0x82	; 130
    12f2:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <ypos>
		if (flagsetting == 3)
    12f6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <flagsetting>
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	09 f0       	breq	.+2      	; 0x1300 <main+0x45a>
    12fe:	e7 cd       	rjmp	.-1074   	; 0xece <main+0x28>
		{
			printSchedule();
    1300:	0e 94 d3 05 	call	0xba6	; 0xba6 <_Z13printSchedulev>
    1304:	e4 cd       	rjmp	.-1080   	; 0xece <main+0x28>

00001306 <_GLOBAL__sub_I_flagsync>:
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
	
	return res;
    1306:	6f ef       	ldi	r22, 0xFF	; 255
    1308:	7f ef       	ldi	r23, 0xFF	; 255
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 34 02 	call	0x468	; 0x468 <_Z41__static_initialization_and_destruction_0ii>
    1312:	08 95       	ret

00001314 <_ZN6ST77894initEv>:
	//==============================================================================

	void init(void)
	{
		// Настройка пинов SPI
		DDR_SPI  |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(0 << MISO);		// Обязательная настройка! Для всех 4-х пинов SPI!
    1314:	87 b3       	in	r24, 0x17	; 23
    1316:	80 6b       	ori	r24, 0xB0	; 176
    1318:	87 bb       	out	0x17, r24	; 23
		PORT_SPI |= (1 << MOSI)|(1 << SCK)|(1 << SS)|(1 << MISO);		//
    131a:	88 b3       	in	r24, 0x18	; 24
    131c:	80 6f       	ori	r24, 0xF0	; 240
    131e:	88 bb       	out	0x18, r24	; 24
			
		// Настройка реистра SPI
		// Разрешение SPI - (SPE), старший бит вперед - (DORD), мастер - (MSTR), режим ? ((1 << CPHA)|(0 << SPR1)), делитель частоты - 64 (SPR1, SPR0) (~230кГц)
		SPCR = (1 << SPE)|(0 << DORD)|(1 << MSTR)|(1 << CPOL)|(1 << CPHA)|(0 << SPR1)|(0 << SPR0);	// (1 << CPHA)|(1 << SPR1) - обязательно для ST7789!!!
    1320:	8c e5       	ldi	r24, 0x5C	; 92
    1322:	8d b9       	out	0x0d, r24	; 13
		SPSR = (1 << SPI2X);
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	9e b9       	out	0x0e, r25	; 14
			
		// Настройка пина RES ST7789
		DDR_RES  |= (1 << RES);											// Выходы (1)
    1328:	84 b3       	in	r24, 0x14	; 20
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	84 bb       	out	0x14, r24	; 20
		PORT_RES |= (1 << RES);											// Изначально высокий уровень RES
    132e:	85 b3       	in	r24, 0x15	; 21
    1330:	88 60       	ori	r24, 0x08	; 8
    1332:	85 bb       	out	0x15, r24	; 21
			
		// Настройка пина защёлки ST7789
		DDR_DC  |= (1 << DC);											// Выходы (1)
    1334:	84 b3       	in	r24, 0x14	; 20
    1336:	84 60       	ori	r24, 0x04	; 4
    1338:	84 bb       	out	0x14, r24	; 20
		PORT_DC |= (1 << DC);											// Изначально высокий уровень DC
    133a:	85 b3       	in	r24, 0x15	; 21
    133c:	84 60       	ori	r24, 0x04	; 4
    133e:	85 bb       	out	0x15, r24	; 21
		
		
		// Рестарт экрана
		RESET_HIGH;
    1340:	85 b3       	in	r24, 0x15	; 21
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	85 bb       	out	0x15, r24	; 21
    1346:	e7 e8       	ldi	r30, 0x87	; 135
    1348:	f3 e1       	ldi	r31, 0x13	; 19
    134a:	31 97       	sbiw	r30, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <_ZN6ST77894initEv+0x36>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <_ZN6ST77894initEv+0x3c>
    1350:	00 00       	nop
		_delay_ms(20);
		RESET_LOW;
    1352:	85 b3       	in	r24, 0x15	; 21
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	85 bb       	out	0x15, r24	; 21
    1358:	e1 ee       	ldi	r30, 0xE1	; 225
    135a:	f4 e0       	ldi	r31, 0x04	; 4
    135c:	31 97       	sbiw	r30, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <_ZN6ST77894initEv+0x48>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <_ZN6ST77894initEv+0x4e>
    1362:	00 00       	nop
		_delay_ms(5);
		RESET_HIGH;
    1364:	85 b3       	in	r24, 0x15	; 21
    1366:	88 60       	ori	r24, 0x08	; 8
    1368:	85 bb       	out	0x15, r24	; 21
    136a:	e7 e8       	ldi	r30, 0x87	; 135
    136c:	f3 e1       	ldi	r31, 0x13	; 19
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <_ZN6ST77894initEv+0x5a>
    1372:	00 c0       	rjmp	.+0      	; 0x1374 <_ZN6ST77894initEv+0x60>
    1374:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1376:	85 b3       	in	r24, 0x15	; 21
    1378:	8b 7f       	andi	r24, 0xFB	; 251
    137a:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    137c:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    137e:	77 9b       	sbis	0x0e, 7	; 14
    1380:	fe cf       	rjmp	.-4      	; 0x137e <_ZN6ST77894initEv+0x6a>
    1382:	83 ec       	ldi	r24, 0xC3	; 195
    1384:	99 e0       	ldi	r25, 0x09	; 9
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <_ZN6ST77894initEv+0x72>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <_ZN6ST77894initEv+0x78>
    138c:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    138e:	85 b3       	in	r24, 0x15	; 21
    1390:	8b 7f       	andi	r24, 0xFB	; 251
    1392:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1394:	81 e1       	ldi	r24, 0x11	; 17
    1396:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1398:	77 9b       	sbis	0x0e, 7	; 14
    139a:	fe cf       	rjmp	.-4      	; 0x1398 <_ZN6ST77894initEv+0x84>
    139c:	e3 ec       	ldi	r30, 0xC3	; 195
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	31 97       	sbiw	r30, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <_ZN6ST77894initEv+0x8c>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <_ZN6ST77894initEv+0x92>
    13a6:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    13a8:	85 b3       	in	r24, 0x15	; 21
    13aa:	8b 7f       	andi	r24, 0xFB	; 251
    13ac:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    13ae:	8a e3       	ldi	r24, 0x3A	; 58
    13b0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    13b2:	77 9b       	sbis	0x0e, 7	; 14
    13b4:	fe cf       	rjmp	.-4      	; 0x13b2 <_ZN6ST77894initEv+0x9e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13b6:	85 b3       	in	r24, 0x15	; 21
    13b8:	84 60       	ori	r24, 0x04	; 4
    13ba:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    13bc:	86 e0       	ldi	r24, 0x06	; 6
    13be:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    13c0:	77 9b       	sbis	0x0e, 7	; 14
    13c2:	fe cf       	rjmp	.-4      	; 0x13c0 <_ZN6ST77894initEv+0xac>
    13c4:	83 ec       	ldi	r24, 0xC3	; 195
    13c6:	99 e0       	ldi	r25, 0x09	; 9
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <_ZN6ST77894initEv+0xb4>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <_ZN6ST77894initEv+0xba>
    13ce:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    13d0:	85 b3       	in	r24, 0x15	; 21
    13d2:	8b 7f       	andi	r24, 0xFB	; 251
    13d4:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    13d6:	86 e3       	ldi	r24, 0x36	; 54
    13d8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    13da:	77 9b       	sbis	0x0e, 7	; 14
    13dc:	fe cf       	rjmp	.-4      	; 0x13da <_ZN6ST77894initEv+0xc6>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    13de:	85 b3       	in	r24, 0x15	; 21
    13e0:	84 60       	ori	r24, 0x04	; 4
    13e2:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    13e4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    13e6:	77 9b       	sbis	0x0e, 7	; 14
    13e8:	fe cf       	rjmp	.-4      	; 0x13e6 <_ZN6ST77894initEv+0xd2>
    13ea:	e3 ec       	ldi	r30, 0xC3	; 195
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <_ZN6ST77894initEv+0xda>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <_ZN6ST77894initEv+0xe0>
    13f4:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    13f6:	85 b3       	in	r24, 0x15	; 21
    13f8:	8b 7f       	andi	r24, 0xFB	; 251
    13fa:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    13fc:	8a e2       	ldi	r24, 0x2A	; 42
    13fe:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1400:	77 9b       	sbis	0x0e, 7	; 14
    1402:	fe cf       	rjmp	.-4      	; 0x1400 <_ZN6ST77894initEv+0xec>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1404:	85 b3       	in	r24, 0x15	; 21
    1406:	84 60       	ori	r24, 0x04	; 4
    1408:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    140a:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    140c:	77 9b       	sbis	0x0e, 7	; 14
    140e:	fe cf       	rjmp	.-4      	; 0x140c <_ZN6ST77894initEv+0xf8>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1410:	85 b3       	in	r24, 0x15	; 21
    1412:	84 60       	ori	r24, 0x04	; 4
    1414:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1416:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1418:	77 9b       	sbis	0x0e, 7	; 14
    141a:	fe cf       	rjmp	.-4      	; 0x1418 <_ZN6ST77894initEv+0x104>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    141c:	85 b3       	in	r24, 0x15	; 21
    141e:	84 60       	ori	r24, 0x04	; 4
    1420:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1422:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1424:	77 9b       	sbis	0x0e, 7	; 14
    1426:	fe cf       	rjmp	.-4      	; 0x1424 <_ZN6ST77894initEv+0x110>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1428:	85 b3       	in	r24, 0x15	; 21
    142a:	84 60       	ori	r24, 0x04	; 4
    142c:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    142e:	80 ef       	ldi	r24, 0xF0	; 240
    1430:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1432:	77 9b       	sbis	0x0e, 7	; 14
    1434:	fe cf       	rjmp	.-4      	; 0x1432 <_ZN6ST77894initEv+0x11e>
    1436:	83 ec       	ldi	r24, 0xC3	; 195
    1438:	99 e0       	ldi	r25, 0x09	; 9
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <_ZN6ST77894initEv+0x126>
    143e:	00 c0       	rjmp	.+0      	; 0x1440 <_ZN6ST77894initEv+0x12c>
    1440:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1442:	85 b3       	in	r24, 0x15	; 21
    1444:	8b 7f       	andi	r24, 0xFB	; 251
    1446:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1448:	8b e2       	ldi	r24, 0x2B	; 43
    144a:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    144c:	77 9b       	sbis	0x0e, 7	; 14
    144e:	fe cf       	rjmp	.-4      	; 0x144c <_ZN6ST77894initEv+0x138>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1450:	85 b3       	in	r24, 0x15	; 21
    1452:	84 60       	ori	r24, 0x04	; 4
    1454:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1456:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1458:	77 9b       	sbis	0x0e, 7	; 14
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <_ZN6ST77894initEv+0x144>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    145c:	85 b3       	in	r24, 0x15	; 21
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1462:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1464:	77 9b       	sbis	0x0e, 7	; 14
    1466:	fe cf       	rjmp	.-4      	; 0x1464 <_ZN6ST77894initEv+0x150>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1468:	85 b3       	in	r24, 0x15	; 21
    146a:	84 60       	ori	r24, 0x04	; 4
    146c:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    146e:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1470:	77 9b       	sbis	0x0e, 7	; 14
    1472:	fe cf       	rjmp	.-4      	; 0x1470 <_ZN6ST77894initEv+0x15c>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1474:	85 b3       	in	r24, 0x15	; 21
    1476:	84 60       	ori	r24, 0x04	; 4
    1478:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    147a:	80 ef       	ldi	r24, 0xF0	; 240
    147c:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    147e:	77 9b       	sbis	0x0e, 7	; 14
    1480:	fe cf       	rjmp	.-4      	; 0x147e <_ZN6ST77894initEv+0x16a>
    1482:	e3 ec       	ldi	r30, 0xC3	; 195
    1484:	f9 e0       	ldi	r31, 0x09	; 9
    1486:	31 97       	sbiw	r30, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <_ZN6ST77894initEv+0x172>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <_ZN6ST77894initEv+0x178>
    148c:	00 00       	nop
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    148e:	85 b3       	in	r24, 0x15	; 21
    1490:	8b 7f       	andi	r24, 0xFB	; 251
    1492:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    1494:	81 e2       	ldi	r24, 0x21	; 33
    1496:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    1498:	77 9b       	sbis	0x0e, 7	; 14
    149a:	fe cf       	rjmp	.-4      	; 0x1498 <_ZN6ST77894initEv+0x184>
    149c:	83 ec       	ldi	r24, 0xC3	; 195
    149e:	99 e0       	ldi	r25, 0x09	; 9
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <_ZN6ST77894initEv+0x18c>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <_ZN6ST77894initEv+0x192>
    14a6:	00 00       	nop
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    14a8:	85 b3       	in	r24, 0x15	; 21
    14aa:	8b 7f       	andi	r24, 0xFB	; 251
    14ac:	85 bb       	out	0x15, r24	; 21
		SPDR = data;
    14ae:	89 e2       	ldi	r24, 0x29	; 41
    14b0:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1 << SPIF)));
    14b2:	77 9b       	sbis	0x0e, 7	; 14
    14b4:	fe cf       	rjmp	.-4      	; 0x14b2 <_ZN6ST77894initEv+0x19e>
    14b6:	e3 ec       	ldi	r30, 0xC3	; 195
    14b8:	f9 e0       	ldi	r31, 0x09	; 9
    14ba:	31 97       	sbiw	r30, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <_ZN6ST77894initEv+0x1a6>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <_ZN6ST77894initEv+0x1ac>
    14c0:	00 00       	nop
    14c2:	08 95       	ret

000014c4 <_ZN6ST778910fillScreenEccc>:
	//==============================================================================
	//							Функции экрана ST7789
	//==============================================================================
		
	void fillScreen(char red, char green, char blue)
	{
    14c4:	26 2f       	mov	r18, r22
    14c6:	34 2f       	mov	r19, r20
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    14c8:	95 b3       	in	r25, 0x15	; 21
    14ca:	9b 7f       	andi	r25, 0xFB	; 251
    14cc:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    14ce:	9a e2       	ldi	r25, 0x2A	; 42
    14d0:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    14d2:	77 9b       	sbis	0x0e, 7	; 14
    14d4:	fe cf       	rjmp	.-4      	; 0x14d2 <_ZN6ST778910fillScreenEccc+0xe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14d6:	95 b3       	in	r25, 0x15	; 21
    14d8:	94 60       	ori	r25, 0x04	; 4
    14da:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    14dc:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    14de:	77 9b       	sbis	0x0e, 7	; 14
    14e0:	fe cf       	rjmp	.-4      	; 0x14de <_ZN6ST778910fillScreenEccc+0x1a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14e2:	95 b3       	in	r25, 0x15	; 21
    14e4:	94 60       	ori	r25, 0x04	; 4
    14e6:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    14e8:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    14ea:	77 9b       	sbis	0x0e, 7	; 14
    14ec:	fe cf       	rjmp	.-4      	; 0x14ea <_ZN6ST778910fillScreenEccc+0x26>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14ee:	95 b3       	in	r25, 0x15	; 21
    14f0:	94 60       	ori	r25, 0x04	; 4
    14f2:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    14f4:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    14f6:	77 9b       	sbis	0x0e, 7	; 14
    14f8:	fe cf       	rjmp	.-4      	; 0x14f6 <_ZN6ST778910fillScreenEccc+0x32>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    14fa:	95 b3       	in	r25, 0x15	; 21
    14fc:	94 60       	ori	r25, 0x04	; 4
    14fe:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1500:	90 ef       	ldi	r25, 0xF0	; 240
    1502:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1504:	77 9b       	sbis	0x0e, 7	; 14
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <_ZN6ST778910fillScreenEccc+0x40>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1508:	95 b3       	in	r25, 0x15	; 21
    150a:	9b 7f       	andi	r25, 0xFB	; 251
    150c:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    150e:	9b e2       	ldi	r25, 0x2B	; 43
    1510:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1512:	77 9b       	sbis	0x0e, 7	; 14
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <_ZN6ST778910fillScreenEccc+0x4e>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1516:	95 b3       	in	r25, 0x15	; 21
    1518:	94 60       	ori	r25, 0x04	; 4
    151a:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    151c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    151e:	77 9b       	sbis	0x0e, 7	; 14
    1520:	fe cf       	rjmp	.-4      	; 0x151e <_ZN6ST778910fillScreenEccc+0x5a>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1522:	95 b3       	in	r25, 0x15	; 21
    1524:	94 60       	ori	r25, 0x04	; 4
    1526:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1528:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    152a:	77 9b       	sbis	0x0e, 7	; 14
    152c:	fe cf       	rjmp	.-4      	; 0x152a <_ZN6ST778910fillScreenEccc+0x66>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    152e:	95 b3       	in	r25, 0x15	; 21
    1530:	94 60       	ori	r25, 0x04	; 4
    1532:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1534:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1536:	77 9b       	sbis	0x0e, 7	; 14
    1538:	fe cf       	rjmp	.-4      	; 0x1536 <_ZN6ST778910fillScreenEccc+0x72>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    153a:	95 b3       	in	r25, 0x15	; 21
    153c:	94 60       	ori	r25, 0x04	; 4
    153e:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1540:	90 ef       	ldi	r25, 0xF0	; 240
    1542:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1544:	77 9b       	sbis	0x0e, 7	; 14
    1546:	fe cf       	rjmp	.-4      	; 0x1544 <_ZN6ST778910fillScreenEccc+0x80>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1548:	95 b3       	in	r25, 0x15	; 21
    154a:	9b 7f       	andi	r25, 0xFB	; 251
    154c:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    154e:	9c e2       	ldi	r25, 0x2C	; 44
    1550:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1552:	77 9b       	sbis	0x0e, 7	; 14
    1554:	fe cf       	rjmp	.-4      	; 0x1552 <_ZN6ST778910fillScreenEccc+0x8e>
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	ba 01       	movw	r22, r20
		sendData(240 >> 8);			// YE highpart	(Старшая часть конечного положения Ряда)
		sendData(240);				// YE highpart	(Младшая часть конечного положения Ряда)

		sendCommand(0x2C);			// НЕ ПОМНЮ ЧТО ЭТО?
		
		for(long int i = 0; i < 57600; i++)
    155c:	41 15       	cp	r20, r1
    155e:	91 ee       	ldi	r25, 0xE1	; 225
    1560:	59 07       	cpc	r21, r25
    1562:	61 05       	cpc	r22, r1
    1564:	71 05       	cpc	r23, r1
    1566:	04 f5       	brge	.+64     	; 0x15a8 <_ZN6ST778910fillScreenEccc+0xe4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1568:	95 b3       	in	r25, 0x15	; 21
    156a:	94 60       	ori	r25, 0x04	; 4
    156c:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    156e:	98 2f       	mov	r25, r24
    1570:	99 0f       	add	r25, r25
    1572:	99 0f       	add	r25, r25
    1574:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1576:	77 9b       	sbis	0x0e, 7	; 14
    1578:	fe cf       	rjmp	.-4      	; 0x1576 <_ZN6ST778910fillScreenEccc+0xb2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    157a:	95 b3       	in	r25, 0x15	; 21
    157c:	94 60       	ori	r25, 0x04	; 4
    157e:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1580:	92 2f       	mov	r25, r18
    1582:	99 0f       	add	r25, r25
    1584:	99 0f       	add	r25, r25
    1586:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    1588:	77 9b       	sbis	0x0e, 7	; 14
    158a:	fe cf       	rjmp	.-4      	; 0x1588 <_ZN6ST778910fillScreenEccc+0xc4>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    158c:	95 b3       	in	r25, 0x15	; 21
    158e:	94 60       	ori	r25, 0x04	; 4
    1590:	95 bb       	out	0x15, r25	; 21
		SPDR = data;
    1592:	93 2f       	mov	r25, r19
    1594:	99 0f       	add	r25, r25
    1596:	99 0f       	add	r25, r25
    1598:	9f b9       	out	0x0f, r25	; 15
		while(!(SPSR & (1 << SPIF)));
    159a:	77 9b       	sbis	0x0e, 7	; 14
    159c:	fe cf       	rjmp	.-4      	; 0x159a <_ZN6ST778910fillScreenEccc+0xd6>
    159e:	4f 5f       	subi	r20, 0xFF	; 255
    15a0:	5f 4f       	sbci	r21, 0xFF	; 255
    15a2:	6f 4f       	sbci	r22, 0xFF	; 255
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	da cf       	rjmp	.-76     	; 0x155c <_ZN6ST778910fillScreenEccc+0x98>
    15a8:	08 95       	ret

000015aa <_ZN6ST778911printStringEPcS0_S0_cccc>:
			sendData(blue << 2);
		}
	}

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
    15aa:	8f 92       	push	r8
    15ac:	9f 92       	push	r9
    15ae:	af 92       	push	r10
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	ef 92       	push	r14
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	5c 01       	movw	r10, r24
    15c0:	eb 01       	movw	r28, r22
		char counter = 0;
    15c2:	10 e0       	ldi	r17, 0x00	; 0
	
		while (string[counter] != '\0')
    15c4:	f5 01       	movw	r30, r10
    15c6:	e1 0f       	add	r30, r17
    15c8:	f1 1d       	adc	r31, r1
    15ca:	30 81       	ld	r19, Z
    15cc:	33 23       	and	r19, r19
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_ZN6ST778911printStringEPcS0_S0_cccc+0x28>
    15d0:	50 c1       	rjmp	.+672    	; 0x1872 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c8>
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	86 30       	cpi	r24, 0x06	; 6
    15d6:	08 f0       	brcs	.+2      	; 0x15da <_ZN6ST778911printStringEPcS0_S0_cccc+0x30>
    15d8:	4a c1       	rjmp	.+660    	; 0x186e <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c4>
    15da:	90 e0       	ldi	r25, 0x00	; 0
		{
			char mask;
			for (char y = 0; y < 8; y++)
    15dc:	98 30       	cpi	r25, 0x08	; 8
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <_ZN6ST778911printStringEPcS0_S0_cccc+0x38>
    15e0:	30 c1       	rjmp	.+608    	; 0x1842 <_ZN6ST778911printStringEPcS0_S0_cccc+0x298>
			{
				mask = 1;
				if(monocraft[letter - 32][i] & (mask << (7 - y)))
    15e2:	e3 2f       	mov	r30, r19
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	b0 97       	sbiw	r30, 0x20	; 32
    15e8:	bf 01       	movw	r22, r30
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	e6 0f       	add	r30, r22
    15f0:	f7 1f       	adc	r31, r23
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ef 55       	subi	r30, 0x5F	; 95
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	e8 0f       	add	r30, r24
    15fc:	f1 1d       	adc	r31, r1
    15fe:	a0 81       	ld	r26, Z
    1600:	e7 e0       	ldi	r30, 0x07	; 7
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	e9 1b       	sub	r30, r25
    1606:	f1 09       	sbc	r31, r1
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	4b 01       	movw	r8, r22
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <_ZN6ST778911printStringEPcS0_S0_cccc+0x6a>
    1610:	88 0c       	add	r8, r8
    1612:	99 1c       	adc	r9, r9
    1614:	ea 95       	dec	r30
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <_ZN6ST778911printStringEPcS0_S0_cccc+0x66>
    1618:	6a 2f       	mov	r22, r26
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	68 21       	and	r22, r8
    161e:	79 21       	and	r23, r9
    1620:	67 2b       	or	r22, r23
    1622:	09 f4       	brne	.+2      	; 0x1626 <_ZN6ST778911printStringEPcS0_S0_cccc+0x7c>
    1624:	8a c0       	rjmp	.+276    	; 0x173a <_ZN6ST778911printStringEPcS0_S0_cccc+0x190>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
    1626:	fa 01       	movw	r30, r20
    1628:	a0 81       	ld	r26, Z
    162a:	c9 9e       	mul	r12, r25
    162c:	a0 0d       	add	r26, r0
    162e:	11 24       	eor	r1, r1
    1630:	b8 81       	ld	r27, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    1632:	b1 3f       	cpi	r27, 0xF1	; 241
    1634:	08 f0       	brcs	.+2      	; 0x1638 <_ZN6ST778911printStringEPcS0_S0_cccc+0x8e>
    1636:	03 c1       	rjmp	.+518    	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    1638:	a1 3f       	cpi	r26, 0xF1	; 241
    163a:	08 f0       	brcs	.+2      	; 0x163e <_ZN6ST778911printStringEPcS0_S0_cccc+0x94>
    163c:	00 c1       	rjmp	.+512    	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    163e:	65 b3       	in	r22, 0x15	; 21
    1640:	6b 7f       	andi	r22, 0xFB	; 251
    1642:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1644:	6a e2       	ldi	r22, 0x2A	; 42
    1646:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    1648:	77 9b       	sbis	0x0e, 7	; 14
    164a:	fe cf       	rjmp	.-4      	; 0x1648 <_ZN6ST778911printStringEPcS0_S0_cccc+0x9e>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    164c:	eb 2f       	mov	r30, r27
    164e:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1650:	65 b3       	in	r22, 0x15	; 21
    1652:	64 60       	ori	r22, 0x04	; 4
    1654:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1656:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1658:	77 9b       	sbis	0x0e, 7	; 14
    165a:	fe cf       	rjmp	.-4      	; 0x1658 <_ZN6ST778911printStringEPcS0_S0_cccc+0xae>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    165c:	65 b3       	in	r22, 0x15	; 21
    165e:	64 60       	ori	r22, 0x04	; 4
    1660:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1662:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    1664:	77 9b       	sbis	0x0e, 7	; 14
    1666:	fe cf       	rjmp	.-4      	; 0x1664 <_ZN6ST778911printStringEPcS0_S0_cccc+0xba>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    1668:	6c 2d       	mov	r22, r12
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	e6 0f       	add	r30, r22
    166e:	f7 1f       	adc	r31, r23
    1670:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1672:	e5 b3       	in	r30, 0x15	; 21
    1674:	e4 60       	ori	r30, 0x04	; 4
    1676:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    1678:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    167a:	77 9b       	sbis	0x0e, 7	; 14
    167c:	fe cf       	rjmp	.-4      	; 0x167a <_ZN6ST778911printStringEPcS0_S0_cccc+0xd0>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    167e:	bc 0d       	add	r27, r12
    1680:	b1 50       	subi	r27, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1682:	e5 b3       	in	r30, 0x15	; 21
    1684:	e4 60       	ori	r30, 0x04	; 4
    1686:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    1688:	bf b9       	out	0x0f, r27	; 15
		while(!(SPSR & (1 << SPIF)));
    168a:	77 9b       	sbis	0x0e, 7	; 14
    168c:	fe cf       	rjmp	.-4      	; 0x168a <_ZN6ST778911printStringEPcS0_S0_cccc+0xe0>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    168e:	e5 b3       	in	r30, 0x15	; 21
    1690:	eb 7f       	andi	r30, 0xFB	; 251
    1692:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    1694:	eb e2       	ldi	r30, 0x2B	; 43
    1696:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    1698:	77 9b       	sbis	0x0e, 7	; 14
    169a:	fe cf       	rjmp	.-4      	; 0x1698 <_ZN6ST778911printStringEPcS0_S0_cccc+0xee>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    169c:	ea 2f       	mov	r30, r26
    169e:	f0 e0       	ldi	r31, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    16a0:	b5 b3       	in	r27, 0x15	; 21
    16a2:	b4 60       	ori	r27, 0x04	; 4
    16a4:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    16a6:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    16a8:	77 9b       	sbis	0x0e, 7	; 14
    16aa:	fe cf       	rjmp	.-4      	; 0x16a8 <_ZN6ST778911printStringEPcS0_S0_cccc+0xfe>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    16ac:	b5 b3       	in	r27, 0x15	; 21
    16ae:	b4 60       	ori	r27, 0x04	; 4
    16b0:	b5 bb       	out	0x15, r27	; 21
		SPDR = data;
    16b2:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    16b4:	77 9b       	sbis	0x0e, 7	; 14
    16b6:	fe cf       	rjmp	.-4      	; 0x16b4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x10a>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    16b8:	e6 0f       	add	r30, r22
    16ba:	f7 1f       	adc	r31, r23
    16bc:	31 97       	sbiw	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    16be:	e5 b3       	in	r30, 0x15	; 21
    16c0:	e4 60       	ori	r30, 0x04	; 4
    16c2:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    16c4:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    16c6:	77 9b       	sbis	0x0e, 7	; 14
    16c8:	fe cf       	rjmp	.-4      	; 0x16c6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x11c>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    16ca:	ac 0d       	add	r26, r12
    16cc:	a1 50       	subi	r26, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    16ce:	e5 b3       	in	r30, 0x15	; 21
    16d0:	e4 60       	ori	r30, 0x04	; 4
    16d2:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    16d4:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    16d6:	77 9b       	sbis	0x0e, 7	; 14
    16d8:	fe cf       	rjmp	.-4      	; 0x16d6 <_ZN6ST778911printStringEPcS0_S0_cccc+0x12c>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    16da:	e5 b3       	in	r30, 0x15	; 21
    16dc:	eb 7f       	andi	r30, 0xFB	; 251
    16de:	e5 bb       	out	0x15, r30	; 21
		SPDR = data;
    16e0:	ec e2       	ldi	r30, 0x2C	; 44
    16e2:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    16e4:	77 9b       	sbis	0x0e, 7	; 14
    16e6:	fe cf       	rjmp	.-4      	; 0x16e4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x13a>
    16e8:	e0 e0       	ldi	r30, 0x00	; 0
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    16ec:	66 9f       	mul	r22, r22
    16ee:	d0 01       	movw	r26, r0
    16f0:	67 9f       	mul	r22, r23
    16f2:	b0 0d       	add	r27, r0
    16f4:	b0 0d       	add	r27, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	ea 17       	cp	r30, r26
    16fa:	fb 07       	cpc	r31, r27
    16fc:	0c f0       	brlt	.+2      	; 0x1700 <_ZN6ST778911printStringEPcS0_S0_cccc+0x156>
    16fe:	9f c0       	rjmp	.+318    	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1700:	a5 b3       	in	r26, 0x15	; 21
    1702:	a4 60       	ori	r26, 0x04	; 4
    1704:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1706:	a2 2f       	mov	r26, r18
    1708:	aa 0f       	add	r26, r26
    170a:	aa 0f       	add	r26, r26
    170c:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    170e:	77 9b       	sbis	0x0e, 7	; 14
    1710:	fe cf       	rjmp	.-4      	; 0x170e <_ZN6ST778911printStringEPcS0_S0_cccc+0x164>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1712:	a5 b3       	in	r26, 0x15	; 21
    1714:	a4 60       	ori	r26, 0x04	; 4
    1716:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1718:	a0 2f       	mov	r26, r16
    171a:	aa 0f       	add	r26, r26
    171c:	aa 0f       	add	r26, r26
    171e:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    1720:	77 9b       	sbis	0x0e, 7	; 14
    1722:	fe cf       	rjmp	.-4      	; 0x1720 <_ZN6ST778911printStringEPcS0_S0_cccc+0x176>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1724:	a5 b3       	in	r26, 0x15	; 21
    1726:	a4 60       	ori	r26, 0x04	; 4
    1728:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    172a:	ae 2d       	mov	r26, r14
    172c:	aa 0f       	add	r26, r26
    172e:	aa 0f       	add	r26, r26
    1730:	af b9       	out	0x0f, r26	; 15
		while(!(SPSR & (1 << SPIF)));
    1732:	77 9b       	sbis	0x0e, 7	; 14
    1734:	fe cf       	rjmp	.-4      	; 0x1732 <_ZN6ST778911printStringEPcS0_S0_cccc+0x188>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1736:	31 96       	adiw	r30, 0x01	; 1
    1738:	d9 cf       	rjmp	.-78     	; 0x16ec <_ZN6ST778911printStringEPcS0_S0_cccc+0x142>
				{
					drawSquare(*xpos, *ypos + (y * size), red, green, blue, size);
				}
				else
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
    173a:	da 01       	movw	r26, r20
    173c:	ec 91       	ld	r30, X
    173e:	c9 9e       	mul	r12, r25
    1740:	e0 0d       	add	r30, r0
    1742:	11 24       	eor	r1, r1
    1744:	f8 81       	ld	r31, Y
	//  INLINE					Функции экрана ST7789
	//==============================================================================
		
	inline void drawSquare(char x, char y, char red, char green, char blue, char size)
	{
		if (x > 240 || y > 240 || x < 0 || y < 0)		// Проверка
    1746:	f1 3f       	cpi	r31, 0xF1	; 241
    1748:	08 f0       	brcs	.+2      	; 0x174c <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a2>
    174a:	79 c0       	rjmp	.+242    	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
    174c:	e1 3f       	cpi	r30, 0xF1	; 241
    174e:	08 f0       	brcs	.+2      	; 0x1752 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a8>
    1750:	76 c0       	rjmp	.+236    	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
		while(!(SPSR & (1 << SPIF)));
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    1752:	65 b3       	in	r22, 0x15	; 21
    1754:	6b 7f       	andi	r22, 0xFB	; 251
    1756:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1758:	6a e2       	ldi	r22, 0x2A	; 42
    175a:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    175c:	77 9b       	sbis	0x0e, 7	; 14
    175e:	fe cf       	rjmp	.-4      	; 0x175c <_ZN6ST778911printStringEPcS0_S0_cccc+0x1b2>
		{
			return;
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
    1760:	6f 2f       	mov	r22, r31
    1762:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1764:	a5 b3       	in	r26, 0x15	; 21
    1766:	a4 60       	ori	r26, 0x04	; 4
    1768:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    176a:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    176c:	77 9b       	sbis	0x0e, 7	; 14
    176e:	fe cf       	rjmp	.-4      	; 0x176c <_ZN6ST778911printStringEPcS0_S0_cccc+0x1c2>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1770:	a5 b3       	in	r26, 0x15	; 21
    1772:	a4 60       	ori	r26, 0x04	; 4
    1774:	a5 bb       	out	0x15, r26	; 21
		SPDR = data;
    1776:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    1778:	77 9b       	sbis	0x0e, 7	; 14
    177a:	fe cf       	rjmp	.-4      	; 0x1778 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1ce>
		}

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
    177c:	ac 2d       	mov	r26, r12
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	6a 0f       	add	r22, r26
    1782:	7b 1f       	adc	r23, r27
    1784:	61 50       	subi	r22, 0x01	; 1
    1786:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1788:	65 b3       	in	r22, 0x15	; 21
    178a:	64 60       	ori	r22, 0x04	; 4
    178c:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    178e:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    1790:	77 9b       	sbis	0x0e, 7	; 14
    1792:	fe cf       	rjmp	.-4      	; 0x1790 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1e6>

		sendCommand(0x2A);								// Задание диапазона в котором рисовать квадрат
		sendData(x >> 8);
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);
    1794:	fc 0d       	add	r31, r12
    1796:	f1 50       	subi	r31, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1798:	65 b3       	in	r22, 0x15	; 21
    179a:	64 60       	ori	r22, 0x04	; 4
    179c:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    179e:	ff b9       	out	0x0f, r31	; 15
		while(!(SPSR & (1 << SPIF)));
    17a0:	77 9b       	sbis	0x0e, 7	; 14
    17a2:	fe cf       	rjmp	.-4      	; 0x17a0 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1f6>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    17a4:	65 b3       	in	r22, 0x15	; 21
    17a6:	6b 7f       	andi	r22, 0xFB	; 251
    17a8:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    17aa:	6b e2       	ldi	r22, 0x2B	; 43
    17ac:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    17ae:	77 9b       	sbis	0x0e, 7	; 14
    17b0:	fe cf       	rjmp	.-4      	; 0x17ae <_ZN6ST778911printStringEPcS0_S0_cccc+0x204>
		sendData(x);
		sendData((x + size - 1) >> 8);
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
    17b2:	6e 2f       	mov	r22, r30
    17b4:	70 e0       	ldi	r23, 0x00	; 0
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    17b6:	f5 b3       	in	r31, 0x15	; 21
    17b8:	f4 60       	ori	r31, 0x04	; 4
    17ba:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    17bc:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    17be:	77 9b       	sbis	0x0e, 7	; 14
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <_ZN6ST778911printStringEPcS0_S0_cccc+0x214>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    17c2:	f5 b3       	in	r31, 0x15	; 21
    17c4:	f4 60       	ori	r31, 0x04	; 4
    17c6:	f5 bb       	out	0x15, r31	; 21
		SPDR = data;
    17c8:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    17ca:	77 9b       	sbis	0x0e, 7	; 14
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <_ZN6ST778911printStringEPcS0_S0_cccc+0x220>
		sendData(x + size - 1);

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
    17ce:	6a 0f       	add	r22, r26
    17d0:	7b 1f       	adc	r23, r27
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	71 09       	sbc	r23, r1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    17d6:	65 b3       	in	r22, 0x15	; 21
    17d8:	64 60       	ori	r22, 0x04	; 4
    17da:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    17dc:	7f b9       	out	0x0f, r23	; 15
		while(!(SPSR & (1 << SPIF)));
    17de:	77 9b       	sbis	0x0e, 7	; 14
    17e0:	fe cf       	rjmp	.-4      	; 0x17de <_ZN6ST778911printStringEPcS0_S0_cccc+0x234>

		sendCommand(0x2B);								// Задание диапазона в котором рисовать квадрат
		sendData(y >> 8);
		sendData(y);
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);
    17e2:	ec 0d       	add	r30, r12
    17e4:	e1 50       	subi	r30, 0x01	; 1
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    17e6:	65 b3       	in	r22, 0x15	; 21
    17e8:	64 60       	ori	r22, 0x04	; 4
    17ea:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    17ec:	ef b9       	out	0x0f, r30	; 15
		while(!(SPSR & (1 << SPIF)));
    17ee:	77 9b       	sbis	0x0e, 7	; 14
    17f0:	fe cf       	rjmp	.-4      	; 0x17ee <_ZN6ST778911printStringEPcS0_S0_cccc+0x244>
	}

	inline void sendCommand(char data)
	{
		DC_LOW;
    17f2:	65 b3       	in	r22, 0x15	; 21
    17f4:	6b 7f       	andi	r22, 0xFB	; 251
    17f6:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    17f8:	6c e2       	ldi	r22, 0x2C	; 44
    17fa:	6f b9       	out	0x0f, r22	; 15
		while(!(SPSR & (1 << SPIF)));
    17fc:	77 9b       	sbis	0x0e, 7	; 14
    17fe:	fe cf       	rjmp	.-4      	; 0x17fc <_ZN6ST778911printStringEPcS0_S0_cccc+0x252>
    1800:	e0 e0       	ldi	r30, 0x00	; 0
    1802:	f0 e0       	ldi	r31, 0x00	; 0
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    1804:	aa 9f       	mul	r26, r26
    1806:	b0 01       	movw	r22, r0
    1808:	ab 9f       	mul	r26, r27
    180a:	70 0d       	add	r23, r0
    180c:	70 0d       	add	r23, r0
    180e:	11 24       	eor	r1, r1
    1810:	e6 17       	cp	r30, r22
    1812:	f7 07       	cpc	r31, r23
    1814:	a4 f4       	brge	.+40     	; 0x183e <_ZN6ST778911printStringEPcS0_S0_cccc+0x294>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1816:	65 b3       	in	r22, 0x15	; 21
    1818:	64 60       	ori	r22, 0x04	; 4
    181a:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    181c:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    181e:	77 9b       	sbis	0x0e, 7	; 14
    1820:	fe cf       	rjmp	.-4      	; 0x181e <_ZN6ST778911printStringEPcS0_S0_cccc+0x274>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    1822:	65 b3       	in	r22, 0x15	; 21
    1824:	64 60       	ori	r22, 0x04	; 4
    1826:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1828:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    182a:	77 9b       	sbis	0x0e, 7	; 14
    182c:	fe cf       	rjmp	.-4      	; 0x182a <_ZN6ST778911printStringEPcS0_S0_cccc+0x280>
	//	INLINE					Функции протокола SPI
	//==============================================================================
			
	inline void sendData(char data)
	{
		DC_HIGH;
    182e:	65 b3       	in	r22, 0x15	; 21
    1830:	64 60       	ori	r22, 0x04	; 4
    1832:	65 bb       	out	0x15, r22	; 21
		SPDR = data;
    1834:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1 << SPIF)));
    1836:	77 9b       	sbis	0x0e, 7	; 14
    1838:	fe cf       	rjmp	.-4      	; 0x1836 <_ZN6ST778911printStringEPcS0_S0_cccc+0x28c>
		sendData((y + size - 1) >> 8);
		sendData(y + size - 1);

		sendCommand(0x2C);
				
		for(int i = 0; i < (int)(size*size); i++)		// Отрисовка
    183a:	31 96       	adiw	r30, 0x01	; 1
    183c:	e3 cf       	rjmp	.-58     	; 0x1804 <_ZN6ST778911printStringEPcS0_S0_cccc+0x25a>
	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
		{
			char mask;
			for (char y = 0; y < 8; y++)
    183e:	9f 5f       	subi	r25, 0xFF	; 255
    1840:	cd ce       	rjmp	.-614    	; 0x15dc <_ZN6ST778911printStringEPcS0_S0_cccc+0x32>
				{
					drawSquare(*xpos, *ypos + (y * size), 0, 0, 0, size);
				}
			}
					
			*xpos += size;
    1842:	98 81       	ld	r25, Y
    1844:	9c 0d       	add	r25, r12
    1846:	98 83       	st	Y, r25
					
			if (*xpos >= 240)
    1848:	90 3f       	cpi	r25, 0xF0	; 240
    184a:	48 f0       	brcs	.+18     	; 0x185e <_ZN6ST778911printStringEPcS0_S0_cccc+0x2b4>
			{
				*xpos = 0;
    184c:	18 82       	st	Y, r1
				*ypos += 8 * size;
    184e:	fa 01       	movw	r30, r20
    1850:	60 81       	ld	r22, Z
    1852:	9c 2d       	mov	r25, r12
    1854:	99 0f       	add	r25, r25
    1856:	99 0f       	add	r25, r25
    1858:	99 0f       	add	r25, r25
    185a:	96 0f       	add	r25, r22
    185c:	90 83       	st	Z, r25
			}
					
			if (*ypos >= 240)
    185e:	da 01       	movw	r26, r20
    1860:	9c 91       	ld	r25, X
    1862:	90 3f       	cpi	r25, 0xF0	; 240
    1864:	10 f0       	brcs	.+4      	; 0x186a <_ZN6ST778911printStringEPcS0_S0_cccc+0x2c0>
			{
				*xpos = 0;
    1866:	18 82       	st	Y, r1
				*ypos = 0;
    1868:	1c 92       	st	X, r1
		}
	}

	inline void printChar(char letter, char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		for(char i = 0; i < 6; i++)
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	b3 ce       	rjmp	.-666    	; 0x15d4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x2a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
    186e:	1f 5f       	subi	r17, 0xFF	; 255

	void printString(char string[], char* xpos, char* ypos, char red, char green, char blue, char size)
	{
		char counter = 0;
	
		while (string[counter] != '\0')
    1870:	a9 ce       	rjmp	.-686    	; 0x15c4 <_ZN6ST778911printStringEPcS0_S0_cccc+0x1a>
		{
			printChar(string[counter], xpos, ypos, red, green, blue, size);
			counter++;
		}
	}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ef 90       	pop	r14
    187c:	cf 90       	pop	r12
    187e:	bf 90       	pop	r11
    1880:	af 90       	pop	r10
    1882:	9f 90       	pop	r9
    1884:	8f 90       	pop	r8
    1886:	08 95       	ret

00001888 <__subsf3>:
    1888:	50 58       	subi	r21, 0x80	; 128

0000188a <__addsf3>:
    188a:	bb 27       	eor	r27, r27
    188c:	aa 27       	eor	r26, r26
    188e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__addsf3x>
    1892:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>
    1896:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_pscA>
    189a:	38 f0       	brcs	.+14     	; 0x18aa <__addsf3+0x20>
    189c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fp_pscB>
    18a0:	20 f0       	brcs	.+8      	; 0x18aa <__addsf3+0x20>
    18a2:	39 f4       	brne	.+14     	; 0x18b2 <__addsf3+0x28>
    18a4:	9f 3f       	cpi	r25, 0xFF	; 255
    18a6:	19 f4       	brne	.+6      	; 0x18ae <__addsf3+0x24>
    18a8:	26 f4       	brtc	.+8      	; 0x18b2 <__addsf3+0x28>
    18aa:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>
    18ae:	0e f4       	brtc	.+2      	; 0x18b2 <__addsf3+0x28>
    18b0:	e0 95       	com	r30
    18b2:	e7 fb       	bst	r30, 7
    18b4:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>

000018b8 <__addsf3x>:
    18b8:	e9 2f       	mov	r30, r25
    18ba:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_split3>
    18be:	58 f3       	brcs	.-42     	; 0x1896 <__addsf3+0xc>
    18c0:	ba 17       	cp	r27, r26
    18c2:	62 07       	cpc	r22, r18
    18c4:	73 07       	cpc	r23, r19
    18c6:	84 07       	cpc	r24, r20
    18c8:	95 07       	cpc	r25, r21
    18ca:	20 f0       	brcs	.+8      	; 0x18d4 <__addsf3x+0x1c>
    18cc:	79 f4       	brne	.+30     	; 0x18ec <__addsf3x+0x34>
    18ce:	a6 f5       	brtc	.+104    	; 0x1938 <__addsf3x+0x80>
    18d0:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_zero>
    18d4:	0e f4       	brtc	.+2      	; 0x18d8 <__addsf3x+0x20>
    18d6:	e0 95       	com	r30
    18d8:	0b 2e       	mov	r0, r27
    18da:	ba 2f       	mov	r27, r26
    18dc:	a0 2d       	mov	r26, r0
    18de:	0b 01       	movw	r0, r22
    18e0:	b9 01       	movw	r22, r18
    18e2:	90 01       	movw	r18, r0
    18e4:	0c 01       	movw	r0, r24
    18e6:	ca 01       	movw	r24, r20
    18e8:	a0 01       	movw	r20, r0
    18ea:	11 24       	eor	r1, r1
    18ec:	ff 27       	eor	r31, r31
    18ee:	59 1b       	sub	r21, r25
    18f0:	99 f0       	breq	.+38     	; 0x1918 <__addsf3x+0x60>
    18f2:	59 3f       	cpi	r21, 0xF9	; 249
    18f4:	50 f4       	brcc	.+20     	; 0x190a <__addsf3x+0x52>
    18f6:	50 3e       	cpi	r21, 0xE0	; 224
    18f8:	68 f1       	brcs	.+90     	; 0x1954 <__addsf3x+0x9c>
    18fa:	1a 16       	cp	r1, r26
    18fc:	f0 40       	sbci	r31, 0x00	; 0
    18fe:	a2 2f       	mov	r26, r18
    1900:	23 2f       	mov	r18, r19
    1902:	34 2f       	mov	r19, r20
    1904:	44 27       	eor	r20, r20
    1906:	58 5f       	subi	r21, 0xF8	; 248
    1908:	f3 cf       	rjmp	.-26     	; 0x18f0 <__addsf3x+0x38>
    190a:	46 95       	lsr	r20
    190c:	37 95       	ror	r19
    190e:	27 95       	ror	r18
    1910:	a7 95       	ror	r26
    1912:	f0 40       	sbci	r31, 0x00	; 0
    1914:	53 95       	inc	r21
    1916:	c9 f7       	brne	.-14     	; 0x190a <__addsf3x+0x52>
    1918:	7e f4       	brtc	.+30     	; 0x1938 <__addsf3x+0x80>
    191a:	1f 16       	cp	r1, r31
    191c:	ba 0b       	sbc	r27, r26
    191e:	62 0b       	sbc	r22, r18
    1920:	73 0b       	sbc	r23, r19
    1922:	84 0b       	sbc	r24, r20
    1924:	ba f0       	brmi	.+46     	; 0x1954 <__addsf3x+0x9c>
    1926:	91 50       	subi	r25, 0x01	; 1
    1928:	a1 f0       	breq	.+40     	; 0x1952 <__addsf3x+0x9a>
    192a:	ff 0f       	add	r31, r31
    192c:	bb 1f       	adc	r27, r27
    192e:	66 1f       	adc	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	88 1f       	adc	r24, r24
    1934:	c2 f7       	brpl	.-16     	; 0x1926 <__addsf3x+0x6e>
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <__addsf3x+0x9c>
    1938:	ba 0f       	add	r27, r26
    193a:	62 1f       	adc	r22, r18
    193c:	73 1f       	adc	r23, r19
    193e:	84 1f       	adc	r24, r20
    1940:	48 f4       	brcc	.+18     	; 0x1954 <__addsf3x+0x9c>
    1942:	87 95       	ror	r24
    1944:	77 95       	ror	r23
    1946:	67 95       	ror	r22
    1948:	b7 95       	ror	r27
    194a:	f7 95       	ror	r31
    194c:	9e 3f       	cpi	r25, 0xFE	; 254
    194e:	08 f0       	brcs	.+2      	; 0x1952 <__addsf3x+0x9a>
    1950:	b0 cf       	rjmp	.-160    	; 0x18b2 <__addsf3+0x28>
    1952:	93 95       	inc	r25
    1954:	88 0f       	add	r24, r24
    1956:	08 f0       	brcs	.+2      	; 0x195a <__addsf3x+0xa2>
    1958:	99 27       	eor	r25, r25
    195a:	ee 0f       	add	r30, r30
    195c:	97 95       	ror	r25
    195e:	87 95       	ror	r24
    1960:	08 95       	ret

00001962 <__cmpsf2>:
    1962:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fp_cmp>
    1966:	08 f4       	brcc	.+2      	; 0x196a <__cmpsf2+0x8>
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	08 95       	ret

0000196c <__divsf3>:
    196c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__divsf3x>
    1970:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>
    1974:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fp_pscB>
    1978:	58 f0       	brcs	.+22     	; 0x1990 <__divsf3+0x24>
    197a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_pscA>
    197e:	40 f0       	brcs	.+16     	; 0x1990 <__divsf3+0x24>
    1980:	29 f4       	brne	.+10     	; 0x198c <__divsf3+0x20>
    1982:	5f 3f       	cpi	r21, 0xFF	; 255
    1984:	29 f0       	breq	.+10     	; 0x1990 <__divsf3+0x24>
    1986:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    198a:	51 11       	cpse	r21, r1
    198c:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1990:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>

00001994 <__divsf3x>:
    1994:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_split3>
    1998:	68 f3       	brcs	.-38     	; 0x1974 <__divsf3+0x8>

0000199a <__divsf3_pse>:
    199a:	99 23       	and	r25, r25
    199c:	b1 f3       	breq	.-20     	; 0x198a <__divsf3+0x1e>
    199e:	55 23       	and	r21, r21
    19a0:	91 f3       	breq	.-28     	; 0x1986 <__divsf3+0x1a>
    19a2:	95 1b       	sub	r25, r21
    19a4:	55 0b       	sbc	r21, r21
    19a6:	bb 27       	eor	r27, r27
    19a8:	aa 27       	eor	r26, r26
    19aa:	62 17       	cp	r22, r18
    19ac:	73 07       	cpc	r23, r19
    19ae:	84 07       	cpc	r24, r20
    19b0:	38 f0       	brcs	.+14     	; 0x19c0 <__divsf3_pse+0x26>
    19b2:	9f 5f       	subi	r25, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	44 1f       	adc	r20, r20
    19bc:	aa 1f       	adc	r26, r26
    19be:	a9 f3       	breq	.-22     	; 0x19aa <__divsf3_pse+0x10>
    19c0:	35 d0       	rcall	.+106    	; 0x1a2c <__divsf3_pse+0x92>
    19c2:	0e 2e       	mov	r0, r30
    19c4:	3a f0       	brmi	.+14     	; 0x19d4 <__divsf3_pse+0x3a>
    19c6:	e0 e8       	ldi	r30, 0x80	; 128
    19c8:	32 d0       	rcall	.+100    	; 0x1a2e <__divsf3_pse+0x94>
    19ca:	91 50       	subi	r25, 0x01	; 1
    19cc:	50 40       	sbci	r21, 0x00	; 0
    19ce:	e6 95       	lsr	r30
    19d0:	00 1c       	adc	r0, r0
    19d2:	ca f7       	brpl	.-14     	; 0x19c6 <__divsf3_pse+0x2c>
    19d4:	2b d0       	rcall	.+86     	; 0x1a2c <__divsf3_pse+0x92>
    19d6:	fe 2f       	mov	r31, r30
    19d8:	29 d0       	rcall	.+82     	; 0x1a2c <__divsf3_pse+0x92>
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	88 1f       	adc	r24, r24
    19e0:	bb 1f       	adc	r27, r27
    19e2:	26 17       	cp	r18, r22
    19e4:	37 07       	cpc	r19, r23
    19e6:	48 07       	cpc	r20, r24
    19e8:	ab 07       	cpc	r26, r27
    19ea:	b0 e8       	ldi	r27, 0x80	; 128
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__divsf3_pse+0x56>
    19ee:	bb 0b       	sbc	r27, r27
    19f0:	80 2d       	mov	r24, r0
    19f2:	bf 01       	movw	r22, r30
    19f4:	ff 27       	eor	r31, r31
    19f6:	93 58       	subi	r25, 0x83	; 131
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	3a f0       	brmi	.+14     	; 0x1a0a <__divsf3_pse+0x70>
    19fc:	9e 3f       	cpi	r25, 0xFE	; 254
    19fe:	51 05       	cpc	r21, r1
    1a00:	78 f0       	brcs	.+30     	; 0x1a20 <__divsf3_pse+0x86>
    1a02:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1a06:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0c:	e4 f3       	brlt	.-8      	; 0x1a06 <__divsf3_pse+0x6c>
    1a0e:	98 3e       	cpi	r25, 0xE8	; 232
    1a10:	d4 f3       	brlt	.-12     	; 0x1a06 <__divsf3_pse+0x6c>
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	f7 95       	ror	r31
    1a1c:	9f 5f       	subi	r25, 0xFF	; 255
    1a1e:	c9 f7       	brne	.-14     	; 0x1a12 <__divsf3_pse+0x78>
    1a20:	88 0f       	add	r24, r24
    1a22:	91 1d       	adc	r25, r1
    1a24:	96 95       	lsr	r25
    1a26:	87 95       	ror	r24
    1a28:	97 f9       	bld	r25, 7
    1a2a:	08 95       	ret
    1a2c:	e1 e0       	ldi	r30, 0x01	; 1
    1a2e:	66 0f       	add	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	88 1f       	adc	r24, r24
    1a34:	bb 1f       	adc	r27, r27
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	ba 07       	cpc	r27, r26
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__divsf3_pse+0xae>
    1a40:	62 1b       	sub	r22, r18
    1a42:	73 0b       	sbc	r23, r19
    1a44:	84 0b       	sbc	r24, r20
    1a46:	ba 0b       	sbc	r27, r26
    1a48:	ee 1f       	adc	r30, r30
    1a4a:	88 f7       	brcc	.-30     	; 0x1a2e <__divsf3_pse+0x94>
    1a4c:	e0 95       	com	r30
    1a4e:	08 95       	ret

00001a50 <__fixsfsi>:
    1a50:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fixunssfsi>
    1a54:	68 94       	set
    1a56:	b1 11       	cpse	r27, r1
    1a58:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1a5c:	08 95       	ret

00001a5e <__fixunssfsi>:
    1a5e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_splitA>
    1a62:	88 f0       	brcs	.+34     	; 0x1a86 <__fixunssfsi+0x28>
    1a64:	9f 57       	subi	r25, 0x7F	; 127
    1a66:	98 f0       	brcs	.+38     	; 0x1a8e <__fixunssfsi+0x30>
    1a68:	b9 2f       	mov	r27, r25
    1a6a:	99 27       	eor	r25, r25
    1a6c:	b7 51       	subi	r27, 0x17	; 23
    1a6e:	b0 f0       	brcs	.+44     	; 0x1a9c <__fixunssfsi+0x3e>
    1a70:	e1 f0       	breq	.+56     	; 0x1aaa <__fixunssfsi+0x4c>
    1a72:	66 0f       	add	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	88 1f       	adc	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	1a f0       	brmi	.+6      	; 0x1a82 <__fixunssfsi+0x24>
    1a7c:	ba 95       	dec	r27
    1a7e:	c9 f7       	brne	.-14     	; 0x1a72 <__fixunssfsi+0x14>
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <__fixunssfsi+0x4c>
    1a82:	b1 30       	cpi	r27, 0x01	; 1
    1a84:	91 f0       	breq	.+36     	; 0x1aaa <__fixunssfsi+0x4c>
    1a86:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__fp_zero>
    1a8a:	b1 e0       	ldi	r27, 0x01	; 1
    1a8c:	08 95       	ret
    1a8e:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_zero>
    1a92:	67 2f       	mov	r22, r23
    1a94:	78 2f       	mov	r23, r24
    1a96:	88 27       	eor	r24, r24
    1a98:	b8 5f       	subi	r27, 0xF8	; 248
    1a9a:	39 f0       	breq	.+14     	; 0x1aaa <__fixunssfsi+0x4c>
    1a9c:	b9 3f       	cpi	r27, 0xF9	; 249
    1a9e:	cc f3       	brlt	.-14     	; 0x1a92 <__fixunssfsi+0x34>
    1aa0:	86 95       	lsr	r24
    1aa2:	77 95       	ror	r23
    1aa4:	67 95       	ror	r22
    1aa6:	b3 95       	inc	r27
    1aa8:	d9 f7       	brne	.-10     	; 0x1aa0 <__fixunssfsi+0x42>
    1aaa:	3e f4       	brtc	.+14     	; 0x1aba <__fixunssfsi+0x5c>
    1aac:	90 95       	com	r25
    1aae:	80 95       	com	r24
    1ab0:	70 95       	com	r23
    1ab2:	61 95       	neg	r22
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	08 95       	ret

00001abc <__floatunsisf>:
    1abc:	e8 94       	clt
    1abe:	09 c0       	rjmp	.+18     	; 0x1ad2 <__floatsisf+0x12>

00001ac0 <__floatsisf>:
    1ac0:	97 fb       	bst	r25, 7
    1ac2:	3e f4       	brtc	.+14     	; 0x1ad2 <__floatsisf+0x12>
    1ac4:	90 95       	com	r25
    1ac6:	80 95       	com	r24
    1ac8:	70 95       	com	r23
    1aca:	61 95       	neg	r22
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	99 23       	and	r25, r25
    1ad4:	a9 f0       	breq	.+42     	; 0x1b00 <__floatsisf+0x40>
    1ad6:	f9 2f       	mov	r31, r25
    1ad8:	96 e9       	ldi	r25, 0x96	; 150
    1ada:	bb 27       	eor	r27, r27
    1adc:	93 95       	inc	r25
    1ade:	f6 95       	lsr	r31
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	f1 11       	cpse	r31, r1
    1aea:	f8 cf       	rjmp	.-16     	; 0x1adc <__floatsisf+0x1c>
    1aec:	fa f4       	brpl	.+62     	; 0x1b2c <__floatsisf+0x6c>
    1aee:	bb 0f       	add	r27, r27
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <__floatsisf+0x36>
    1af2:	60 ff       	sbrs	r22, 0
    1af4:	1b c0       	rjmp	.+54     	; 0x1b2c <__floatsisf+0x6c>
    1af6:	6f 5f       	subi	r22, 0xFF	; 255
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	16 c0       	rjmp	.+44     	; 0x1b2c <__floatsisf+0x6c>
    1b00:	88 23       	and	r24, r24
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <__floatsisf+0x48>
    1b04:	96 e9       	ldi	r25, 0x96	; 150
    1b06:	11 c0       	rjmp	.+34     	; 0x1b2a <__floatsisf+0x6a>
    1b08:	77 23       	and	r23, r23
    1b0a:	21 f0       	breq	.+8      	; 0x1b14 <__floatsisf+0x54>
    1b0c:	9e e8       	ldi	r25, 0x8E	; 142
    1b0e:	87 2f       	mov	r24, r23
    1b10:	76 2f       	mov	r23, r22
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <__floatsisf+0x5e>
    1b14:	66 23       	and	r22, r22
    1b16:	71 f0       	breq	.+28     	; 0x1b34 <__floatsisf+0x74>
    1b18:	96 e8       	ldi	r25, 0x86	; 134
    1b1a:	86 2f       	mov	r24, r22
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	2a f0       	brmi	.+10     	; 0x1b2c <__floatsisf+0x6c>
    1b22:	9a 95       	dec	r25
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	da f7       	brpl	.-10     	; 0x1b22 <__floatsisf+0x62>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	96 95       	lsr	r25
    1b30:	87 95       	ror	r24
    1b32:	97 f9       	bld	r25, 7
    1b34:	08 95       	ret

00001b36 <__fp_cmp>:
    1b36:	99 0f       	add	r25, r25
    1b38:	00 08       	sbc	r0, r0
    1b3a:	55 0f       	add	r21, r21
    1b3c:	aa 0b       	sbc	r26, r26
    1b3e:	e0 e8       	ldi	r30, 0x80	; 128
    1b40:	fe ef       	ldi	r31, 0xFE	; 254
    1b42:	16 16       	cp	r1, r22
    1b44:	17 06       	cpc	r1, r23
    1b46:	e8 07       	cpc	r30, r24
    1b48:	f9 07       	cpc	r31, r25
    1b4a:	c0 f0       	brcs	.+48     	; 0x1b7c <__fp_cmp+0x46>
    1b4c:	12 16       	cp	r1, r18
    1b4e:	13 06       	cpc	r1, r19
    1b50:	e4 07       	cpc	r30, r20
    1b52:	f5 07       	cpc	r31, r21
    1b54:	98 f0       	brcs	.+38     	; 0x1b7c <__fp_cmp+0x46>
    1b56:	62 1b       	sub	r22, r18
    1b58:	73 0b       	sbc	r23, r19
    1b5a:	84 0b       	sbc	r24, r20
    1b5c:	95 0b       	sbc	r25, r21
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <__fp_cmp+0x38>
    1b60:	0a 26       	eor	r0, r26
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <__fp_cmp+0x46>
    1b64:	23 2b       	or	r18, r19
    1b66:	24 2b       	or	r18, r20
    1b68:	25 2b       	or	r18, r21
    1b6a:	21 f4       	brne	.+8      	; 0x1b74 <__fp_cmp+0x3e>
    1b6c:	08 95       	ret
    1b6e:	0a 26       	eor	r0, r26
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <__fp_cmp+0x3e>
    1b72:	a1 40       	sbci	r26, 0x01	; 1
    1b74:	a6 95       	lsr	r26
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	81 1d       	adc	r24, r1
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	08 95       	ret

00001b7e <__fp_inf>:
    1b7e:	97 f9       	bld	r25, 7
    1b80:	9f 67       	ori	r25, 0x7F	; 127
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	08 95       	ret

00001b8a <__fp_nan>:
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	80 ec       	ldi	r24, 0xC0	; 192
    1b8e:	08 95       	ret

00001b90 <__fp_pscA>:
    1b90:	00 24       	eor	r0, r0
    1b92:	0a 94       	dec	r0
    1b94:	16 16       	cp	r1, r22
    1b96:	17 06       	cpc	r1, r23
    1b98:	18 06       	cpc	r1, r24
    1b9a:	09 06       	cpc	r0, r25
    1b9c:	08 95       	ret

00001b9e <__fp_pscB>:
    1b9e:	00 24       	eor	r0, r0
    1ba0:	0a 94       	dec	r0
    1ba2:	12 16       	cp	r1, r18
    1ba4:	13 06       	cpc	r1, r19
    1ba6:	14 06       	cpc	r1, r20
    1ba8:	05 06       	cpc	r0, r21
    1baa:	08 95       	ret

00001bac <__fp_round>:
    1bac:	09 2e       	mov	r0, r25
    1bae:	03 94       	inc	r0
    1bb0:	00 0c       	add	r0, r0
    1bb2:	11 f4       	brne	.+4      	; 0x1bb8 <__fp_round+0xc>
    1bb4:	88 23       	and	r24, r24
    1bb6:	52 f0       	brmi	.+20     	; 0x1bcc <__fp_round+0x20>
    1bb8:	bb 0f       	add	r27, r27
    1bba:	40 f4       	brcc	.+16     	; 0x1bcc <__fp_round+0x20>
    1bbc:	bf 2b       	or	r27, r31
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <__fp_round+0x18>
    1bc0:	60 ff       	sbrs	r22, 0
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <__fp_round+0x20>
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	08 95       	ret

00001bce <__fp_split3>:
    1bce:	57 fd       	sbrc	r21, 7
    1bd0:	90 58       	subi	r25, 0x80	; 128
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	59 f0       	breq	.+22     	; 0x1bee <__fp_splitA+0x10>
    1bd8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bda:	71 f0       	breq	.+28     	; 0x1bf8 <__fp_splitA+0x1a>
    1bdc:	47 95       	ror	r20

00001bde <__fp_splitA>:
    1bde:	88 0f       	add	r24, r24
    1be0:	97 fb       	bst	r25, 7
    1be2:	99 1f       	adc	r25, r25
    1be4:	61 f0       	breq	.+24     	; 0x1bfe <__fp_splitA+0x20>
    1be6:	9f 3f       	cpi	r25, 0xFF	; 255
    1be8:	79 f0       	breq	.+30     	; 0x1c08 <__fp_splitA+0x2a>
    1bea:	87 95       	ror	r24
    1bec:	08 95       	ret
    1bee:	12 16       	cp	r1, r18
    1bf0:	13 06       	cpc	r1, r19
    1bf2:	14 06       	cpc	r1, r20
    1bf4:	55 1f       	adc	r21, r21
    1bf6:	f2 cf       	rjmp	.-28     	; 0x1bdc <__fp_split3+0xe>
    1bf8:	46 95       	lsr	r20
    1bfa:	f1 df       	rcall	.-30     	; 0x1bde <__fp_splitA>
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <__fp_splitA+0x30>
    1bfe:	16 16       	cp	r1, r22
    1c00:	17 06       	cpc	r1, r23
    1c02:	18 06       	cpc	r1, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	f1 cf       	rjmp	.-30     	; 0x1bea <__fp_splitA+0xc>
    1c08:	86 95       	lsr	r24
    1c0a:	71 05       	cpc	r23, r1
    1c0c:	61 05       	cpc	r22, r1
    1c0e:	08 94       	sec
    1c10:	08 95       	ret

00001c12 <__fp_zero>:
    1c12:	e8 94       	clt

00001c14 <__fp_szero>:
    1c14:	bb 27       	eor	r27, r27
    1c16:	66 27       	eor	r22, r22
    1c18:	77 27       	eor	r23, r23
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <__mulsf3>:
    1c20:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3x>
    1c24:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>
    1c28:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <__fp_pscA>
    1c2c:	38 f0       	brcs	.+14     	; 0x1c3c <__mulsf3+0x1c>
    1c2e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__fp_pscB>
    1c32:	20 f0       	brcs	.+8      	; 0x1c3c <__mulsf3+0x1c>
    1c34:	95 23       	and	r25, r21
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <__mulsf3+0x1c>
    1c38:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1c3c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>
    1c40:	11 24       	eor	r1, r1
    1c42:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>

00001c46 <__mulsf3x>:
    1c46:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__fp_split3>
    1c4a:	70 f3       	brcs	.-36     	; 0x1c28 <__mulsf3+0x8>

00001c4c <__mulsf3_pse>:
    1c4c:	95 9f       	mul	r25, r21
    1c4e:	c1 f3       	breq	.-16     	; 0x1c40 <__mulsf3+0x20>
    1c50:	95 0f       	add	r25, r21
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	55 1f       	adc	r21, r21
    1c56:	62 9f       	mul	r22, r18
    1c58:	f0 01       	movw	r30, r0
    1c5a:	72 9f       	mul	r23, r18
    1c5c:	bb 27       	eor	r27, r27
    1c5e:	f0 0d       	add	r31, r0
    1c60:	b1 1d       	adc	r27, r1
    1c62:	63 9f       	mul	r22, r19
    1c64:	aa 27       	eor	r26, r26
    1c66:	f0 0d       	add	r31, r0
    1c68:	b1 1d       	adc	r27, r1
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	64 9f       	mul	r22, r20
    1c6e:	66 27       	eor	r22, r22
    1c70:	b0 0d       	add	r27, r0
    1c72:	a1 1d       	adc	r26, r1
    1c74:	66 1f       	adc	r22, r22
    1c76:	82 9f       	mul	r24, r18
    1c78:	22 27       	eor	r18, r18
    1c7a:	b0 0d       	add	r27, r0
    1c7c:	a1 1d       	adc	r26, r1
    1c7e:	62 1f       	adc	r22, r18
    1c80:	73 9f       	mul	r23, r19
    1c82:	b0 0d       	add	r27, r0
    1c84:	a1 1d       	adc	r26, r1
    1c86:	62 1f       	adc	r22, r18
    1c88:	83 9f       	mul	r24, r19
    1c8a:	a0 0d       	add	r26, r0
    1c8c:	61 1d       	adc	r22, r1
    1c8e:	22 1f       	adc	r18, r18
    1c90:	74 9f       	mul	r23, r20
    1c92:	33 27       	eor	r19, r19
    1c94:	a0 0d       	add	r26, r0
    1c96:	61 1d       	adc	r22, r1
    1c98:	23 1f       	adc	r18, r19
    1c9a:	84 9f       	mul	r24, r20
    1c9c:	60 0d       	add	r22, r0
    1c9e:	21 1d       	adc	r18, r1
    1ca0:	82 2f       	mov	r24, r18
    1ca2:	76 2f       	mov	r23, r22
    1ca4:	6a 2f       	mov	r22, r26
    1ca6:	11 24       	eor	r1, r1
    1ca8:	9f 57       	subi	r25, 0x7F	; 127
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	9a f0       	brmi	.+38     	; 0x1cd4 <__mulsf3_pse+0x88>
    1cae:	f1 f0       	breq	.+60     	; 0x1cec <__mulsf3_pse+0xa0>
    1cb0:	88 23       	and	r24, r24
    1cb2:	4a f0       	brmi	.+18     	; 0x1cc6 <__mulsf3_pse+0x7a>
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	66 1f       	adc	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	91 50       	subi	r25, 0x01	; 1
    1cc2:	50 40       	sbci	r21, 0x00	; 0
    1cc4:	a9 f7       	brne	.-22     	; 0x1cb0 <__mulsf3_pse+0x64>
    1cc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc8:	51 05       	cpc	r21, r1
    1cca:	80 f0       	brcs	.+32     	; 0x1cec <__mulsf3_pse+0xa0>
    1ccc:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1cd0:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1cd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd6:	e4 f3       	brlt	.-8      	; 0x1cd0 <__mulsf3_pse+0x84>
    1cd8:	98 3e       	cpi	r25, 0xE8	; 232
    1cda:	d4 f3       	brlt	.-12     	; 0x1cd0 <__mulsf3_pse+0x84>
    1cdc:	86 95       	lsr	r24
    1cde:	77 95       	ror	r23
    1ce0:	67 95       	ror	r22
    1ce2:	b7 95       	ror	r27
    1ce4:	f7 95       	ror	r31
    1ce6:	e7 95       	ror	r30
    1ce8:	9f 5f       	subi	r25, 0xFF	; 255
    1cea:	c1 f7       	brne	.-16     	; 0x1cdc <__mulsf3_pse+0x90>
    1cec:	fe 2b       	or	r31, r30
    1cee:	88 0f       	add	r24, r24
    1cf0:	91 1d       	adc	r25, r1
    1cf2:	96 95       	lsr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	97 f9       	bld	r25, 7
    1cf8:	08 95       	ret

00001cfa <pow>:
    1cfa:	fa 01       	movw	r30, r20
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	30 96       	adiw	r30, 0x00	; 0
    1d02:	21 05       	cpc	r18, r1
    1d04:	31 05       	cpc	r19, r1
    1d06:	a1 f1       	breq	.+104    	; 0x1d70 <pow+0x76>
    1d08:	61 15       	cp	r22, r1
    1d0a:	71 05       	cpc	r23, r1
    1d0c:	61 f4       	brne	.+24     	; 0x1d26 <pow+0x2c>
    1d0e:	80 38       	cpi	r24, 0x80	; 128
    1d10:	bf e3       	ldi	r27, 0x3F	; 63
    1d12:	9b 07       	cpc	r25, r27
    1d14:	49 f1       	breq	.+82     	; 0x1d68 <pow+0x6e>
    1d16:	68 94       	set
    1d18:	90 38       	cpi	r25, 0x80	; 128
    1d1a:	81 05       	cpc	r24, r1
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <pow+0x3c>
    1d1e:	80 38       	cpi	r24, 0x80	; 128
    1d20:	bf ef       	ldi	r27, 0xFF	; 255
    1d22:	9b 07       	cpc	r25, r27
    1d24:	41 f0       	breq	.+16     	; 0x1d36 <pow+0x3c>
    1d26:	99 23       	and	r25, r25
    1d28:	4a f5       	brpl	.+82     	; 0x1d7c <pow+0x82>
    1d2a:	ff 3f       	cpi	r31, 0xFF	; 255
    1d2c:	e1 05       	cpc	r30, r1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	21 05       	cpc	r18, r1
    1d32:	19 f1       	breq	.+70     	; 0x1d7a <pow+0x80>
    1d34:	e8 94       	clt
    1d36:	08 94       	sec
    1d38:	e7 95       	ror	r30
    1d3a:	d9 01       	movw	r26, r18
    1d3c:	aa 23       	and	r26, r26
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <pow+0x50>
    1d40:	ab 2f       	mov	r26, r27
    1d42:	be 2f       	mov	r27, r30
    1d44:	f8 5f       	subi	r31, 0xF8	; 248
    1d46:	d0 f3       	brcs	.-12     	; 0x1d3c <pow+0x42>
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <pow+0x70>
    1d4a:	ff 5f       	subi	r31, 0xFF	; 255
    1d4c:	70 f4       	brcc	.+28     	; 0x1d6a <pow+0x70>
    1d4e:	a6 95       	lsr	r26
    1d50:	e0 f7       	brcc	.-8      	; 0x1d4a <pow+0x50>
    1d52:	f7 39       	cpi	r31, 0x97	; 151
    1d54:	50 f0       	brcs	.+20     	; 0x1d6a <pow+0x70>
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <pow+0x64>
    1d58:	ff 3a       	cpi	r31, 0xAF	; 175
    1d5a:	38 f4       	brcc	.+14     	; 0x1d6a <pow+0x70>
    1d5c:	9f 77       	andi	r25, 0x7F	; 127
    1d5e:	9f 93       	push	r25
    1d60:	0d d0       	rcall	.+26     	; 0x1d7c <pow+0x82>
    1d62:	0f 90       	pop	r0
    1d64:	07 fc       	sbrc	r0, 7
    1d66:	90 58       	subi	r25, 0x80	; 128
    1d68:	08 95       	ret
    1d6a:	46 f0       	brts	.+16     	; 0x1d7c <pow+0x82>
    1d6c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	9f e3       	ldi	r25, 0x3F	; 63
    1d78:	08 95       	ret
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	9f 77       	andi	r25, 0x7F	; 127
    1d7e:	5f 93       	push	r21
    1d80:	4f 93       	push	r20
    1d82:	3f 93       	push	r19
    1d84:	2f 93       	push	r18
    1d86:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <log>
    1d8a:	2f 91       	pop	r18
    1d8c:	3f 91       	pop	r19
    1d8e:	4f 91       	pop	r20
    1d90:	5f 91       	pop	r21
    1d92:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <__mulsf3>
    1d96:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <exp>
    1d9a:	29 f4       	brne	.+10     	; 0x1da6 <pow+0xac>
    1d9c:	16 f0       	brts	.+4      	; 0x1da2 <pow+0xa8>
    1d9e:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1da2:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__fp_zero>
    1da6:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>

00001daa <exp>:
    1daa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_splitA>
    1dae:	a8 f3       	brcs	.-22     	; 0x1d9a <pow+0xa0>
    1db0:	96 38       	cpi	r25, 0x86	; 134
    1db2:	a0 f7       	brcc	.-24     	; 0x1d9c <pow+0xa2>
    1db4:	07 f8       	bld	r0, 7
    1db6:	0f 92       	push	r0
    1db8:	e8 94       	clt
    1dba:	2b e3       	ldi	r18, 0x3B	; 59
    1dbc:	3a ea       	ldi	r19, 0xAA	; 170
    1dbe:	48 eb       	ldi	r20, 0xB8	; 184
    1dc0:	5f e7       	ldi	r21, 0x7F	; 127
    1dc2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3_pse>
    1dc6:	0f 92       	push	r0
    1dc8:	0f 92       	push	r0
    1dca:	0f 92       	push	r0
    1dcc:	4d b7       	in	r20, 0x3d	; 61
    1dce:	5e b7       	in	r21, 0x3e	; 62
    1dd0:	0f 92       	push	r0
    1dd2:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <modf>
    1dd6:	e4 e5       	ldi	r30, 0x54	; 84
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_powser>
    1dde:	4f 91       	pop	r20
    1de0:	5f 91       	pop	r21
    1de2:	ef 91       	pop	r30
    1de4:	ff 91       	pop	r31
    1de6:	e5 95       	asr	r30
    1de8:	ee 1f       	adc	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	49 f0       	breq	.+18     	; 0x1e00 <exp+0x56>
    1dee:	fe 57       	subi	r31, 0x7E	; 126
    1df0:	e0 68       	ori	r30, 0x80	; 128
    1df2:	44 27       	eor	r20, r20
    1df4:	ee 0f       	add	r30, r30
    1df6:	44 1f       	adc	r20, r20
    1df8:	fa 95       	dec	r31
    1dfa:	e1 f7       	brne	.-8      	; 0x1df4 <exp+0x4a>
    1dfc:	41 95       	neg	r20
    1dfe:	55 0b       	sbc	r21, r21
    1e00:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <ldexp>
    1e04:	0f 90       	pop	r0
    1e06:	07 fe       	sbrs	r0, 7
    1e08:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <inverse>
    1e0c:	08 95       	ret

00001e0e <__fp_powser>:
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	1f 93       	push	r17
    1e14:	0f 93       	push	r16
    1e16:	ff 92       	push	r15
    1e18:	ef 92       	push	r14
    1e1a:	df 92       	push	r13
    1e1c:	7b 01       	movw	r14, r22
    1e1e:	8c 01       	movw	r16, r24
    1e20:	68 94       	set
    1e22:	06 c0       	rjmp	.+12     	; 0x1e30 <__fp_powser+0x22>
    1e24:	da 2e       	mov	r13, r26
    1e26:	ef 01       	movw	r28, r30
    1e28:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3x>
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e8 94       	clt
    1e30:	a5 91       	lpm	r26, Z+
    1e32:	25 91       	lpm	r18, Z+
    1e34:	35 91       	lpm	r19, Z+
    1e36:	45 91       	lpm	r20, Z+
    1e38:	55 91       	lpm	r21, Z+
    1e3a:	a6 f3       	brts	.-24     	; 0x1e24 <__fp_powser+0x16>
    1e3c:	ef 01       	movw	r28, r30
    1e3e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__addsf3x>
    1e42:	fe 01       	movw	r30, r28
    1e44:	97 01       	movw	r18, r14
    1e46:	a8 01       	movw	r20, r16
    1e48:	da 94       	dec	r13
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <__fp_powser+0x18>
    1e4c:	df 90       	pop	r13
    1e4e:	ef 90       	pop	r14
    1e50:	ff 90       	pop	r15
    1e52:	0f 91       	pop	r16
    1e54:	1f 91       	pop	r17
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <inverse>:
    1e5c:	9b 01       	movw	r18, r22
    1e5e:	ac 01       	movw	r20, r24
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	80 e8       	ldi	r24, 0x80	; 128
    1e66:	9f e3       	ldi	r25, 0x3F	; 63
    1e68:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__divsf3>
    1e6c:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>
    1e70:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_mpack>

00001e74 <ldexp>:
    1e74:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_splitA>
    1e78:	d8 f3       	brcs	.-10     	; 0x1e70 <inverse+0x14>
    1e7a:	99 23       	and	r25, r25
    1e7c:	c9 f3       	breq	.-14     	; 0x1e70 <inverse+0x14>
    1e7e:	94 0f       	add	r25, r20
    1e80:	51 1d       	adc	r21, r1
    1e82:	a3 f3       	brvs	.-24     	; 0x1e6c <inverse+0x10>
    1e84:	91 50       	subi	r25, 0x01	; 1
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	94 f0       	brlt	.+36     	; 0x1eae <ldexp+0x3a>
    1e8a:	59 f0       	breq	.+22     	; 0x1ea2 <ldexp+0x2e>
    1e8c:	88 23       	and	r24, r24
    1e8e:	32 f0       	brmi	.+12     	; 0x1e9c <ldexp+0x28>
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	91 50       	subi	r25, 0x01	; 1
    1e98:	50 40       	sbci	r21, 0x00	; 0
    1e9a:	c1 f7       	brne	.-16     	; 0x1e8c <ldexp+0x18>
    1e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	2c f7       	brge	.-54     	; 0x1e6c <inverse+0x10>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	91 1d       	adc	r25, r1
    1ea6:	96 95       	lsr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	97 f9       	bld	r25, 7
    1eac:	08 95       	ret
    1eae:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb0:	ac f0       	brlt	.+42     	; 0x1edc <ldexp+0x68>
    1eb2:	98 3e       	cpi	r25, 0xE8	; 232
    1eb4:	9c f0       	brlt	.+38     	; 0x1edc <ldexp+0x68>
    1eb6:	bb 27       	eor	r27, r27
    1eb8:	86 95       	lsr	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b7 95       	ror	r27
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <ldexp+0x50>
    1ec2:	b1 60       	ori	r27, 0x01	; 1
    1ec4:	93 95       	inc	r25
    1ec6:	c1 f7       	brne	.-16     	; 0x1eb8 <ldexp+0x44>
    1ec8:	bb 0f       	add	r27, r27
    1eca:	58 f7       	brcc	.-42     	; 0x1ea2 <ldexp+0x2e>
    1ecc:	11 f4       	brne	.+4      	; 0x1ed2 <ldexp+0x5e>
    1ece:	60 ff       	sbrs	r22, 0
    1ed0:	e8 cf       	rjmp	.-48     	; 0x1ea2 <ldexp+0x2e>
    1ed2:	6f 5f       	subi	r22, 0xFF	; 255
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	e3 cf       	rjmp	.-58     	; 0x1ea2 <ldexp+0x2e>
    1edc:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__fp_szero>
    1ee0:	16 f0       	brts	.+4      	; 0x1ee6 <ldexp+0x72>
    1ee2:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__fp_mpack>
    1ee6:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__fp_nan>
    1eea:	68 94       	set
    1eec:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__fp_inf>

00001ef0 <log>:
    1ef0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__fp_splitA>
    1ef4:	a8 f3       	brcs	.-22     	; 0x1ee0 <ldexp+0x6c>
    1ef6:	99 23       	and	r25, r25
    1ef8:	c1 f3       	breq	.-16     	; 0x1eea <ldexp+0x76>
    1efa:	ae f3       	brts	.-22     	; 0x1ee6 <ldexp+0x72>
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	1f 93       	push	r17
    1f02:	0f 93       	push	r16
    1f04:	ff 92       	push	r15
    1f06:	c9 2f       	mov	r28, r25
    1f08:	dd 27       	eor	r29, r29
    1f0a:	88 23       	and	r24, r24
    1f0c:	2a f0       	brmi	.+10     	; 0x1f18 <log+0x28>
    1f0e:	21 97       	sbiw	r28, 0x01	; 1
    1f10:	66 0f       	add	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	88 1f       	adc	r24, r24
    1f16:	da f7       	brpl	.-10     	; 0x1f0e <log+0x1e>
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f eb       	ldi	r21, 0xBF	; 191
    1f20:	9f e3       	ldi	r25, 0x3F	; 63
    1f22:	88 39       	cpi	r24, 0x98	; 152
    1f24:	20 f0       	brcs	.+8      	; 0x1f2e <log+0x3e>
    1f26:	80 3e       	cpi	r24, 0xE0	; 224
    1f28:	38 f0       	brcs	.+14     	; 0x1f38 <log+0x48>
    1f2a:	21 96       	adiw	r28, 0x01	; 1
    1f2c:	8f 77       	andi	r24, 0x7F	; 127
    1f2e:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
    1f32:	ec e7       	ldi	r30, 0x7C	; 124
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <log+0x50>
    1f38:	0e 94 45 0c 	call	0x188a	; 0x188a <__addsf3>
    1f3c:	e9 ea       	ldi	r30, 0xA9	; 169
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_powser>
    1f44:	8b 01       	movw	r16, r22
    1f46:	be 01       	movw	r22, r28
    1f48:	ec 01       	movw	r28, r24
    1f4a:	fb 2e       	mov	r15, r27
    1f4c:	6f 57       	subi	r22, 0x7F	; 127
    1f4e:	71 09       	sbc	r23, r1
    1f50:	75 95       	asr	r23
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 0b       	sbc	r24, r24
    1f56:	99 0b       	sbc	r25, r25
    1f58:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__floatsisf>
    1f5c:	28 e1       	ldi	r18, 0x18	; 24
    1f5e:	32 e7       	ldi	r19, 0x72	; 114
    1f60:	41 e3       	ldi	r20, 0x31	; 49
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__mulsf3x>
    1f68:	af 2d       	mov	r26, r15
    1f6a:	98 01       	movw	r18, r16
    1f6c:	ae 01       	movw	r20, r28
    1f6e:	ff 90       	pop	r15
    1f70:	0f 91       	pop	r16
    1f72:	1f 91       	pop	r17
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__addsf3x>
    1f7c:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__fp_round>

00001f80 <modf>:
    1f80:	fa 01       	movw	r30, r20
    1f82:	dc 01       	movw	r26, r24
    1f84:	aa 0f       	add	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	9b 01       	movw	r18, r22
    1f8a:	ac 01       	movw	r20, r24
    1f8c:	bf 57       	subi	r27, 0x7F	; 127
    1f8e:	28 f4       	brcc	.+10     	; 0x1f9a <modf+0x1a>
    1f90:	22 27       	eor	r18, r18
    1f92:	33 27       	eor	r19, r19
    1f94:	44 27       	eor	r20, r20
    1f96:	50 78       	andi	r21, 0x80	; 128
    1f98:	20 c0       	rjmp	.+64     	; 0x1fda <modf+0x5a>
    1f9a:	b7 51       	subi	r27, 0x17	; 23
    1f9c:	90 f4       	brcc	.+36     	; 0x1fc2 <modf+0x42>
    1f9e:	ab 2f       	mov	r26, r27
    1fa0:	00 24       	eor	r0, r0
    1fa2:	46 95       	lsr	r20
    1fa4:	37 95       	ror	r19
    1fa6:	27 95       	ror	r18
    1fa8:	01 1c       	adc	r0, r1
    1faa:	a3 95       	inc	r26
    1fac:	d2 f3       	brmi	.-12     	; 0x1fa2 <modf+0x22>
    1fae:	00 20       	and	r0, r0
    1fb0:	71 f0       	breq	.+28     	; 0x1fce <modf+0x4e>
    1fb2:	22 0f       	add	r18, r18
    1fb4:	33 1f       	adc	r19, r19
    1fb6:	44 1f       	adc	r20, r20
    1fb8:	b3 95       	inc	r27
    1fba:	da f3       	brmi	.-10     	; 0x1fb2 <modf+0x32>
    1fbc:	0e d0       	rcall	.+28     	; 0x1fda <modf+0x5a>
    1fbe:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__subsf3>
    1fc2:	61 30       	cpi	r22, 0x01	; 1
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	a0 e8       	ldi	r26, 0x80	; 128
    1fc8:	8a 07       	cpc	r24, r26
    1fca:	b9 46       	sbci	r27, 0x69	; 105
    1fcc:	30 f4       	brcc	.+12     	; 0x1fda <modf+0x5a>
    1fce:	9b 01       	movw	r18, r22
    1fd0:	ac 01       	movw	r20, r24
    1fd2:	66 27       	eor	r22, r22
    1fd4:	77 27       	eor	r23, r23
    1fd6:	88 27       	eor	r24, r24
    1fd8:	90 78       	andi	r25, 0x80	; 128
    1fda:	30 96       	adiw	r30, 0x00	; 0
    1fdc:	21 f0       	breq	.+8      	; 0x1fe6 <modf+0x66>
    1fde:	20 83       	st	Z, r18
    1fe0:	31 83       	std	Z+1, r19	; 0x01
    1fe2:	42 83       	std	Z+2, r20	; 0x02
    1fe4:	53 83       	std	Z+3, r21	; 0x03
    1fe6:	08 95       	ret

00001fe8 <__fp_mpack>:
    1fe8:	9f 3f       	cpi	r25, 0xFF	; 255
    1fea:	31 f0       	breq	.+12     	; 0x1ff8 <__fp_mpack_finite+0xc>

00001fec <__fp_mpack_finite>:
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	20 f4       	brcc	.+8      	; 0x1ff8 <__fp_mpack_finite+0xc>
    1ff0:	87 95       	ror	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	88 0f       	add	r24, r24
    1ffa:	91 1d       	adc	r25, r1
    1ffc:	96 95       	lsr	r25
    1ffe:	87 95       	ror	r24
    2000:	97 f9       	bld	r25, 7
    2002:	08 95       	ret

00002004 <__divmodhi4>:
    2004:	97 fb       	bst	r25, 7
    2006:	07 2e       	mov	r0, r23
    2008:	16 f4       	brtc	.+4      	; 0x200e <__divmodhi4+0xa>
    200a:	00 94       	com	r0
    200c:	07 d0       	rcall	.+14     	; 0x201c <__divmodhi4_neg1>
    200e:	77 fd       	sbrc	r23, 7
    2010:	09 d0       	rcall	.+18     	; 0x2024 <__divmodhi4_neg2>
    2012:	0e 94 16 10 	call	0x202c	; 0x202c <__udivmodhi4>
    2016:	07 fc       	sbrc	r0, 7
    2018:	05 d0       	rcall	.+10     	; 0x2024 <__divmodhi4_neg2>
    201a:	3e f4       	brtc	.+14     	; 0x202a <__divmodhi4_exit>

0000201c <__divmodhi4_neg1>:
    201c:	90 95       	com	r25
    201e:	81 95       	neg	r24
    2020:	9f 4f       	sbci	r25, 0xFF	; 255
    2022:	08 95       	ret

00002024 <__divmodhi4_neg2>:
    2024:	70 95       	com	r23
    2026:	61 95       	neg	r22
    2028:	7f 4f       	sbci	r23, 0xFF	; 255

0000202a <__divmodhi4_exit>:
    202a:	08 95       	ret

0000202c <__udivmodhi4>:
    202c:	aa 1b       	sub	r26, r26
    202e:	bb 1b       	sub	r27, r27
    2030:	51 e1       	ldi	r21, 0x11	; 17
    2032:	07 c0       	rjmp	.+14     	; 0x2042 <__udivmodhi4_ep>

00002034 <__udivmodhi4_loop>:
    2034:	aa 1f       	adc	r26, r26
    2036:	bb 1f       	adc	r27, r27
    2038:	a6 17       	cp	r26, r22
    203a:	b7 07       	cpc	r27, r23
    203c:	10 f0       	brcs	.+4      	; 0x2042 <__udivmodhi4_ep>
    203e:	a6 1b       	sub	r26, r22
    2040:	b7 0b       	sbc	r27, r23

00002042 <__udivmodhi4_ep>:
    2042:	88 1f       	adc	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	5a 95       	dec	r21
    2048:	a9 f7       	brne	.-22     	; 0x2034 <__udivmodhi4_loop>
    204a:	80 95       	com	r24
    204c:	90 95       	com	r25
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	08 95       	ret

00002054 <__tablejump2__>:
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	05 90       	lpm	r0, Z+
    205a:	f4 91       	lpm	r31, Z
    205c:	e0 2d       	mov	r30, r0
    205e:	09 94       	ijmp

00002060 <__itoa_ncheck>:
    2060:	bb 27       	eor	r27, r27
    2062:	4a 30       	cpi	r20, 0x0A	; 10
    2064:	31 f4       	brne	.+12     	; 0x2072 <__itoa_ncheck+0x12>
    2066:	99 23       	and	r25, r25
    2068:	22 f4       	brpl	.+8      	; 0x2072 <__itoa_ncheck+0x12>
    206a:	bd e2       	ldi	r27, 0x2D	; 45
    206c:	90 95       	com	r25
    206e:	81 95       	neg	r24
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__utoa_common>

00002076 <__utoa_ncheck>:
    2076:	bb 27       	eor	r27, r27

00002078 <__utoa_common>:
    2078:	fb 01       	movw	r30, r22
    207a:	55 27       	eor	r21, r21
    207c:	aa 27       	eor	r26, r26
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	aa 1f       	adc	r26, r26
    2084:	a4 17       	cp	r26, r20
    2086:	10 f0       	brcs	.+4      	; 0x208c <__utoa_common+0x14>
    2088:	a4 1b       	sub	r26, r20
    208a:	83 95       	inc	r24
    208c:	50 51       	subi	r21, 0x10	; 16
    208e:	b9 f7       	brne	.-18     	; 0x207e <__utoa_common+0x6>
    2090:	a0 5d       	subi	r26, 0xD0	; 208
    2092:	aa 33       	cpi	r26, 0x3A	; 58
    2094:	08 f0       	brcs	.+2      	; 0x2098 <__utoa_common+0x20>
    2096:	a9 5d       	subi	r26, 0xD9	; 217
    2098:	a1 93       	st	Z+, r26
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	79 f7       	brne	.-34     	; 0x207c <__utoa_common+0x4>
    209e:	b1 11       	cpse	r27, r1
    20a0:	b1 93       	st	Z+, r27
    20a2:	11 92       	st	Z+, r1
    20a4:	cb 01       	movw	r24, r22
    20a6:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <strrev>

000020aa <strrev>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	fc 01       	movw	r30, r24
    20ae:	67 2f       	mov	r22, r23
    20b0:	71 91       	ld	r23, Z+
    20b2:	77 23       	and	r23, r23
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <strrev+0x4>
    20b6:	32 97       	sbiw	r30, 0x02	; 2
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <strrev+0x18>
    20ba:	7c 91       	ld	r23, X
    20bc:	6d 93       	st	X+, r22
    20be:	70 83       	st	Z, r23
    20c0:	62 91       	ld	r22, -Z
    20c2:	ae 17       	cp	r26, r30
    20c4:	bf 07       	cpc	r27, r31
    20c6:	c8 f3       	brcs	.-14     	; 0x20ba <strrev+0x10>
    20c8:	08 95       	ret

000020ca <_exit>:
    20ca:	f8 94       	cli

000020cc <__stop_program>:
    20cc:	ff cf       	rjmp	.-2      	; 0x20cc <__stop_program>
