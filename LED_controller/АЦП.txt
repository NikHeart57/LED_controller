#define F_CPU 14745600UL

#include <stdlib.h>						// включает функции - itoa() atoi()
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "ST7789.h"

char itoa_temp[8];

void Setup_TIM0(void);
void Setup_TIM1(void);
void Setup_INT(void);
void Setup_ADC(void);

int ADC_PA0_Get(void);
int ADC_PA1_Get(void);

int volt_aver = 0;
int volt_PA0 = 0;
int button_push = 0;

int main(void)
{
	_delay_ms(100);
	
	Setup_ADC();
	Setup_INT();
	
	ST7789_InitSPI();
	ST7789_InitST7789();
	ST7789_FillScreen(BLACK);
	ST7789_SetXYpos(0, 0);
	

	
	while (1)
	{
		cli();
		ST7789_SetXYpos(0, 0);
		ST7789_PrintString((char*)"ADC0");
		
		ST7789_SetXYpos(0, 16);
		ST7789_PrintString((char*)"    ");	
		ST7789_SetXYpos(0, 16);
		
		ST7789_PrintString(itoa(volt_aver, itoa_temp, 10));
		ST7789_SetXYpos(0, 32);
		ST7789_PrintString(itoa(button_push, itoa_temp, 10));
		sei();	
	}
}

ISR(INT0_vect)
{
	cli();
	volt_PA0 = 0;
	volt_aver = 0;
	char sucsess = 0;

	
	do 
	{
		volt_PA0 = ADC_PA0_Get();
		
		if (volt_PA0 < 600)
		{
			volt_aver += volt_PA0;
			sucsess++;
		}
	} while (sucsess < 50);
	
	
	volt_aver /= sucsess;


	char dopusk = 15;
	
	if (volt_aver < 510 + dopusk && volt_aver > 510 - dopusk) 
	{ 
		button_push = 3;
	}
	else if (volt_aver < 242 + dopusk && volt_aver > 242 - dopusk)
	{
		button_push = 2;
	}
	else if (volt_aver < 130 + dopusk && volt_aver > 130 - dopusk)
	{
		button_push = 1;
	}
	else if (volt_aver < 45 + dopusk && volt_aver > 45 - dopusk)
	{
		button_push = 0;
	}
	else 
	{
		button_push = 5;
	}
	
	sei();
}

void Setup_TIM0(void)
{
	//////////// Таймер 0 (8 бит) PWM ////////////
	OCR0  |= 0;			// Скважность - Значение сравнения f = fcpu/(N*256) = 7372800/256 = 28800 || = 14745600/256 = 57600 | 248 -> 97.1% | 249 -> 97.5% | 250 -> 97.9% | 251 -> 98.3% | 252 -> 98.7%  | *по расчету надо 97,5 - 98,6%
	TCCR0 |= (0 << FOC0)|(1  << WGM01)|(1 << WGM00)|(1 << COM01)|(0 << COM00)|(0 << CS02)|(0 << CS01)|(1 << CS00);	// WGM - fast PWM, COM - clear on compare, CS - прескелер, FOC - ?
	
	DDRB |= 0b00001000;		// Вывод ШИМ - PB3(OC0)
	
	sei();
}


void Setup_TIM1(void)
{
	//////////// Таймер 1 (16 бит) Часы ////////////
	OCR1A   = 14398;	// Запись значения прерывания CTC производится до инициализации таймера
	TCCR1A |= (0 << COM1A1)|(0 << COM1A0)|(0 << COM1B1)|(0 << COM1B0)|(0 << FOC1A)|(0 << FOC1B)|(0 << WGM11)|(0 << WGM10);	// COM - порты, FOC - ?, WGM - режим CTC, CS - прескелер
	TCCR1B |= (0 <<  ICNC1)|(0 <<  ICES1)|(0 <<  WGM13)|(1 <<  WGM12)|(1 <<  CS12)|(0 <<  CS11)|(1 <<  CS10);				// IC - настройки пина ICP1 (PD6)
	TIMSK  |= (0 << TICIE1)|(1 << OCIE1A)|(0 << OCIE1B)|(0 << TOIE1);														// OCIE1A - Прерывание по совпадению разрешено
	
	sei();
}

void Setup_INT(void)
{
	GICR |= (0 << INT1)|(1 << INT0)|(0 << INT2);						// General Interrupt Control Register - Установка битов INT1, INT0 или INT2 разрешает прерывания при возникновении события на соответствующем выводе микроконтроллера AVR, а сброс — запрещает.
	MCUCR |= (1 << ISC11)|(0 << ISC10)|(1 << ISC01)|(0 << ISC00);		// 10	- Перывание по спадающему фронту INT0, INT1
	MCUCSR |= (0 << ISC2);												// 0	- Перывание по спадающему фронту INT2
	
	sei();
}


void Setup_ADC(void)
{		
	ADCSRA |= (1 << ADEN);                                // Разрешаем работу АЦП (1)
	//ADCSRA |= (1 << ADSC);                                // Запуск АЦП (1)
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);     // Задаю делитель N для определения частоты дискретизации f_ацп = f_цпу / N;
	// при ADPS0..2 = 111       => f_ацп = 14745600 / 128 = 115200Гц
	// при ADPS0..2 = 101       => f_ацп = 14745600 / 32  = 460800Гц
	// при ADPS0..2 = 001       => f_ацп = 14745600 / 2   = 7372800Гц
	
	ADMUX  |= (1 << REFS1)|(1 << REFS0);                  // Задаю ИОН, REFS0..1 = 11 => внутренний ИОН, U_ион = 2,56В
	ADMUX  |= (0 << ADLAR);                               // Правосторонее выравнивание ADLAR = 0; ADCH, ADCL
	
	ADMUX  |= (0 << MUX4)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0);  // Выбор пина АЦП; MX0..4 = 00000 => ADC0(PA0);
	
	DDRA = 0b00000000;   // Все входы  (0) 
	
	sei();
}

int ADC_PA0_Get(void)
{
	ADMUX  |= (0 << MUX4)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(0 << MUX0);  // Выбор пина АЦП; MX0..4 = 00000 => ADC0(PA0);
	
	ADCSRA |= (1 << ADSC);			// Начинаем преобразование
	while((ADCSRA & (1 << ADSC)));	// Проверим закончилось ли аналого-цифровое преобразование
		
	return ADC;
}

int ADC_PA1_Get(void)
{
	ADMUX  |= (0 << MUX4)|(0 << MUX3)|(0 << MUX2)|(0 << MUX1)|(1 << MUX0);  // Выбор пина АЦП; MX0..4 = 00000 => ADC1(PA1);
	
	ADCSRA |= (1 << ADSC);			// Начинаем преобразование
	while((ADCSRA & (1 << ADSC)));	// Проверим закончилось ли аналого-цифровое преобразование
	
	return ADC;
}